Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    PERIOD
    AND
    NOT
    OR

Grammar

Rule 0     S' -> program
Rule 1     program -> programName f_loadVispiFunctions hardware vars assign functions
Rule 2     f_loadVispiFunctions -> <empty>
Rule 3     programName -> PROGRAM ID NEWLINE
Rule 4     empty -> <empty>
Rule 5     hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration
Rule 6     camDeclaration -> empty
Rule 7     camDeclaration -> CAM WEBCAM COLON ID NEWLINE
Rule 8     camDeclaration -> CAM PICAM COLON ID NEWLINE
Rule 9     inputsDeclaration -> empty
Rule 10    inputsDeclaration -> INPUT f_saveType pinList NEWLINE
Rule 11    outputsDeclaration -> empty
Rule 12    outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE
Rule 13    pwmDeclaration -> empty
Rule 14    pwmDeclaration -> PWM f_saveType pinList NEWLINE
Rule 15    pinList -> C_INT COLON ID
Rule 16    pinList -> C_INT COLON ID COMMA pinList
Rule 17    vars -> f_checkTab tipo idList NEWLINE f_resetTab moreVars
Rule 18    moreVars -> f_checkTab tipo idList NEWLINE f_resetTab moreVars
Rule 19    moreVars -> empty
Rule 20    f_saveType -> <empty>
Rule 21    idList -> ID
Rule 22    idList -> ID COMMA idList
Rule 23    tipo -> BOOL f_saveType
Rule 24    tipo -> INT f_saveType
Rule 25    tipo -> FLOAT f_saveType
Rule 26    tipo -> STRING f_saveType
Rule 27    tipo -> IMAGE f_saveType
Rule 28    functions -> DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
Rule 29    functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
Rule 30    functions -> DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
Rule 31    functions -> DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
Rule 32    functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
Rule 33    functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
Rule 34    functions -> empty
Rule 35    f_setVoid -> <empty>
Rule 36    f_endModule -> <empty>
Rule 37    f_saveModule -> <empty>
Rule 38    parameterList -> empty
Rule 39    parameterList -> COMMA tipo ID f_addToParam parameterList
Rule 40    f_addToParam -> <empty>
Rule 41    assign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign
Rule 42    moreAssign -> empty
Rule 43    moreAssign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign
Rule 44    f_isAssign -> <empty>
Rule 45    f_generateEqual -> <empty>
Rule 46    f_checkID -> <empty>
Rule 47    moreStatements -> empty
Rule 48    moreStatements -> TAB f_addTab moreTabs statement moreStatements
Rule 49    block -> TAB f_addTab moreTabs statement moreStatements
Rule 50    moreTabs -> empty
Rule 51    moreTabs -> TAB f_addTab moreTabs
Rule 52    moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs
Rule 53    f_incTab -> <empty>
Rule 54    f_addTab -> <empty>
Rule 55    f_resetTab -> <empty>
Rule 56    f_checkTab -> <empty>
Rule 57    statement -> vars
Rule 58    statement -> assign
Rule 59    statement -> f_checkTab condition
Rule 60    statement -> f_checkTab doCycle
Rule 61    statement -> cycle
Rule 62    statement -> f_checkTab funct NEWLINE f_resetTab
Rule 63    statement -> f_checkTab RETURN f_isReturn expression f_return NEWLINE f_resetTab
Rule 64    statement -> empty
Rule 65    f_isReturn -> <empty>
Rule 66    f_return -> <empty>
Rule 67    cycle -> f_checkTab WHILE f_isCondition expression COLON NEWLINE f_resetTab f_incTab block
Rule 68    condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block
Rule 69    condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block f_checkTab ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block
Rule 70    f_decTab -> <empty>
Rule 71    doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block f_checkTab LOOP f_isDoWhile f_isCondition expression NEWLINE f_resetTab
Rule 72    f_popIf -> <empty>
Rule 73    f_pushDo -> <empty>
Rule 74    f_isDoWhile -> <empty>
Rule 75    f_isCondition -> <empty>
Rule 76    funct -> ID f_checkProc LPAREN RPAREN
Rule 77    funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN
Rule 78    f_checkProc -> <empty>
Rule 79    expressionList -> empty
Rule 80    expressionList -> COMMA expression f_genParam expressionList
Rule 81    f_genParam -> <empty>
Rule 82    expression -> exp
Rule 83    expression -> exp compareToken exp f_popComparation
Rule 84    f_popComparation -> <empty>
Rule 85    compareToken -> GREATER_THAN
Rule 86    compareToken -> LESS_THAN
Rule 87    compareToken -> LESS_EQUAL_THAN
Rule 88    compareToken -> GREATER_EQUAL_THAN
Rule 89    compareToken -> NOT_EQUAL_THAN
Rule 90    compareToken -> SAME_AS
Rule 91    exp -> term moreTerms
Rule 92    moreTerms -> empty
Rule 93    moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms
Rule 94    moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms
Rule 95    f_popTerm -> <empty>
Rule 96    term -> factor moreFactors
Rule 97    moreFactors -> empty
Rule 98    moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors
Rule 99    moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors
Rule 100   moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors
Rule 101   factor -> LPAREN f_pushOperator expression RPAREN f_popOperator
Rule 102   factor -> cvar
Rule 103   factor -> funct
Rule 104   f_pushOperator -> <empty>
Rule 105   f_popOperator -> <empty>
Rule 106   f_popFactor -> <empty>
Rule 107   cvar -> ID f_isID
Rule 108   cvar -> C_BOOL f_isConst
Rule 109   cvar -> C_INT f_isConst
Rule 110   cvar -> C_FLOAT f_isConst
Rule 111   cvar -> C_STRING f_isConst
Rule 112   f_isID -> <empty>
Rule 113   f_isConst -> <empty>

Terminals, with rules where they appear

AND                  : 
BOOL                 : 23
CAM                  : 7 8
COLON                : 7 8 15 16 28 29 30 31 32 33 67 68 69 69 71
COMMA                : 16 22 39 80
C_BOOL               : 108
C_FLOAT              : 110
C_INT                : 15 16 109
C_STRING             : 111
DEF                  : 28 29 30 31 32 33
DIVIDE               : 98
DO                   : 71
ELSE                 : 69
EQUAL                : 41 43
FLOAT                : 25
GREATER_EQUAL_THAN   : 88
GREATER_THAN         : 85
ID                   : 3 7 8 15 16 21 22 28 29 29 30 31 31 33 39 41 43 76 77 107
IF                   : 68 69
IMAGE                : 27
INPUT                : 10
INT                  : 24
LESS_EQUAL_THAN      : 87
LESS_THAN            : 86
LOOP                 : 71
LPAREN               : 28 29 30 31 32 33 76 77 101
MAIN                 : 32 33
MINUS                : 94
MOD                  : 100
NEWLINE              : 3 7 8 10 12 14 17 18 28 29 30 31 32 33 41 43 52 62 63 67 68 69 69 71 71
NOT                  : 
NOT_EQUAL_THAN       : 89
OR                   : 
OUTPUT               : 12
PERIOD               : 
PICAM                : 8
PLUS                 : 93
PROGRAM              : 3
PWM                  : 14
RETURN               : 63
RPAREN               : 28 29 30 31 32 33 76 77 101
SAME_AS              : 90
STRING               : 26
TAB                  : 48 49 51 52
TIMES                : 99
VOID                 : 30 31 32 33
WEBCAM               : 7
WHILE                : 67
error                : 

Nonterminals, with rules where they appear

assign               : 1 58
block                : 28 29 30 31 32 33 67 68 69 69 71
camDeclaration       : 5
compareToken         : 83
condition            : 59
cvar                 : 102
cycle                : 61
doCycle              : 60
empty                : 6 9 11 13 19 34 38 42 47 50 64 79 92 97
exp                  : 82 83 83
expression           : 41 43 63 67 68 69 71 77 80 101
expressionList       : 77 80
f_addTab             : 48 49 51 52
f_addToParam         : 29 31 33 39
f_checkID            : 41 43
f_checkProc          : 76 77
f_checkTab           : 17 18 41 43 59 60 62 63 67 69 71
f_decTab             : 
f_endModule          : 28 29 30 31 32 33
f_genParam           : 77 80
f_generateEqual      : 41 43
f_incTab             : 28 29 30 31 32 33 67 68 69 69 71
f_isAssign           : 41 43
f_isCondition        : 67 68 69 71
f_isConst            : 108 109 110 111
f_isDoWhile          : 71
f_isID               : 107
f_isReturn           : 63
f_loadVispiFunctions : 1
f_popComparation     : 83
f_popFactor          : 98 99 100
f_popIf              : 69
f_popOperator        : 101
f_popTerm            : 93 94
f_pushDo             : 71
f_pushOperator       : 93 94 98 99 100 101
f_resetTab           : 17 18 28 29 30 31 32 33 41 43 52 62 63 67 68 69 69 71 71
f_return             : 63
f_saveModule         : 28 29 30 31 32 33
f_saveType           : 10 12 14 23 24 25 26 27
f_setVoid            : 30 31 32 33
factor               : 96 98 99 100
funct                : 62 103
functions            : 1 28 29 30 31 32 33
hardware             : 1
idList               : 17 18 22
inputsDeclaration    : 5
moreAssign           : 41 43
moreFactors          : 96 98 99 100
moreStatements       : 48 49
moreTabs             : 48 49 51 52
moreTerms            : 91 93 94
moreVars             : 17 18
outputsDeclaration   : 5
parameterList        : 29 31 33 39
pinList              : 10 12 14 16
program              : 0
programName          : 1
pwmDeclaration       : 5
statement            : 48 49
term                 : 91 93 94
tipo                 : 17 18 28 29 29 31 33 39
vars                 : 1 57

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . programName f_loadVispiFunctions hardware vars assign functions
    (3) programName -> . PROGRAM ID NEWLINE

    PROGRAM         shift and go to state 3

    program                        shift and go to state 1
    programName                    shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> programName . f_loadVispiFunctions hardware vars assign functions
    (2) f_loadVispiFunctions -> .

    CAM             reduce using rule 2 (f_loadVispiFunctions -> .)
    BOOL            reduce using rule 2 (f_loadVispiFunctions -> .)
    INT             reduce using rule 2 (f_loadVispiFunctions -> .)
    FLOAT           reduce using rule 2 (f_loadVispiFunctions -> .)
    STRING          reduce using rule 2 (f_loadVispiFunctions -> .)
    IMAGE           reduce using rule 2 (f_loadVispiFunctions -> .)
    INPUT           reduce using rule 2 (f_loadVispiFunctions -> .)
    OUTPUT          reduce using rule 2 (f_loadVispiFunctions -> .)
    PWM             reduce using rule 2 (f_loadVispiFunctions -> .)

    f_loadVispiFunctions           shift and go to state 4

state 3

    (3) programName -> PROGRAM . ID NEWLINE

    ID              shift and go to state 5


state 4

    (1) program -> programName f_loadVispiFunctions . hardware vars assign functions
    (5) hardware -> . camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration
    (6) camDeclaration -> . empty
    (7) camDeclaration -> . CAM WEBCAM COLON ID NEWLINE
    (8) camDeclaration -> . CAM PICAM COLON ID NEWLINE
    (4) empty -> .

    CAM             shift and go to state 6
    INPUT           reduce using rule 4 (empty -> .)
    OUTPUT          reduce using rule 4 (empty -> .)
    PWM             reduce using rule 4 (empty -> .)
    BOOL            reduce using rule 4 (empty -> .)
    INT             reduce using rule 4 (empty -> .)
    FLOAT           reduce using rule 4 (empty -> .)
    STRING          reduce using rule 4 (empty -> .)
    IMAGE           reduce using rule 4 (empty -> .)

    camDeclaration                 shift and go to state 7
    hardware                       shift and go to state 8
    empty                          shift and go to state 9

state 5

    (3) programName -> PROGRAM ID . NEWLINE

    NEWLINE         shift and go to state 10


state 6

    (7) camDeclaration -> CAM . WEBCAM COLON ID NEWLINE
    (8) camDeclaration -> CAM . PICAM COLON ID NEWLINE

    WEBCAM          shift and go to state 11
    PICAM           shift and go to state 12


state 7

    (5) hardware -> camDeclaration . inputsDeclaration outputsDeclaration pwmDeclaration
    (9) inputsDeclaration -> . empty
    (10) inputsDeclaration -> . INPUT f_saveType pinList NEWLINE
    (4) empty -> .

    INPUT           shift and go to state 14
    OUTPUT          reduce using rule 4 (empty -> .)
    PWM             reduce using rule 4 (empty -> .)
    BOOL            reduce using rule 4 (empty -> .)
    INT             reduce using rule 4 (empty -> .)
    FLOAT           reduce using rule 4 (empty -> .)
    STRING          reduce using rule 4 (empty -> .)
    IMAGE           reduce using rule 4 (empty -> .)

    inputsDeclaration              shift and go to state 13
    empty                          shift and go to state 15

state 8

    (1) program -> programName f_loadVispiFunctions hardware . vars assign functions
    (17) vars -> . f_checkTab tipo idList NEWLINE f_resetTab moreVars
    (56) f_checkTab -> .

    BOOL            reduce using rule 56 (f_checkTab -> .)
    INT             reduce using rule 56 (f_checkTab -> .)
    FLOAT           reduce using rule 56 (f_checkTab -> .)
    STRING          reduce using rule 56 (f_checkTab -> .)
    IMAGE           reduce using rule 56 (f_checkTab -> .)

    vars                           shift and go to state 16
    f_checkTab                     shift and go to state 17

state 9

    (6) camDeclaration -> empty .

    INPUT           reduce using rule 6 (camDeclaration -> empty .)
    OUTPUT          reduce using rule 6 (camDeclaration -> empty .)
    PWM             reduce using rule 6 (camDeclaration -> empty .)
    BOOL            reduce using rule 6 (camDeclaration -> empty .)
    INT             reduce using rule 6 (camDeclaration -> empty .)
    FLOAT           reduce using rule 6 (camDeclaration -> empty .)
    STRING          reduce using rule 6 (camDeclaration -> empty .)
    IMAGE           reduce using rule 6 (camDeclaration -> empty .)


state 10

    (3) programName -> PROGRAM ID NEWLINE .

    CAM             reduce using rule 3 (programName -> PROGRAM ID NEWLINE .)
    BOOL            reduce using rule 3 (programName -> PROGRAM ID NEWLINE .)
    INT             reduce using rule 3 (programName -> PROGRAM ID NEWLINE .)
    FLOAT           reduce using rule 3 (programName -> PROGRAM ID NEWLINE .)
    STRING          reduce using rule 3 (programName -> PROGRAM ID NEWLINE .)
    IMAGE           reduce using rule 3 (programName -> PROGRAM ID NEWLINE .)
    INPUT           reduce using rule 3 (programName -> PROGRAM ID NEWLINE .)
    OUTPUT          reduce using rule 3 (programName -> PROGRAM ID NEWLINE .)
    PWM             reduce using rule 3 (programName -> PROGRAM ID NEWLINE .)


state 11

    (7) camDeclaration -> CAM WEBCAM . COLON ID NEWLINE

    COLON           shift and go to state 18


state 12

    (8) camDeclaration -> CAM PICAM . COLON ID NEWLINE

    COLON           shift and go to state 19


state 13

    (5) hardware -> camDeclaration inputsDeclaration . outputsDeclaration pwmDeclaration
    (11) outputsDeclaration -> . empty
    (12) outputsDeclaration -> . OUTPUT f_saveType pinList NEWLINE
    (4) empty -> .

    OUTPUT          shift and go to state 21
    PWM             reduce using rule 4 (empty -> .)
    BOOL            reduce using rule 4 (empty -> .)
    INT             reduce using rule 4 (empty -> .)
    FLOAT           reduce using rule 4 (empty -> .)
    STRING          reduce using rule 4 (empty -> .)
    IMAGE           reduce using rule 4 (empty -> .)

    outputsDeclaration             shift and go to state 20
    empty                          shift and go to state 22

state 14

    (10) inputsDeclaration -> INPUT . f_saveType pinList NEWLINE
    (20) f_saveType -> .

    C_INT           reduce using rule 20 (f_saveType -> .)

    f_saveType                     shift and go to state 23

state 15

    (9) inputsDeclaration -> empty .

    OUTPUT          reduce using rule 9 (inputsDeclaration -> empty .)
    PWM             reduce using rule 9 (inputsDeclaration -> empty .)
    BOOL            reduce using rule 9 (inputsDeclaration -> empty .)
    INT             reduce using rule 9 (inputsDeclaration -> empty .)
    FLOAT           reduce using rule 9 (inputsDeclaration -> empty .)
    STRING          reduce using rule 9 (inputsDeclaration -> empty .)
    IMAGE           reduce using rule 9 (inputsDeclaration -> empty .)


state 16

    (1) program -> programName f_loadVispiFunctions hardware vars . assign functions
    (41) assign -> . f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign
    (56) f_checkTab -> .

    ID              reduce using rule 56 (f_checkTab -> .)

    f_checkTab                     shift and go to state 24
    assign                         shift and go to state 25

state 17

    (17) vars -> f_checkTab . tipo idList NEWLINE f_resetTab moreVars
    (23) tipo -> . BOOL f_saveType
    (24) tipo -> . INT f_saveType
    (25) tipo -> . FLOAT f_saveType
    (26) tipo -> . STRING f_saveType
    (27) tipo -> . IMAGE f_saveType

    BOOL            shift and go to state 29
    INT             shift and go to state 28
    FLOAT           shift and go to state 26
    STRING          shift and go to state 31
    IMAGE           shift and go to state 30

    tipo                           shift and go to state 27

state 18

    (7) camDeclaration -> CAM WEBCAM COLON . ID NEWLINE

    ID              shift and go to state 32


state 19

    (8) camDeclaration -> CAM PICAM COLON . ID NEWLINE

    ID              shift and go to state 33


state 20

    (5) hardware -> camDeclaration inputsDeclaration outputsDeclaration . pwmDeclaration
    (13) pwmDeclaration -> . empty
    (14) pwmDeclaration -> . PWM f_saveType pinList NEWLINE
    (4) empty -> .

    PWM             shift and go to state 35
    BOOL            reduce using rule 4 (empty -> .)
    INT             reduce using rule 4 (empty -> .)
    FLOAT           reduce using rule 4 (empty -> .)
    STRING          reduce using rule 4 (empty -> .)
    IMAGE           reduce using rule 4 (empty -> .)

    pwmDeclaration                 shift and go to state 34
    empty                          shift and go to state 36

state 21

    (12) outputsDeclaration -> OUTPUT . f_saveType pinList NEWLINE
    (20) f_saveType -> .

    C_INT           reduce using rule 20 (f_saveType -> .)

    f_saveType                     shift and go to state 37

state 22

    (11) outputsDeclaration -> empty .

    PWM             reduce using rule 11 (outputsDeclaration -> empty .)
    BOOL            reduce using rule 11 (outputsDeclaration -> empty .)
    INT             reduce using rule 11 (outputsDeclaration -> empty .)
    FLOAT           reduce using rule 11 (outputsDeclaration -> empty .)
    STRING          reduce using rule 11 (outputsDeclaration -> empty .)
    IMAGE           reduce using rule 11 (outputsDeclaration -> empty .)


state 23

    (10) inputsDeclaration -> INPUT f_saveType . pinList NEWLINE
    (15) pinList -> . C_INT COLON ID
    (16) pinList -> . C_INT COLON ID COMMA pinList

    C_INT           shift and go to state 39

    pinList                        shift and go to state 38

state 24

    (41) assign -> f_checkTab . ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign

    ID              shift and go to state 40


state 25

    (1) program -> programName f_loadVispiFunctions hardware vars assign . functions
    (28) functions -> . DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (29) functions -> . DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (30) functions -> . DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (31) functions -> . DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (32) functions -> . DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (33) functions -> . DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (34) functions -> . empty
    (4) empty -> .

    DEF             shift and go to state 41
    $end            reduce using rule 4 (empty -> .)

    functions                      shift and go to state 42
    empty                          shift and go to state 43

state 26

    (25) tipo -> FLOAT . f_saveType
    (20) f_saveType -> .

    ID              reduce using rule 20 (f_saveType -> .)

    f_saveType                     shift and go to state 44

state 27

    (17) vars -> f_checkTab tipo . idList NEWLINE f_resetTab moreVars
    (21) idList -> . ID
    (22) idList -> . ID COMMA idList

    ID              shift and go to state 46

    idList                         shift and go to state 45

state 28

    (24) tipo -> INT . f_saveType
    (20) f_saveType -> .

    ID              reduce using rule 20 (f_saveType -> .)

    f_saveType                     shift and go to state 47

state 29

    (23) tipo -> BOOL . f_saveType
    (20) f_saveType -> .

    ID              reduce using rule 20 (f_saveType -> .)

    f_saveType                     shift and go to state 48

state 30

    (27) tipo -> IMAGE . f_saveType
    (20) f_saveType -> .

    ID              reduce using rule 20 (f_saveType -> .)

    f_saveType                     shift and go to state 49

state 31

    (26) tipo -> STRING . f_saveType
    (20) f_saveType -> .

    ID              reduce using rule 20 (f_saveType -> .)

    f_saveType                     shift and go to state 50

state 32

    (7) camDeclaration -> CAM WEBCAM COLON ID . NEWLINE

    NEWLINE         shift and go to state 51


state 33

    (8) camDeclaration -> CAM PICAM COLON ID . NEWLINE

    NEWLINE         shift and go to state 52


state 34

    (5) hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .

    BOOL            reduce using rule 5 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    INT             reduce using rule 5 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    FLOAT           reduce using rule 5 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    STRING          reduce using rule 5 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    IMAGE           reduce using rule 5 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)


state 35

    (14) pwmDeclaration -> PWM . f_saveType pinList NEWLINE
    (20) f_saveType -> .

    C_INT           reduce using rule 20 (f_saveType -> .)

    f_saveType                     shift and go to state 53

state 36

    (13) pwmDeclaration -> empty .

    BOOL            reduce using rule 13 (pwmDeclaration -> empty .)
    INT             reduce using rule 13 (pwmDeclaration -> empty .)
    FLOAT           reduce using rule 13 (pwmDeclaration -> empty .)
    STRING          reduce using rule 13 (pwmDeclaration -> empty .)
    IMAGE           reduce using rule 13 (pwmDeclaration -> empty .)


state 37

    (12) outputsDeclaration -> OUTPUT f_saveType . pinList NEWLINE
    (15) pinList -> . C_INT COLON ID
    (16) pinList -> . C_INT COLON ID COMMA pinList

    C_INT           shift and go to state 39

    pinList                        shift and go to state 54

state 38

    (10) inputsDeclaration -> INPUT f_saveType pinList . NEWLINE

    NEWLINE         shift and go to state 55


state 39

    (15) pinList -> C_INT . COLON ID
    (16) pinList -> C_INT . COLON ID COMMA pinList

    COLON           shift and go to state 56


state 40

    (41) assign -> f_checkTab ID . f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign
    (46) f_checkID -> .

    EQUAL           reduce using rule 46 (f_checkID -> .)

    f_checkID                      shift and go to state 57

state 41

    (28) functions -> DEF . tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (29) functions -> DEF . tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (30) functions -> DEF . VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (31) functions -> DEF . VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (32) functions -> DEF . VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (33) functions -> DEF . VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (23) tipo -> . BOOL f_saveType
    (24) tipo -> . INT f_saveType
    (25) tipo -> . FLOAT f_saveType
    (26) tipo -> . STRING f_saveType
    (27) tipo -> . IMAGE f_saveType

    VOID            shift and go to state 58
    BOOL            shift and go to state 29
    INT             shift and go to state 28
    FLOAT           shift and go to state 26
    STRING          shift and go to state 31
    IMAGE           shift and go to state 30

    tipo                           shift and go to state 59

state 42

    (1) program -> programName f_loadVispiFunctions hardware vars assign functions .

    $end            reduce using rule 1 (program -> programName f_loadVispiFunctions hardware vars assign functions .)


state 43

    (34) functions -> empty .

    $end            reduce using rule 34 (functions -> empty .)


state 44

    (25) tipo -> FLOAT f_saveType .

    ID              reduce using rule 25 (tipo -> FLOAT f_saveType .)


state 45

    (17) vars -> f_checkTab tipo idList . NEWLINE f_resetTab moreVars

    NEWLINE         shift and go to state 60


state 46

    (21) idList -> ID .
    (22) idList -> ID . COMMA idList

    NEWLINE         reduce using rule 21 (idList -> ID .)
    COMMA           shift and go to state 61


state 47

    (24) tipo -> INT f_saveType .

    ID              reduce using rule 24 (tipo -> INT f_saveType .)


state 48

    (23) tipo -> BOOL f_saveType .

    ID              reduce using rule 23 (tipo -> BOOL f_saveType .)


state 49

    (27) tipo -> IMAGE f_saveType .

    ID              reduce using rule 27 (tipo -> IMAGE f_saveType .)


state 50

    (26) tipo -> STRING f_saveType .

    ID              reduce using rule 26 (tipo -> STRING f_saveType .)


state 51

    (7) camDeclaration -> CAM WEBCAM COLON ID NEWLINE .

    INPUT           reduce using rule 7 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    OUTPUT          reduce using rule 7 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    PWM             reduce using rule 7 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    BOOL            reduce using rule 7 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    INT             reduce using rule 7 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    FLOAT           reduce using rule 7 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    STRING          reduce using rule 7 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    IMAGE           reduce using rule 7 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)


state 52

    (8) camDeclaration -> CAM PICAM COLON ID NEWLINE .

    INPUT           reduce using rule 8 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    OUTPUT          reduce using rule 8 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    PWM             reduce using rule 8 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    BOOL            reduce using rule 8 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    INT             reduce using rule 8 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    FLOAT           reduce using rule 8 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    STRING          reduce using rule 8 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    IMAGE           reduce using rule 8 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)


state 53

    (14) pwmDeclaration -> PWM f_saveType . pinList NEWLINE
    (15) pinList -> . C_INT COLON ID
    (16) pinList -> . C_INT COLON ID COMMA pinList

    C_INT           shift and go to state 39

    pinList                        shift and go to state 62

state 54

    (12) outputsDeclaration -> OUTPUT f_saveType pinList . NEWLINE

    NEWLINE         shift and go to state 63


state 55

    (10) inputsDeclaration -> INPUT f_saveType pinList NEWLINE .

    OUTPUT          reduce using rule 10 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    PWM             reduce using rule 10 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    BOOL            reduce using rule 10 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    INT             reduce using rule 10 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    FLOAT           reduce using rule 10 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    STRING          reduce using rule 10 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    IMAGE           reduce using rule 10 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)


state 56

    (15) pinList -> C_INT COLON . ID
    (16) pinList -> C_INT COLON . ID COMMA pinList

    ID              shift and go to state 64


state 57

    (41) assign -> f_checkTab ID f_checkID . EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign

    EQUAL           shift and go to state 65


state 58

    (30) functions -> DEF VOID . f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (31) functions -> DEF VOID . f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (32) functions -> DEF VOID . f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (33) functions -> DEF VOID . f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (35) f_setVoid -> .

    ID              reduce using rule 35 (f_setVoid -> .)
    MAIN            reduce using rule 35 (f_setVoid -> .)

    f_setVoid                      shift and go to state 66

state 59

    (28) functions -> DEF tipo . ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (29) functions -> DEF tipo . ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    ID              shift and go to state 67


state 60

    (17) vars -> f_checkTab tipo idList NEWLINE . f_resetTab moreVars
    (55) f_resetTab -> .

    BOOL            reduce using rule 55 (f_resetTab -> .)
    INT             reduce using rule 55 (f_resetTab -> .)
    FLOAT           reduce using rule 55 (f_resetTab -> .)
    STRING          reduce using rule 55 (f_resetTab -> .)
    IMAGE           reduce using rule 55 (f_resetTab -> .)
    ID              reduce using rule 55 (f_resetTab -> .)
    TAB             reduce using rule 55 (f_resetTab -> .)
    DEF             reduce using rule 55 (f_resetTab -> .)
    $end            reduce using rule 55 (f_resetTab -> .)
    LOOP            reduce using rule 55 (f_resetTab -> .)
    ELSE            reduce using rule 55 (f_resetTab -> .)

    f_resetTab                     shift and go to state 68

state 61

    (22) idList -> ID COMMA . idList
    (21) idList -> . ID
    (22) idList -> . ID COMMA idList

    ID              shift and go to state 46

    idList                         shift and go to state 69

state 62

    (14) pwmDeclaration -> PWM f_saveType pinList . NEWLINE

    NEWLINE         shift and go to state 70


state 63

    (12) outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .

    PWM             reduce using rule 12 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    BOOL            reduce using rule 12 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    INT             reduce using rule 12 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    FLOAT           reduce using rule 12 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    STRING          reduce using rule 12 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    IMAGE           reduce using rule 12 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)


state 64

    (15) pinList -> C_INT COLON ID .
    (16) pinList -> C_INT COLON ID . COMMA pinList

    NEWLINE         reduce using rule 15 (pinList -> C_INT COLON ID .)
    COMMA           shift and go to state 71


state 65

    (41) assign -> f_checkTab ID f_checkID EQUAL . f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign
    (44) f_isAssign -> .

    LPAREN          reduce using rule 44 (f_isAssign -> .)
    ID              reduce using rule 44 (f_isAssign -> .)
    C_BOOL          reduce using rule 44 (f_isAssign -> .)
    C_INT           reduce using rule 44 (f_isAssign -> .)
    C_FLOAT         reduce using rule 44 (f_isAssign -> .)
    C_STRING        reduce using rule 44 (f_isAssign -> .)

    f_isAssign                     shift and go to state 72

state 66

    (30) functions -> DEF VOID f_setVoid . ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (31) functions -> DEF VOID f_setVoid . ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (32) functions -> DEF VOID f_setVoid . MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (33) functions -> DEF VOID f_setVoid . MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    ID              shift and go to state 74
    MAIN            shift and go to state 73


state 67

    (28) functions -> DEF tipo ID . f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (29) functions -> DEF tipo ID . f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (37) f_saveModule -> .

    LPAREN          reduce using rule 37 (f_saveModule -> .)

    f_saveModule                   shift and go to state 75

state 68

    (17) vars -> f_checkTab tipo idList NEWLINE f_resetTab . moreVars
    (18) moreVars -> . f_checkTab tipo idList NEWLINE f_resetTab moreVars
    (19) moreVars -> . empty
    (56) f_checkTab -> .
    (4) empty -> .

    BOOL            reduce using rule 56 (f_checkTab -> .)
    INT             reduce using rule 56 (f_checkTab -> .)
    FLOAT           reduce using rule 56 (f_checkTab -> .)
    STRING          reduce using rule 56 (f_checkTab -> .)
    IMAGE           reduce using rule 56 (f_checkTab -> .)
    ID              reduce using rule 4 (empty -> .)
    TAB             reduce using rule 4 (empty -> .)
    DEF             reduce using rule 4 (empty -> .)
    $end            reduce using rule 4 (empty -> .)
    LOOP            reduce using rule 4 (empty -> .)
    ELSE            reduce using rule 4 (empty -> .)

    f_checkTab                     shift and go to state 76
    moreVars                       shift and go to state 77
    empty                          shift and go to state 78

state 69

    (22) idList -> ID COMMA idList .

    NEWLINE         reduce using rule 22 (idList -> ID COMMA idList .)


state 70

    (14) pwmDeclaration -> PWM f_saveType pinList NEWLINE .

    BOOL            reduce using rule 14 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)
    INT             reduce using rule 14 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)
    FLOAT           reduce using rule 14 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)
    STRING          reduce using rule 14 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)
    IMAGE           reduce using rule 14 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)


state 71

    (16) pinList -> C_INT COLON ID COMMA . pinList
    (15) pinList -> . C_INT COLON ID
    (16) pinList -> . C_INT COLON ID COMMA pinList

    C_INT           shift and go to state 39

    pinList                        shift and go to state 79

state 72

    (41) assign -> f_checkTab ID f_checkID EQUAL f_isAssign . expression NEWLINE f_resetTab f_generateEqual moreAssign
    (82) expression -> . exp
    (83) expression -> . exp compareToken exp f_popComparation
    (91) exp -> . term moreTerms
    (96) term -> . factor moreFactors
    (101) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (102) factor -> . cvar
    (103) factor -> . funct
    (107) cvar -> . ID f_isID
    (108) cvar -> . C_BOOL f_isConst
    (109) cvar -> . C_INT f_isConst
    (110) cvar -> . C_FLOAT f_isConst
    (111) cvar -> . C_STRING f_isConst
    (76) funct -> . ID f_checkProc LPAREN RPAREN
    (77) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 85
    ID              shift and go to state 87
    C_BOOL          shift and go to state 83
    C_INT           shift and go to state 86
    C_FLOAT         shift and go to state 81
    C_STRING        shift and go to state 88

    cvar                           shift and go to state 80
    funct                          shift and go to state 82
    factor                         shift and go to state 84
    term                           shift and go to state 89
    exp                            shift and go to state 90
    expression                     shift and go to state 91

state 73

    (32) functions -> DEF VOID f_setVoid MAIN . f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (33) functions -> DEF VOID f_setVoid MAIN . f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (37) f_saveModule -> .

    LPAREN          reduce using rule 37 (f_saveModule -> .)

    f_saveModule                   shift and go to state 92

state 74

    (30) functions -> DEF VOID f_setVoid ID . f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (31) functions -> DEF VOID f_setVoid ID . f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (37) f_saveModule -> .

    LPAREN          reduce using rule 37 (f_saveModule -> .)

    f_saveModule                   shift and go to state 93

state 75

    (28) functions -> DEF tipo ID f_saveModule . LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (29) functions -> DEF tipo ID f_saveModule . LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    LPAREN          shift and go to state 94


state 76

    (18) moreVars -> f_checkTab . tipo idList NEWLINE f_resetTab moreVars
    (23) tipo -> . BOOL f_saveType
    (24) tipo -> . INT f_saveType
    (25) tipo -> . FLOAT f_saveType
    (26) tipo -> . STRING f_saveType
    (27) tipo -> . IMAGE f_saveType

    BOOL            shift and go to state 29
    INT             shift and go to state 28
    FLOAT           shift and go to state 26
    STRING          shift and go to state 31
    IMAGE           shift and go to state 30

    tipo                           shift and go to state 95

state 77

    (17) vars -> f_checkTab tipo idList NEWLINE f_resetTab moreVars .

    ID              reduce using rule 17 (vars -> f_checkTab tipo idList NEWLINE f_resetTab moreVars .)
    TAB             reduce using rule 17 (vars -> f_checkTab tipo idList NEWLINE f_resetTab moreVars .)
    DEF             reduce using rule 17 (vars -> f_checkTab tipo idList NEWLINE f_resetTab moreVars .)
    $end            reduce using rule 17 (vars -> f_checkTab tipo idList NEWLINE f_resetTab moreVars .)
    LOOP            reduce using rule 17 (vars -> f_checkTab tipo idList NEWLINE f_resetTab moreVars .)
    ELSE            reduce using rule 17 (vars -> f_checkTab tipo idList NEWLINE f_resetTab moreVars .)


state 78

    (19) moreVars -> empty .

    ID              reduce using rule 19 (moreVars -> empty .)
    TAB             reduce using rule 19 (moreVars -> empty .)
    DEF             reduce using rule 19 (moreVars -> empty .)
    $end            reduce using rule 19 (moreVars -> empty .)
    LOOP            reduce using rule 19 (moreVars -> empty .)
    ELSE            reduce using rule 19 (moreVars -> empty .)


state 79

    (16) pinList -> C_INT COLON ID COMMA pinList .

    NEWLINE         reduce using rule 16 (pinList -> C_INT COLON ID COMMA pinList .)


state 80

    (102) factor -> cvar .

    DIVIDE          reduce using rule 102 (factor -> cvar .)
    TIMES           reduce using rule 102 (factor -> cvar .)
    MOD             reduce using rule 102 (factor -> cvar .)
    PLUS            reduce using rule 102 (factor -> cvar .)
    MINUS           reduce using rule 102 (factor -> cvar .)
    GREATER_THAN    reduce using rule 102 (factor -> cvar .)
    LESS_THAN       reduce using rule 102 (factor -> cvar .)
    LESS_EQUAL_THAN reduce using rule 102 (factor -> cvar .)
    GREATER_EQUAL_THAN reduce using rule 102 (factor -> cvar .)
    NOT_EQUAL_THAN  reduce using rule 102 (factor -> cvar .)
    SAME_AS         reduce using rule 102 (factor -> cvar .)
    COLON           reduce using rule 102 (factor -> cvar .)
    NEWLINE         reduce using rule 102 (factor -> cvar .)
    COMMA           reduce using rule 102 (factor -> cvar .)
    RPAREN          reduce using rule 102 (factor -> cvar .)


state 81

    (110) cvar -> C_FLOAT . f_isConst
    (113) f_isConst -> .

    DIVIDE          reduce using rule 113 (f_isConst -> .)
    TIMES           reduce using rule 113 (f_isConst -> .)
    MOD             reduce using rule 113 (f_isConst -> .)
    PLUS            reduce using rule 113 (f_isConst -> .)
    MINUS           reduce using rule 113 (f_isConst -> .)
    GREATER_THAN    reduce using rule 113 (f_isConst -> .)
    LESS_THAN       reduce using rule 113 (f_isConst -> .)
    LESS_EQUAL_THAN reduce using rule 113 (f_isConst -> .)
    GREATER_EQUAL_THAN reduce using rule 113 (f_isConst -> .)
    NOT_EQUAL_THAN  reduce using rule 113 (f_isConst -> .)
    SAME_AS         reduce using rule 113 (f_isConst -> .)
    NEWLINE         reduce using rule 113 (f_isConst -> .)
    RPAREN          reduce using rule 113 (f_isConst -> .)
    COMMA           reduce using rule 113 (f_isConst -> .)
    COLON           reduce using rule 113 (f_isConst -> .)

    f_isConst                      shift and go to state 96

state 82

    (103) factor -> funct .

    DIVIDE          reduce using rule 103 (factor -> funct .)
    TIMES           reduce using rule 103 (factor -> funct .)
    MOD             reduce using rule 103 (factor -> funct .)
    PLUS            reduce using rule 103 (factor -> funct .)
    MINUS           reduce using rule 103 (factor -> funct .)
    GREATER_THAN    reduce using rule 103 (factor -> funct .)
    LESS_THAN       reduce using rule 103 (factor -> funct .)
    LESS_EQUAL_THAN reduce using rule 103 (factor -> funct .)
    GREATER_EQUAL_THAN reduce using rule 103 (factor -> funct .)
    NOT_EQUAL_THAN  reduce using rule 103 (factor -> funct .)
    SAME_AS         reduce using rule 103 (factor -> funct .)
    COLON           reduce using rule 103 (factor -> funct .)
    NEWLINE         reduce using rule 103 (factor -> funct .)
    COMMA           reduce using rule 103 (factor -> funct .)
    RPAREN          reduce using rule 103 (factor -> funct .)


state 83

    (108) cvar -> C_BOOL . f_isConst
    (113) f_isConst -> .

    DIVIDE          reduce using rule 113 (f_isConst -> .)
    TIMES           reduce using rule 113 (f_isConst -> .)
    MOD             reduce using rule 113 (f_isConst -> .)
    PLUS            reduce using rule 113 (f_isConst -> .)
    MINUS           reduce using rule 113 (f_isConst -> .)
    GREATER_THAN    reduce using rule 113 (f_isConst -> .)
    LESS_THAN       reduce using rule 113 (f_isConst -> .)
    LESS_EQUAL_THAN reduce using rule 113 (f_isConst -> .)
    GREATER_EQUAL_THAN reduce using rule 113 (f_isConst -> .)
    NOT_EQUAL_THAN  reduce using rule 113 (f_isConst -> .)
    SAME_AS         reduce using rule 113 (f_isConst -> .)
    NEWLINE         reduce using rule 113 (f_isConst -> .)
    RPAREN          reduce using rule 113 (f_isConst -> .)
    COMMA           reduce using rule 113 (f_isConst -> .)
    COLON           reduce using rule 113 (f_isConst -> .)

    f_isConst                      shift and go to state 97

state 84

    (96) term -> factor . moreFactors
    (97) moreFactors -> . empty
    (98) moreFactors -> . DIVIDE f_pushOperator factor f_popFactor moreFactors
    (99) moreFactors -> . TIMES f_pushOperator factor f_popFactor moreFactors
    (100) moreFactors -> . MOD f_pushOperator factor f_popFactor moreFactors
    (4) empty -> .

    DIVIDE          shift and go to state 99
    TIMES           shift and go to state 100
    MOD             shift and go to state 102
    PLUS            reduce using rule 4 (empty -> .)
    MINUS           reduce using rule 4 (empty -> .)
    GREATER_THAN    reduce using rule 4 (empty -> .)
    LESS_THAN       reduce using rule 4 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 4 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 4 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 4 (empty -> .)
    SAME_AS         reduce using rule 4 (empty -> .)
    NEWLINE         reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    COLON           reduce using rule 4 (empty -> .)

    moreFactors                    shift and go to state 98
    empty                          shift and go to state 101

state 85

    (101) factor -> LPAREN . f_pushOperator expression RPAREN f_popOperator
    (104) f_pushOperator -> .

    LPAREN          reduce using rule 104 (f_pushOperator -> .)
    ID              reduce using rule 104 (f_pushOperator -> .)
    C_BOOL          reduce using rule 104 (f_pushOperator -> .)
    C_INT           reduce using rule 104 (f_pushOperator -> .)
    C_FLOAT         reduce using rule 104 (f_pushOperator -> .)
    C_STRING        reduce using rule 104 (f_pushOperator -> .)

    f_pushOperator                 shift and go to state 103

state 86

    (109) cvar -> C_INT . f_isConst
    (113) f_isConst -> .

    DIVIDE          reduce using rule 113 (f_isConst -> .)
    TIMES           reduce using rule 113 (f_isConst -> .)
    MOD             reduce using rule 113 (f_isConst -> .)
    PLUS            reduce using rule 113 (f_isConst -> .)
    MINUS           reduce using rule 113 (f_isConst -> .)
    GREATER_THAN    reduce using rule 113 (f_isConst -> .)
    LESS_THAN       reduce using rule 113 (f_isConst -> .)
    LESS_EQUAL_THAN reduce using rule 113 (f_isConst -> .)
    GREATER_EQUAL_THAN reduce using rule 113 (f_isConst -> .)
    NOT_EQUAL_THAN  reduce using rule 113 (f_isConst -> .)
    SAME_AS         reduce using rule 113 (f_isConst -> .)
    NEWLINE         reduce using rule 113 (f_isConst -> .)
    RPAREN          reduce using rule 113 (f_isConst -> .)
    COMMA           reduce using rule 113 (f_isConst -> .)
    COLON           reduce using rule 113 (f_isConst -> .)

    f_isConst                      shift and go to state 104

state 87

    (107) cvar -> ID . f_isID
    (76) funct -> ID . f_checkProc LPAREN RPAREN
    (77) funct -> ID . f_checkProc LPAREN expression f_genParam expressionList RPAREN
    (112) f_isID -> .
    (78) f_checkProc -> .

    DIVIDE          reduce using rule 112 (f_isID -> .)
    TIMES           reduce using rule 112 (f_isID -> .)
    MOD             reduce using rule 112 (f_isID -> .)
    PLUS            reduce using rule 112 (f_isID -> .)
    MINUS           reduce using rule 112 (f_isID -> .)
    GREATER_THAN    reduce using rule 112 (f_isID -> .)
    LESS_THAN       reduce using rule 112 (f_isID -> .)
    LESS_EQUAL_THAN reduce using rule 112 (f_isID -> .)
    GREATER_EQUAL_THAN reduce using rule 112 (f_isID -> .)
    NOT_EQUAL_THAN  reduce using rule 112 (f_isID -> .)
    SAME_AS         reduce using rule 112 (f_isID -> .)
    NEWLINE         reduce using rule 112 (f_isID -> .)
    RPAREN          reduce using rule 112 (f_isID -> .)
    COMMA           reduce using rule 112 (f_isID -> .)
    COLON           reduce using rule 112 (f_isID -> .)
    LPAREN          reduce using rule 78 (f_checkProc -> .)

    f_checkProc                    shift and go to state 105
    f_isID                         shift and go to state 106

state 88

    (111) cvar -> C_STRING . f_isConst
    (113) f_isConst -> .

    DIVIDE          reduce using rule 113 (f_isConst -> .)
    TIMES           reduce using rule 113 (f_isConst -> .)
    MOD             reduce using rule 113 (f_isConst -> .)
    PLUS            reduce using rule 113 (f_isConst -> .)
    MINUS           reduce using rule 113 (f_isConst -> .)
    GREATER_THAN    reduce using rule 113 (f_isConst -> .)
    LESS_THAN       reduce using rule 113 (f_isConst -> .)
    LESS_EQUAL_THAN reduce using rule 113 (f_isConst -> .)
    GREATER_EQUAL_THAN reduce using rule 113 (f_isConst -> .)
    NOT_EQUAL_THAN  reduce using rule 113 (f_isConst -> .)
    SAME_AS         reduce using rule 113 (f_isConst -> .)
    NEWLINE         reduce using rule 113 (f_isConst -> .)
    RPAREN          reduce using rule 113 (f_isConst -> .)
    COMMA           reduce using rule 113 (f_isConst -> .)
    COLON           reduce using rule 113 (f_isConst -> .)

    f_isConst                      shift and go to state 107

state 89

    (91) exp -> term . moreTerms
    (92) moreTerms -> . empty
    (93) moreTerms -> . PLUS f_pushOperator term f_popTerm moreTerms
    (94) moreTerms -> . MINUS f_pushOperator term f_popTerm moreTerms
    (4) empty -> .

    PLUS            shift and go to state 109
    MINUS           shift and go to state 110
    GREATER_THAN    reduce using rule 4 (empty -> .)
    LESS_THAN       reduce using rule 4 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 4 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 4 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 4 (empty -> .)
    SAME_AS         reduce using rule 4 (empty -> .)
    NEWLINE         reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    COLON           reduce using rule 4 (empty -> .)

    moreTerms                      shift and go to state 108
    empty                          shift and go to state 111

state 90

    (82) expression -> exp .
    (83) expression -> exp . compareToken exp f_popComparation
    (85) compareToken -> . GREATER_THAN
    (86) compareToken -> . LESS_THAN
    (87) compareToken -> . LESS_EQUAL_THAN
    (88) compareToken -> . GREATER_EQUAL_THAN
    (89) compareToken -> . NOT_EQUAL_THAN
    (90) compareToken -> . SAME_AS

    NEWLINE         reduce using rule 82 (expression -> exp .)
    COLON           reduce using rule 82 (expression -> exp .)
    RPAREN          reduce using rule 82 (expression -> exp .)
    COMMA           reduce using rule 82 (expression -> exp .)
    GREATER_THAN    shift and go to state 117
    LESS_THAN       shift and go to state 118
    LESS_EQUAL_THAN shift and go to state 114
    GREATER_EQUAL_THAN shift and go to state 113
    NOT_EQUAL_THAN  shift and go to state 116
    SAME_AS         shift and go to state 115

    compareToken                   shift and go to state 112

state 91

    (41) assign -> f_checkTab ID f_checkID EQUAL f_isAssign expression . NEWLINE f_resetTab f_generateEqual moreAssign

    NEWLINE         shift and go to state 119


state 92

    (32) functions -> DEF VOID f_setVoid MAIN f_saveModule . LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (33) functions -> DEF VOID f_setVoid MAIN f_saveModule . LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    LPAREN          shift and go to state 120


state 93

    (30) functions -> DEF VOID f_setVoid ID f_saveModule . LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (31) functions -> DEF VOID f_setVoid ID f_saveModule . LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    LPAREN          shift and go to state 121


state 94

    (28) functions -> DEF tipo ID f_saveModule LPAREN . RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (29) functions -> DEF tipo ID f_saveModule LPAREN . tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (23) tipo -> . BOOL f_saveType
    (24) tipo -> . INT f_saveType
    (25) tipo -> . FLOAT f_saveType
    (26) tipo -> . STRING f_saveType
    (27) tipo -> . IMAGE f_saveType

    RPAREN          shift and go to state 122
    BOOL            shift and go to state 29
    INT             shift and go to state 28
    FLOAT           shift and go to state 26
    STRING          shift and go to state 31
    IMAGE           shift and go to state 30

    tipo                           shift and go to state 123

state 95

    (18) moreVars -> f_checkTab tipo . idList NEWLINE f_resetTab moreVars
    (21) idList -> . ID
    (22) idList -> . ID COMMA idList

    ID              shift and go to state 46

    idList                         shift and go to state 124

state 96

    (110) cvar -> C_FLOAT f_isConst .

    DIVIDE          reduce using rule 110 (cvar -> C_FLOAT f_isConst .)
    TIMES           reduce using rule 110 (cvar -> C_FLOAT f_isConst .)
    MOD             reduce using rule 110 (cvar -> C_FLOAT f_isConst .)
    PLUS            reduce using rule 110 (cvar -> C_FLOAT f_isConst .)
    MINUS           reduce using rule 110 (cvar -> C_FLOAT f_isConst .)
    GREATER_THAN    reduce using rule 110 (cvar -> C_FLOAT f_isConst .)
    LESS_THAN       reduce using rule 110 (cvar -> C_FLOAT f_isConst .)
    LESS_EQUAL_THAN reduce using rule 110 (cvar -> C_FLOAT f_isConst .)
    GREATER_EQUAL_THAN reduce using rule 110 (cvar -> C_FLOAT f_isConst .)
    NOT_EQUAL_THAN  reduce using rule 110 (cvar -> C_FLOAT f_isConst .)
    SAME_AS         reduce using rule 110 (cvar -> C_FLOAT f_isConst .)
    COMMA           reduce using rule 110 (cvar -> C_FLOAT f_isConst .)
    RPAREN          reduce using rule 110 (cvar -> C_FLOAT f_isConst .)
    NEWLINE         reduce using rule 110 (cvar -> C_FLOAT f_isConst .)
    COLON           reduce using rule 110 (cvar -> C_FLOAT f_isConst .)


state 97

    (108) cvar -> C_BOOL f_isConst .

    DIVIDE          reduce using rule 108 (cvar -> C_BOOL f_isConst .)
    TIMES           reduce using rule 108 (cvar -> C_BOOL f_isConst .)
    MOD             reduce using rule 108 (cvar -> C_BOOL f_isConst .)
    PLUS            reduce using rule 108 (cvar -> C_BOOL f_isConst .)
    MINUS           reduce using rule 108 (cvar -> C_BOOL f_isConst .)
    GREATER_THAN    reduce using rule 108 (cvar -> C_BOOL f_isConst .)
    LESS_THAN       reduce using rule 108 (cvar -> C_BOOL f_isConst .)
    LESS_EQUAL_THAN reduce using rule 108 (cvar -> C_BOOL f_isConst .)
    GREATER_EQUAL_THAN reduce using rule 108 (cvar -> C_BOOL f_isConst .)
    NOT_EQUAL_THAN  reduce using rule 108 (cvar -> C_BOOL f_isConst .)
    SAME_AS         reduce using rule 108 (cvar -> C_BOOL f_isConst .)
    COMMA           reduce using rule 108 (cvar -> C_BOOL f_isConst .)
    RPAREN          reduce using rule 108 (cvar -> C_BOOL f_isConst .)
    NEWLINE         reduce using rule 108 (cvar -> C_BOOL f_isConst .)
    COLON           reduce using rule 108 (cvar -> C_BOOL f_isConst .)


state 98

    (96) term -> factor moreFactors .

    PLUS            reduce using rule 96 (term -> factor moreFactors .)
    MINUS           reduce using rule 96 (term -> factor moreFactors .)
    GREATER_THAN    reduce using rule 96 (term -> factor moreFactors .)
    LESS_THAN       reduce using rule 96 (term -> factor moreFactors .)
    LESS_EQUAL_THAN reduce using rule 96 (term -> factor moreFactors .)
    GREATER_EQUAL_THAN reduce using rule 96 (term -> factor moreFactors .)
    NOT_EQUAL_THAN  reduce using rule 96 (term -> factor moreFactors .)
    SAME_AS         reduce using rule 96 (term -> factor moreFactors .)
    NEWLINE         reduce using rule 96 (term -> factor moreFactors .)
    COMMA           reduce using rule 96 (term -> factor moreFactors .)
    RPAREN          reduce using rule 96 (term -> factor moreFactors .)
    COLON           reduce using rule 96 (term -> factor moreFactors .)


state 99

    (98) moreFactors -> DIVIDE . f_pushOperator factor f_popFactor moreFactors
    (104) f_pushOperator -> .

    LPAREN          reduce using rule 104 (f_pushOperator -> .)
    ID              reduce using rule 104 (f_pushOperator -> .)
    C_BOOL          reduce using rule 104 (f_pushOperator -> .)
    C_INT           reduce using rule 104 (f_pushOperator -> .)
    C_FLOAT         reduce using rule 104 (f_pushOperator -> .)
    C_STRING        reduce using rule 104 (f_pushOperator -> .)

    f_pushOperator                 shift and go to state 125

state 100

    (99) moreFactors -> TIMES . f_pushOperator factor f_popFactor moreFactors
    (104) f_pushOperator -> .

    LPAREN          reduce using rule 104 (f_pushOperator -> .)
    ID              reduce using rule 104 (f_pushOperator -> .)
    C_BOOL          reduce using rule 104 (f_pushOperator -> .)
    C_INT           reduce using rule 104 (f_pushOperator -> .)
    C_FLOAT         reduce using rule 104 (f_pushOperator -> .)
    C_STRING        reduce using rule 104 (f_pushOperator -> .)

    f_pushOperator                 shift and go to state 126

state 101

    (97) moreFactors -> empty .

    PLUS            reduce using rule 97 (moreFactors -> empty .)
    MINUS           reduce using rule 97 (moreFactors -> empty .)
    GREATER_THAN    reduce using rule 97 (moreFactors -> empty .)
    LESS_THAN       reduce using rule 97 (moreFactors -> empty .)
    LESS_EQUAL_THAN reduce using rule 97 (moreFactors -> empty .)
    GREATER_EQUAL_THAN reduce using rule 97 (moreFactors -> empty .)
    NOT_EQUAL_THAN  reduce using rule 97 (moreFactors -> empty .)
    SAME_AS         reduce using rule 97 (moreFactors -> empty .)
    NEWLINE         reduce using rule 97 (moreFactors -> empty .)
    RPAREN          reduce using rule 97 (moreFactors -> empty .)
    COMMA           reduce using rule 97 (moreFactors -> empty .)
    COLON           reduce using rule 97 (moreFactors -> empty .)


state 102

    (100) moreFactors -> MOD . f_pushOperator factor f_popFactor moreFactors
    (104) f_pushOperator -> .

    LPAREN          reduce using rule 104 (f_pushOperator -> .)
    ID              reduce using rule 104 (f_pushOperator -> .)
    C_BOOL          reduce using rule 104 (f_pushOperator -> .)
    C_INT           reduce using rule 104 (f_pushOperator -> .)
    C_FLOAT         reduce using rule 104 (f_pushOperator -> .)
    C_STRING        reduce using rule 104 (f_pushOperator -> .)

    f_pushOperator                 shift and go to state 127

state 103

    (101) factor -> LPAREN f_pushOperator . expression RPAREN f_popOperator
    (82) expression -> . exp
    (83) expression -> . exp compareToken exp f_popComparation
    (91) exp -> . term moreTerms
    (96) term -> . factor moreFactors
    (101) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (102) factor -> . cvar
    (103) factor -> . funct
    (107) cvar -> . ID f_isID
    (108) cvar -> . C_BOOL f_isConst
    (109) cvar -> . C_INT f_isConst
    (110) cvar -> . C_FLOAT f_isConst
    (111) cvar -> . C_STRING f_isConst
    (76) funct -> . ID f_checkProc LPAREN RPAREN
    (77) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 85
    ID              shift and go to state 87
    C_BOOL          shift and go to state 83
    C_INT           shift and go to state 86
    C_FLOAT         shift and go to state 81
    C_STRING        shift and go to state 88

    term                           shift and go to state 89
    funct                          shift and go to state 82
    exp                            shift and go to state 90
    factor                         shift and go to state 84
    cvar                           shift and go to state 80
    expression                     shift and go to state 128

state 104

    (109) cvar -> C_INT f_isConst .

    DIVIDE          reduce using rule 109 (cvar -> C_INT f_isConst .)
    TIMES           reduce using rule 109 (cvar -> C_INT f_isConst .)
    MOD             reduce using rule 109 (cvar -> C_INT f_isConst .)
    PLUS            reduce using rule 109 (cvar -> C_INT f_isConst .)
    MINUS           reduce using rule 109 (cvar -> C_INT f_isConst .)
    GREATER_THAN    reduce using rule 109 (cvar -> C_INT f_isConst .)
    LESS_THAN       reduce using rule 109 (cvar -> C_INT f_isConst .)
    LESS_EQUAL_THAN reduce using rule 109 (cvar -> C_INT f_isConst .)
    GREATER_EQUAL_THAN reduce using rule 109 (cvar -> C_INT f_isConst .)
    NOT_EQUAL_THAN  reduce using rule 109 (cvar -> C_INT f_isConst .)
    SAME_AS         reduce using rule 109 (cvar -> C_INT f_isConst .)
    COMMA           reduce using rule 109 (cvar -> C_INT f_isConst .)
    RPAREN          reduce using rule 109 (cvar -> C_INT f_isConst .)
    NEWLINE         reduce using rule 109 (cvar -> C_INT f_isConst .)
    COLON           reduce using rule 109 (cvar -> C_INT f_isConst .)


state 105

    (76) funct -> ID f_checkProc . LPAREN RPAREN
    (77) funct -> ID f_checkProc . LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 129


state 106

    (107) cvar -> ID f_isID .

    DIVIDE          reduce using rule 107 (cvar -> ID f_isID .)
    TIMES           reduce using rule 107 (cvar -> ID f_isID .)
    MOD             reduce using rule 107 (cvar -> ID f_isID .)
    PLUS            reduce using rule 107 (cvar -> ID f_isID .)
    MINUS           reduce using rule 107 (cvar -> ID f_isID .)
    GREATER_THAN    reduce using rule 107 (cvar -> ID f_isID .)
    LESS_THAN       reduce using rule 107 (cvar -> ID f_isID .)
    LESS_EQUAL_THAN reduce using rule 107 (cvar -> ID f_isID .)
    GREATER_EQUAL_THAN reduce using rule 107 (cvar -> ID f_isID .)
    NOT_EQUAL_THAN  reduce using rule 107 (cvar -> ID f_isID .)
    SAME_AS         reduce using rule 107 (cvar -> ID f_isID .)
    COMMA           reduce using rule 107 (cvar -> ID f_isID .)
    RPAREN          reduce using rule 107 (cvar -> ID f_isID .)
    NEWLINE         reduce using rule 107 (cvar -> ID f_isID .)
    COLON           reduce using rule 107 (cvar -> ID f_isID .)


state 107

    (111) cvar -> C_STRING f_isConst .

    DIVIDE          reduce using rule 111 (cvar -> C_STRING f_isConst .)
    TIMES           reduce using rule 111 (cvar -> C_STRING f_isConst .)
    MOD             reduce using rule 111 (cvar -> C_STRING f_isConst .)
    PLUS            reduce using rule 111 (cvar -> C_STRING f_isConst .)
    MINUS           reduce using rule 111 (cvar -> C_STRING f_isConst .)
    GREATER_THAN    reduce using rule 111 (cvar -> C_STRING f_isConst .)
    LESS_THAN       reduce using rule 111 (cvar -> C_STRING f_isConst .)
    LESS_EQUAL_THAN reduce using rule 111 (cvar -> C_STRING f_isConst .)
    GREATER_EQUAL_THAN reduce using rule 111 (cvar -> C_STRING f_isConst .)
    NOT_EQUAL_THAN  reduce using rule 111 (cvar -> C_STRING f_isConst .)
    SAME_AS         reduce using rule 111 (cvar -> C_STRING f_isConst .)
    COMMA           reduce using rule 111 (cvar -> C_STRING f_isConst .)
    RPAREN          reduce using rule 111 (cvar -> C_STRING f_isConst .)
    NEWLINE         reduce using rule 111 (cvar -> C_STRING f_isConst .)
    COLON           reduce using rule 111 (cvar -> C_STRING f_isConst .)


state 108

    (91) exp -> term moreTerms .

    GREATER_THAN    reduce using rule 91 (exp -> term moreTerms .)
    LESS_THAN       reduce using rule 91 (exp -> term moreTerms .)
    LESS_EQUAL_THAN reduce using rule 91 (exp -> term moreTerms .)
    GREATER_EQUAL_THAN reduce using rule 91 (exp -> term moreTerms .)
    NOT_EQUAL_THAN  reduce using rule 91 (exp -> term moreTerms .)
    SAME_AS         reduce using rule 91 (exp -> term moreTerms .)
    RPAREN          reduce using rule 91 (exp -> term moreTerms .)
    NEWLINE         reduce using rule 91 (exp -> term moreTerms .)
    COMMA           reduce using rule 91 (exp -> term moreTerms .)
    COLON           reduce using rule 91 (exp -> term moreTerms .)


state 109

    (93) moreTerms -> PLUS . f_pushOperator term f_popTerm moreTerms
    (104) f_pushOperator -> .

    LPAREN          reduce using rule 104 (f_pushOperator -> .)
    ID              reduce using rule 104 (f_pushOperator -> .)
    C_BOOL          reduce using rule 104 (f_pushOperator -> .)
    C_INT           reduce using rule 104 (f_pushOperator -> .)
    C_FLOAT         reduce using rule 104 (f_pushOperator -> .)
    C_STRING        reduce using rule 104 (f_pushOperator -> .)

    f_pushOperator                 shift and go to state 130

state 110

    (94) moreTerms -> MINUS . f_pushOperator term f_popTerm moreTerms
    (104) f_pushOperator -> .

    LPAREN          reduce using rule 104 (f_pushOperator -> .)
    ID              reduce using rule 104 (f_pushOperator -> .)
    C_BOOL          reduce using rule 104 (f_pushOperator -> .)
    C_INT           reduce using rule 104 (f_pushOperator -> .)
    C_FLOAT         reduce using rule 104 (f_pushOperator -> .)
    C_STRING        reduce using rule 104 (f_pushOperator -> .)

    f_pushOperator                 shift and go to state 131

state 111

    (92) moreTerms -> empty .

    GREATER_THAN    reduce using rule 92 (moreTerms -> empty .)
    LESS_THAN       reduce using rule 92 (moreTerms -> empty .)
    LESS_EQUAL_THAN reduce using rule 92 (moreTerms -> empty .)
    GREATER_EQUAL_THAN reduce using rule 92 (moreTerms -> empty .)
    NOT_EQUAL_THAN  reduce using rule 92 (moreTerms -> empty .)
    SAME_AS         reduce using rule 92 (moreTerms -> empty .)
    NEWLINE         reduce using rule 92 (moreTerms -> empty .)
    RPAREN          reduce using rule 92 (moreTerms -> empty .)
    COMMA           reduce using rule 92 (moreTerms -> empty .)
    COLON           reduce using rule 92 (moreTerms -> empty .)


state 112

    (83) expression -> exp compareToken . exp f_popComparation
    (91) exp -> . term moreTerms
    (96) term -> . factor moreFactors
    (101) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (102) factor -> . cvar
    (103) factor -> . funct
    (107) cvar -> . ID f_isID
    (108) cvar -> . C_BOOL f_isConst
    (109) cvar -> . C_INT f_isConst
    (110) cvar -> . C_FLOAT f_isConst
    (111) cvar -> . C_STRING f_isConst
    (76) funct -> . ID f_checkProc LPAREN RPAREN
    (77) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 85
    ID              shift and go to state 87
    C_BOOL          shift and go to state 83
    C_INT           shift and go to state 86
    C_FLOAT         shift and go to state 81
    C_STRING        shift and go to state 88

    term                           shift and go to state 89
    funct                          shift and go to state 82
    exp                            shift and go to state 132
    factor                         shift and go to state 84
    cvar                           shift and go to state 80

state 113

    (88) compareToken -> GREATER_EQUAL_THAN .

    LPAREN          reduce using rule 88 (compareToken -> GREATER_EQUAL_THAN .)
    ID              reduce using rule 88 (compareToken -> GREATER_EQUAL_THAN .)
    C_BOOL          reduce using rule 88 (compareToken -> GREATER_EQUAL_THAN .)
    C_INT           reduce using rule 88 (compareToken -> GREATER_EQUAL_THAN .)
    C_FLOAT         reduce using rule 88 (compareToken -> GREATER_EQUAL_THAN .)
    C_STRING        reduce using rule 88 (compareToken -> GREATER_EQUAL_THAN .)


state 114

    (87) compareToken -> LESS_EQUAL_THAN .

    LPAREN          reduce using rule 87 (compareToken -> LESS_EQUAL_THAN .)
    ID              reduce using rule 87 (compareToken -> LESS_EQUAL_THAN .)
    C_BOOL          reduce using rule 87 (compareToken -> LESS_EQUAL_THAN .)
    C_INT           reduce using rule 87 (compareToken -> LESS_EQUAL_THAN .)
    C_FLOAT         reduce using rule 87 (compareToken -> LESS_EQUAL_THAN .)
    C_STRING        reduce using rule 87 (compareToken -> LESS_EQUAL_THAN .)


state 115

    (90) compareToken -> SAME_AS .

    LPAREN          reduce using rule 90 (compareToken -> SAME_AS .)
    ID              reduce using rule 90 (compareToken -> SAME_AS .)
    C_BOOL          reduce using rule 90 (compareToken -> SAME_AS .)
    C_INT           reduce using rule 90 (compareToken -> SAME_AS .)
    C_FLOAT         reduce using rule 90 (compareToken -> SAME_AS .)
    C_STRING        reduce using rule 90 (compareToken -> SAME_AS .)


state 116

    (89) compareToken -> NOT_EQUAL_THAN .

    LPAREN          reduce using rule 89 (compareToken -> NOT_EQUAL_THAN .)
    ID              reduce using rule 89 (compareToken -> NOT_EQUAL_THAN .)
    C_BOOL          reduce using rule 89 (compareToken -> NOT_EQUAL_THAN .)
    C_INT           reduce using rule 89 (compareToken -> NOT_EQUAL_THAN .)
    C_FLOAT         reduce using rule 89 (compareToken -> NOT_EQUAL_THAN .)
    C_STRING        reduce using rule 89 (compareToken -> NOT_EQUAL_THAN .)


state 117

    (85) compareToken -> GREATER_THAN .

    LPAREN          reduce using rule 85 (compareToken -> GREATER_THAN .)
    ID              reduce using rule 85 (compareToken -> GREATER_THAN .)
    C_BOOL          reduce using rule 85 (compareToken -> GREATER_THAN .)
    C_INT           reduce using rule 85 (compareToken -> GREATER_THAN .)
    C_FLOAT         reduce using rule 85 (compareToken -> GREATER_THAN .)
    C_STRING        reduce using rule 85 (compareToken -> GREATER_THAN .)


state 118

    (86) compareToken -> LESS_THAN .

    LPAREN          reduce using rule 86 (compareToken -> LESS_THAN .)
    ID              reduce using rule 86 (compareToken -> LESS_THAN .)
    C_BOOL          reduce using rule 86 (compareToken -> LESS_THAN .)
    C_INT           reduce using rule 86 (compareToken -> LESS_THAN .)
    C_FLOAT         reduce using rule 86 (compareToken -> LESS_THAN .)
    C_STRING        reduce using rule 86 (compareToken -> LESS_THAN .)


state 119

    (41) assign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE . f_resetTab f_generateEqual moreAssign
    (55) f_resetTab -> .

    ID              reduce using rule 55 (f_resetTab -> .)
    DEF             reduce using rule 55 (f_resetTab -> .)
    $end            reduce using rule 55 (f_resetTab -> .)
    TAB             reduce using rule 55 (f_resetTab -> .)
    LOOP            reduce using rule 55 (f_resetTab -> .)
    ELSE            reduce using rule 55 (f_resetTab -> .)

    f_resetTab                     shift and go to state 133

state 120

    (32) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN . RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (33) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN . tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (23) tipo -> . BOOL f_saveType
    (24) tipo -> . INT f_saveType
    (25) tipo -> . FLOAT f_saveType
    (26) tipo -> . STRING f_saveType
    (27) tipo -> . IMAGE f_saveType

    RPAREN          shift and go to state 135
    BOOL            shift and go to state 29
    INT             shift and go to state 28
    FLOAT           shift and go to state 26
    STRING          shift and go to state 31
    IMAGE           shift and go to state 30

    tipo                           shift and go to state 134

state 121

    (30) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN . RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (31) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN . tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (23) tipo -> . BOOL f_saveType
    (24) tipo -> . INT f_saveType
    (25) tipo -> . FLOAT f_saveType
    (26) tipo -> . STRING f_saveType
    (27) tipo -> . IMAGE f_saveType

    RPAREN          shift and go to state 137
    BOOL            shift and go to state 29
    INT             shift and go to state 28
    FLOAT           shift and go to state 26
    STRING          shift and go to state 31
    IMAGE           shift and go to state 30

    tipo                           shift and go to state 136

state 122

    (28) functions -> DEF tipo ID f_saveModule LPAREN RPAREN . COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    COLON           shift and go to state 138


state 123

    (29) functions -> DEF tipo ID f_saveModule LPAREN tipo . ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    ID              shift and go to state 139


state 124

    (18) moreVars -> f_checkTab tipo idList . NEWLINE f_resetTab moreVars

    NEWLINE         shift and go to state 140


state 125

    (98) moreFactors -> DIVIDE f_pushOperator . factor f_popFactor moreFactors
    (101) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (102) factor -> . cvar
    (103) factor -> . funct
    (107) cvar -> . ID f_isID
    (108) cvar -> . C_BOOL f_isConst
    (109) cvar -> . C_INT f_isConst
    (110) cvar -> . C_FLOAT f_isConst
    (111) cvar -> . C_STRING f_isConst
    (76) funct -> . ID f_checkProc LPAREN RPAREN
    (77) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 85
    ID              shift and go to state 87
    C_BOOL          shift and go to state 83
    C_INT           shift and go to state 86
    C_FLOAT         shift and go to state 81
    C_STRING        shift and go to state 88

    funct                          shift and go to state 82
    cvar                           shift and go to state 80
    factor                         shift and go to state 141

state 126

    (99) moreFactors -> TIMES f_pushOperator . factor f_popFactor moreFactors
    (101) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (102) factor -> . cvar
    (103) factor -> . funct
    (107) cvar -> . ID f_isID
    (108) cvar -> . C_BOOL f_isConst
    (109) cvar -> . C_INT f_isConst
    (110) cvar -> . C_FLOAT f_isConst
    (111) cvar -> . C_STRING f_isConst
    (76) funct -> . ID f_checkProc LPAREN RPAREN
    (77) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 85
    ID              shift and go to state 87
    C_BOOL          shift and go to state 83
    C_INT           shift and go to state 86
    C_FLOAT         shift and go to state 81
    C_STRING        shift and go to state 88

    funct                          shift and go to state 82
    cvar                           shift and go to state 80
    factor                         shift and go to state 142

state 127

    (100) moreFactors -> MOD f_pushOperator . factor f_popFactor moreFactors
    (101) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (102) factor -> . cvar
    (103) factor -> . funct
    (107) cvar -> . ID f_isID
    (108) cvar -> . C_BOOL f_isConst
    (109) cvar -> . C_INT f_isConst
    (110) cvar -> . C_FLOAT f_isConst
    (111) cvar -> . C_STRING f_isConst
    (76) funct -> . ID f_checkProc LPAREN RPAREN
    (77) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 85
    ID              shift and go to state 87
    C_BOOL          shift and go to state 83
    C_INT           shift and go to state 86
    C_FLOAT         shift and go to state 81
    C_STRING        shift and go to state 88

    funct                          shift and go to state 82
    cvar                           shift and go to state 80
    factor                         shift and go to state 143

state 128

    (101) factor -> LPAREN f_pushOperator expression . RPAREN f_popOperator

    RPAREN          shift and go to state 144


state 129

    (76) funct -> ID f_checkProc LPAREN . RPAREN
    (77) funct -> ID f_checkProc LPAREN . expression f_genParam expressionList RPAREN
    (82) expression -> . exp
    (83) expression -> . exp compareToken exp f_popComparation
    (91) exp -> . term moreTerms
    (96) term -> . factor moreFactors
    (101) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (102) factor -> . cvar
    (103) factor -> . funct
    (107) cvar -> . ID f_isID
    (108) cvar -> . C_BOOL f_isConst
    (109) cvar -> . C_INT f_isConst
    (110) cvar -> . C_FLOAT f_isConst
    (111) cvar -> . C_STRING f_isConst
    (76) funct -> . ID f_checkProc LPAREN RPAREN
    (77) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    RPAREN          shift and go to state 145
    LPAREN          shift and go to state 85
    ID              shift and go to state 87
    C_BOOL          shift and go to state 83
    C_INT           shift and go to state 86
    C_FLOAT         shift and go to state 81
    C_STRING        shift and go to state 88

    term                           shift and go to state 89
    funct                          shift and go to state 82
    exp                            shift and go to state 90
    factor                         shift and go to state 84
    cvar                           shift and go to state 80
    expression                     shift and go to state 146

state 130

    (93) moreTerms -> PLUS f_pushOperator . term f_popTerm moreTerms
    (96) term -> . factor moreFactors
    (101) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (102) factor -> . cvar
    (103) factor -> . funct
    (107) cvar -> . ID f_isID
    (108) cvar -> . C_BOOL f_isConst
    (109) cvar -> . C_INT f_isConst
    (110) cvar -> . C_FLOAT f_isConst
    (111) cvar -> . C_STRING f_isConst
    (76) funct -> . ID f_checkProc LPAREN RPAREN
    (77) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 85
    ID              shift and go to state 87
    C_BOOL          shift and go to state 83
    C_INT           shift and go to state 86
    C_FLOAT         shift and go to state 81
    C_STRING        shift and go to state 88

    term                           shift and go to state 147
    funct                          shift and go to state 82
    factor                         shift and go to state 84
    cvar                           shift and go to state 80

state 131

    (94) moreTerms -> MINUS f_pushOperator . term f_popTerm moreTerms
    (96) term -> . factor moreFactors
    (101) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (102) factor -> . cvar
    (103) factor -> . funct
    (107) cvar -> . ID f_isID
    (108) cvar -> . C_BOOL f_isConst
    (109) cvar -> . C_INT f_isConst
    (110) cvar -> . C_FLOAT f_isConst
    (111) cvar -> . C_STRING f_isConst
    (76) funct -> . ID f_checkProc LPAREN RPAREN
    (77) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 85
    ID              shift and go to state 87
    C_BOOL          shift and go to state 83
    C_INT           shift and go to state 86
    C_FLOAT         shift and go to state 81
    C_STRING        shift and go to state 88

    term                           shift and go to state 148
    funct                          shift and go to state 82
    factor                         shift and go to state 84
    cvar                           shift and go to state 80

state 132

    (83) expression -> exp compareToken exp . f_popComparation
    (84) f_popComparation -> .

    NEWLINE         reduce using rule 84 (f_popComparation -> .)
    RPAREN          reduce using rule 84 (f_popComparation -> .)
    COMMA           reduce using rule 84 (f_popComparation -> .)
    COLON           reduce using rule 84 (f_popComparation -> .)

    f_popComparation               shift and go to state 149

state 133

    (41) assign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab . f_generateEqual moreAssign
    (45) f_generateEqual -> .

    ID              reduce using rule 45 (f_generateEqual -> .)
    DEF             reduce using rule 45 (f_generateEqual -> .)
    $end            reduce using rule 45 (f_generateEqual -> .)
    TAB             reduce using rule 45 (f_generateEqual -> .)
    LOOP            reduce using rule 45 (f_generateEqual -> .)
    ELSE            reduce using rule 45 (f_generateEqual -> .)

    f_generateEqual                shift and go to state 150

state 134

    (33) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo . ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    ID              shift and go to state 151


state 135

    (32) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN . COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    COLON           shift and go to state 152


state 136

    (31) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN tipo . ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    ID              shift and go to state 153


state 137

    (30) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN . COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    COLON           shift and go to state 154


state 138

    (28) functions -> DEF tipo ID f_saveModule LPAREN RPAREN COLON . NEWLINE f_resetTab f_incTab block f_endModule functions

    NEWLINE         shift and go to state 155


state 139

    (29) functions -> DEF tipo ID f_saveModule LPAREN tipo ID . f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (40) f_addToParam -> .

    COMMA           reduce using rule 40 (f_addToParam -> .)
    RPAREN          reduce using rule 40 (f_addToParam -> .)

    f_addToParam                   shift and go to state 156

state 140

    (18) moreVars -> f_checkTab tipo idList NEWLINE . f_resetTab moreVars
    (55) f_resetTab -> .

    BOOL            reduce using rule 55 (f_resetTab -> .)
    INT             reduce using rule 55 (f_resetTab -> .)
    FLOAT           reduce using rule 55 (f_resetTab -> .)
    STRING          reduce using rule 55 (f_resetTab -> .)
    IMAGE           reduce using rule 55 (f_resetTab -> .)
    ID              reduce using rule 55 (f_resetTab -> .)
    TAB             reduce using rule 55 (f_resetTab -> .)
    DEF             reduce using rule 55 (f_resetTab -> .)
    $end            reduce using rule 55 (f_resetTab -> .)
    LOOP            reduce using rule 55 (f_resetTab -> .)
    ELSE            reduce using rule 55 (f_resetTab -> .)

    f_resetTab                     shift and go to state 157

state 141

    (98) moreFactors -> DIVIDE f_pushOperator factor . f_popFactor moreFactors
    (106) f_popFactor -> .

    DIVIDE          reduce using rule 106 (f_popFactor -> .)
    TIMES           reduce using rule 106 (f_popFactor -> .)
    MOD             reduce using rule 106 (f_popFactor -> .)
    PLUS            reduce using rule 106 (f_popFactor -> .)
    MINUS           reduce using rule 106 (f_popFactor -> .)
    GREATER_THAN    reduce using rule 106 (f_popFactor -> .)
    LESS_THAN       reduce using rule 106 (f_popFactor -> .)
    LESS_EQUAL_THAN reduce using rule 106 (f_popFactor -> .)
    GREATER_EQUAL_THAN reduce using rule 106 (f_popFactor -> .)
    NOT_EQUAL_THAN  reduce using rule 106 (f_popFactor -> .)
    SAME_AS         reduce using rule 106 (f_popFactor -> .)
    NEWLINE         reduce using rule 106 (f_popFactor -> .)
    RPAREN          reduce using rule 106 (f_popFactor -> .)
    COMMA           reduce using rule 106 (f_popFactor -> .)
    COLON           reduce using rule 106 (f_popFactor -> .)

    f_popFactor                    shift and go to state 158

state 142

    (99) moreFactors -> TIMES f_pushOperator factor . f_popFactor moreFactors
    (106) f_popFactor -> .

    DIVIDE          reduce using rule 106 (f_popFactor -> .)
    TIMES           reduce using rule 106 (f_popFactor -> .)
    MOD             reduce using rule 106 (f_popFactor -> .)
    PLUS            reduce using rule 106 (f_popFactor -> .)
    MINUS           reduce using rule 106 (f_popFactor -> .)
    GREATER_THAN    reduce using rule 106 (f_popFactor -> .)
    LESS_THAN       reduce using rule 106 (f_popFactor -> .)
    LESS_EQUAL_THAN reduce using rule 106 (f_popFactor -> .)
    GREATER_EQUAL_THAN reduce using rule 106 (f_popFactor -> .)
    NOT_EQUAL_THAN  reduce using rule 106 (f_popFactor -> .)
    SAME_AS         reduce using rule 106 (f_popFactor -> .)
    NEWLINE         reduce using rule 106 (f_popFactor -> .)
    RPAREN          reduce using rule 106 (f_popFactor -> .)
    COMMA           reduce using rule 106 (f_popFactor -> .)
    COLON           reduce using rule 106 (f_popFactor -> .)

    f_popFactor                    shift and go to state 159

state 143

    (100) moreFactors -> MOD f_pushOperator factor . f_popFactor moreFactors
    (106) f_popFactor -> .

    DIVIDE          reduce using rule 106 (f_popFactor -> .)
    TIMES           reduce using rule 106 (f_popFactor -> .)
    MOD             reduce using rule 106 (f_popFactor -> .)
    PLUS            reduce using rule 106 (f_popFactor -> .)
    MINUS           reduce using rule 106 (f_popFactor -> .)
    GREATER_THAN    reduce using rule 106 (f_popFactor -> .)
    LESS_THAN       reduce using rule 106 (f_popFactor -> .)
    LESS_EQUAL_THAN reduce using rule 106 (f_popFactor -> .)
    GREATER_EQUAL_THAN reduce using rule 106 (f_popFactor -> .)
    NOT_EQUAL_THAN  reduce using rule 106 (f_popFactor -> .)
    SAME_AS         reduce using rule 106 (f_popFactor -> .)
    NEWLINE         reduce using rule 106 (f_popFactor -> .)
    RPAREN          reduce using rule 106 (f_popFactor -> .)
    COMMA           reduce using rule 106 (f_popFactor -> .)
    COLON           reduce using rule 106 (f_popFactor -> .)

    f_popFactor                    shift and go to state 160

state 144

    (101) factor -> LPAREN f_pushOperator expression RPAREN . f_popOperator
    (105) f_popOperator -> .

    DIVIDE          reduce using rule 105 (f_popOperator -> .)
    TIMES           reduce using rule 105 (f_popOperator -> .)
    MOD             reduce using rule 105 (f_popOperator -> .)
    PLUS            reduce using rule 105 (f_popOperator -> .)
    MINUS           reduce using rule 105 (f_popOperator -> .)
    GREATER_THAN    reduce using rule 105 (f_popOperator -> .)
    LESS_THAN       reduce using rule 105 (f_popOperator -> .)
    LESS_EQUAL_THAN reduce using rule 105 (f_popOperator -> .)
    GREATER_EQUAL_THAN reduce using rule 105 (f_popOperator -> .)
    NOT_EQUAL_THAN  reduce using rule 105 (f_popOperator -> .)
    SAME_AS         reduce using rule 105 (f_popOperator -> .)
    NEWLINE         reduce using rule 105 (f_popOperator -> .)
    RPAREN          reduce using rule 105 (f_popOperator -> .)
    COMMA           reduce using rule 105 (f_popOperator -> .)
    COLON           reduce using rule 105 (f_popOperator -> .)

    f_popOperator                  shift and go to state 161

state 145

    (76) funct -> ID f_checkProc LPAREN RPAREN .

    DIVIDE          reduce using rule 76 (funct -> ID f_checkProc LPAREN RPAREN .)
    TIMES           reduce using rule 76 (funct -> ID f_checkProc LPAREN RPAREN .)
    MOD             reduce using rule 76 (funct -> ID f_checkProc LPAREN RPAREN .)
    PLUS            reduce using rule 76 (funct -> ID f_checkProc LPAREN RPAREN .)
    MINUS           reduce using rule 76 (funct -> ID f_checkProc LPAREN RPAREN .)
    GREATER_THAN    reduce using rule 76 (funct -> ID f_checkProc LPAREN RPAREN .)
    LESS_THAN       reduce using rule 76 (funct -> ID f_checkProc LPAREN RPAREN .)
    LESS_EQUAL_THAN reduce using rule 76 (funct -> ID f_checkProc LPAREN RPAREN .)
    GREATER_EQUAL_THAN reduce using rule 76 (funct -> ID f_checkProc LPAREN RPAREN .)
    NOT_EQUAL_THAN  reduce using rule 76 (funct -> ID f_checkProc LPAREN RPAREN .)
    SAME_AS         reduce using rule 76 (funct -> ID f_checkProc LPAREN RPAREN .)
    COMMA           reduce using rule 76 (funct -> ID f_checkProc LPAREN RPAREN .)
    RPAREN          reduce using rule 76 (funct -> ID f_checkProc LPAREN RPAREN .)
    NEWLINE         reduce using rule 76 (funct -> ID f_checkProc LPAREN RPAREN .)
    COLON           reduce using rule 76 (funct -> ID f_checkProc LPAREN RPAREN .)


state 146

    (77) funct -> ID f_checkProc LPAREN expression . f_genParam expressionList RPAREN
    (81) f_genParam -> .

    COMMA           reduce using rule 81 (f_genParam -> .)
    RPAREN          reduce using rule 81 (f_genParam -> .)

    f_genParam                     shift and go to state 162

state 147

    (93) moreTerms -> PLUS f_pushOperator term . f_popTerm moreTerms
    (95) f_popTerm -> .

    PLUS            reduce using rule 95 (f_popTerm -> .)
    MINUS           reduce using rule 95 (f_popTerm -> .)
    GREATER_THAN    reduce using rule 95 (f_popTerm -> .)
    LESS_THAN       reduce using rule 95 (f_popTerm -> .)
    LESS_EQUAL_THAN reduce using rule 95 (f_popTerm -> .)
    GREATER_EQUAL_THAN reduce using rule 95 (f_popTerm -> .)
    NOT_EQUAL_THAN  reduce using rule 95 (f_popTerm -> .)
    SAME_AS         reduce using rule 95 (f_popTerm -> .)
    NEWLINE         reduce using rule 95 (f_popTerm -> .)
    RPAREN          reduce using rule 95 (f_popTerm -> .)
    COMMA           reduce using rule 95 (f_popTerm -> .)
    COLON           reduce using rule 95 (f_popTerm -> .)

    f_popTerm                      shift and go to state 163

state 148

    (94) moreTerms -> MINUS f_pushOperator term . f_popTerm moreTerms
    (95) f_popTerm -> .

    PLUS            reduce using rule 95 (f_popTerm -> .)
    MINUS           reduce using rule 95 (f_popTerm -> .)
    GREATER_THAN    reduce using rule 95 (f_popTerm -> .)
    LESS_THAN       reduce using rule 95 (f_popTerm -> .)
    LESS_EQUAL_THAN reduce using rule 95 (f_popTerm -> .)
    GREATER_EQUAL_THAN reduce using rule 95 (f_popTerm -> .)
    NOT_EQUAL_THAN  reduce using rule 95 (f_popTerm -> .)
    SAME_AS         reduce using rule 95 (f_popTerm -> .)
    NEWLINE         reduce using rule 95 (f_popTerm -> .)
    RPAREN          reduce using rule 95 (f_popTerm -> .)
    COMMA           reduce using rule 95 (f_popTerm -> .)
    COLON           reduce using rule 95 (f_popTerm -> .)

    f_popTerm                      shift and go to state 164

state 149

    (83) expression -> exp compareToken exp f_popComparation .

    NEWLINE         reduce using rule 83 (expression -> exp compareToken exp f_popComparation .)
    COLON           reduce using rule 83 (expression -> exp compareToken exp f_popComparation .)
    RPAREN          reduce using rule 83 (expression -> exp compareToken exp f_popComparation .)
    COMMA           reduce using rule 83 (expression -> exp compareToken exp f_popComparation .)


state 150

    (41) assign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual . moreAssign
    (42) moreAssign -> . empty
    (43) moreAssign -> . f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign
    (4) empty -> .
    (56) f_checkTab -> .

    DEF             reduce using rule 4 (empty -> .)
    $end            reduce using rule 4 (empty -> .)
    TAB             reduce using rule 4 (empty -> .)
    LOOP            reduce using rule 4 (empty -> .)
    ELSE            reduce using rule 4 (empty -> .)
    ID              reduce using rule 56 (f_checkTab -> .)

    f_checkTab                     shift and go to state 165
    moreAssign                     shift and go to state 166
    empty                          shift and go to state 167

state 151

    (33) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID . f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (40) f_addToParam -> .

    COMMA           reduce using rule 40 (f_addToParam -> .)
    RPAREN          reduce using rule 40 (f_addToParam -> .)

    f_addToParam                   shift and go to state 168

state 152

    (32) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON . NEWLINE f_resetTab f_incTab block f_endModule functions

    NEWLINE         shift and go to state 169


state 153

    (31) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID . f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (40) f_addToParam -> .

    COMMA           reduce using rule 40 (f_addToParam -> .)
    RPAREN          reduce using rule 40 (f_addToParam -> .)

    f_addToParam                   shift and go to state 170

state 154

    (30) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON . NEWLINE f_resetTab f_incTab block f_endModule functions

    NEWLINE         shift and go to state 171


state 155

    (28) functions -> DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE . f_resetTab f_incTab block f_endModule functions
    (55) f_resetTab -> .

    TAB             reduce using rule 55 (f_resetTab -> .)

    f_resetTab                     shift and go to state 172

state 156

    (29) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam . parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (38) parameterList -> . empty
    (39) parameterList -> . COMMA tipo ID f_addToParam parameterList
    (4) empty -> .

    COMMA           shift and go to state 175
    RPAREN          reduce using rule 4 (empty -> .)

    parameterList                  shift and go to state 173
    empty                          shift and go to state 174

state 157

    (18) moreVars -> f_checkTab tipo idList NEWLINE f_resetTab . moreVars
    (18) moreVars -> . f_checkTab tipo idList NEWLINE f_resetTab moreVars
    (19) moreVars -> . empty
    (56) f_checkTab -> .
    (4) empty -> .

    BOOL            reduce using rule 56 (f_checkTab -> .)
    INT             reduce using rule 56 (f_checkTab -> .)
    FLOAT           reduce using rule 56 (f_checkTab -> .)
    STRING          reduce using rule 56 (f_checkTab -> .)
    IMAGE           reduce using rule 56 (f_checkTab -> .)
    ID              reduce using rule 4 (empty -> .)
    TAB             reduce using rule 4 (empty -> .)
    DEF             reduce using rule 4 (empty -> .)
    $end            reduce using rule 4 (empty -> .)
    LOOP            reduce using rule 4 (empty -> .)
    ELSE            reduce using rule 4 (empty -> .)

    f_checkTab                     shift and go to state 76
    moreVars                       shift and go to state 176
    empty                          shift and go to state 78

state 158

    (98) moreFactors -> DIVIDE f_pushOperator factor f_popFactor . moreFactors
    (97) moreFactors -> . empty
    (98) moreFactors -> . DIVIDE f_pushOperator factor f_popFactor moreFactors
    (99) moreFactors -> . TIMES f_pushOperator factor f_popFactor moreFactors
    (100) moreFactors -> . MOD f_pushOperator factor f_popFactor moreFactors
    (4) empty -> .

    DIVIDE          shift and go to state 99
    TIMES           shift and go to state 100
    MOD             shift and go to state 102
    PLUS            reduce using rule 4 (empty -> .)
    MINUS           reduce using rule 4 (empty -> .)
    GREATER_THAN    reduce using rule 4 (empty -> .)
    LESS_THAN       reduce using rule 4 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 4 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 4 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 4 (empty -> .)
    SAME_AS         reduce using rule 4 (empty -> .)
    NEWLINE         reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    COLON           reduce using rule 4 (empty -> .)

    moreFactors                    shift and go to state 177
    empty                          shift and go to state 101

state 159

    (99) moreFactors -> TIMES f_pushOperator factor f_popFactor . moreFactors
    (97) moreFactors -> . empty
    (98) moreFactors -> . DIVIDE f_pushOperator factor f_popFactor moreFactors
    (99) moreFactors -> . TIMES f_pushOperator factor f_popFactor moreFactors
    (100) moreFactors -> . MOD f_pushOperator factor f_popFactor moreFactors
    (4) empty -> .

    DIVIDE          shift and go to state 99
    TIMES           shift and go to state 100
    MOD             shift and go to state 102
    PLUS            reduce using rule 4 (empty -> .)
    MINUS           reduce using rule 4 (empty -> .)
    GREATER_THAN    reduce using rule 4 (empty -> .)
    LESS_THAN       reduce using rule 4 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 4 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 4 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 4 (empty -> .)
    SAME_AS         reduce using rule 4 (empty -> .)
    NEWLINE         reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    COLON           reduce using rule 4 (empty -> .)

    moreFactors                    shift and go to state 178
    empty                          shift and go to state 101

state 160

    (100) moreFactors -> MOD f_pushOperator factor f_popFactor . moreFactors
    (97) moreFactors -> . empty
    (98) moreFactors -> . DIVIDE f_pushOperator factor f_popFactor moreFactors
    (99) moreFactors -> . TIMES f_pushOperator factor f_popFactor moreFactors
    (100) moreFactors -> . MOD f_pushOperator factor f_popFactor moreFactors
    (4) empty -> .

    DIVIDE          shift and go to state 99
    TIMES           shift and go to state 100
    MOD             shift and go to state 102
    PLUS            reduce using rule 4 (empty -> .)
    MINUS           reduce using rule 4 (empty -> .)
    GREATER_THAN    reduce using rule 4 (empty -> .)
    LESS_THAN       reduce using rule 4 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 4 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 4 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 4 (empty -> .)
    SAME_AS         reduce using rule 4 (empty -> .)
    NEWLINE         reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    COLON           reduce using rule 4 (empty -> .)

    moreFactors                    shift and go to state 179
    empty                          shift and go to state 101

state 161

    (101) factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .

    DIVIDE          reduce using rule 101 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    TIMES           reduce using rule 101 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    MOD             reduce using rule 101 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    PLUS            reduce using rule 101 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    MINUS           reduce using rule 101 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    GREATER_THAN    reduce using rule 101 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    LESS_THAN       reduce using rule 101 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    LESS_EQUAL_THAN reduce using rule 101 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    GREATER_EQUAL_THAN reduce using rule 101 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    NOT_EQUAL_THAN  reduce using rule 101 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    SAME_AS         reduce using rule 101 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    COLON           reduce using rule 101 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    NEWLINE         reduce using rule 101 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    COMMA           reduce using rule 101 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    RPAREN          reduce using rule 101 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)


state 162

    (77) funct -> ID f_checkProc LPAREN expression f_genParam . expressionList RPAREN
    (79) expressionList -> . empty
    (80) expressionList -> . COMMA expression f_genParam expressionList
    (4) empty -> .

    COMMA           shift and go to state 181
    RPAREN          reduce using rule 4 (empty -> .)

    empty                          shift and go to state 182
    expressionList                 shift and go to state 180

state 163

    (93) moreTerms -> PLUS f_pushOperator term f_popTerm . moreTerms
    (92) moreTerms -> . empty
    (93) moreTerms -> . PLUS f_pushOperator term f_popTerm moreTerms
    (94) moreTerms -> . MINUS f_pushOperator term f_popTerm moreTerms
    (4) empty -> .

    PLUS            shift and go to state 109
    MINUS           shift and go to state 110
    GREATER_THAN    reduce using rule 4 (empty -> .)
    LESS_THAN       reduce using rule 4 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 4 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 4 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 4 (empty -> .)
    SAME_AS         reduce using rule 4 (empty -> .)
    NEWLINE         reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    COLON           reduce using rule 4 (empty -> .)

    moreTerms                      shift and go to state 183
    empty                          shift and go to state 111

state 164

    (94) moreTerms -> MINUS f_pushOperator term f_popTerm . moreTerms
    (92) moreTerms -> . empty
    (93) moreTerms -> . PLUS f_pushOperator term f_popTerm moreTerms
    (94) moreTerms -> . MINUS f_pushOperator term f_popTerm moreTerms
    (4) empty -> .

    PLUS            shift and go to state 109
    MINUS           shift and go to state 110
    GREATER_THAN    reduce using rule 4 (empty -> .)
    LESS_THAN       reduce using rule 4 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 4 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 4 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 4 (empty -> .)
    SAME_AS         reduce using rule 4 (empty -> .)
    NEWLINE         reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    COLON           reduce using rule 4 (empty -> .)

    moreTerms                      shift and go to state 184
    empty                          shift and go to state 111

state 165

    (43) moreAssign -> f_checkTab . ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign

    ID              shift and go to state 185


state 166

    (41) assign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign .

    TAB             reduce using rule 41 (assign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign .)
    DEF             reduce using rule 41 (assign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign .)
    $end            reduce using rule 41 (assign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign .)
    LOOP            reduce using rule 41 (assign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign .)
    ELSE            reduce using rule 41 (assign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign .)


state 167

    (42) moreAssign -> empty .

    DEF             reduce using rule 42 (moreAssign -> empty .)
    $end            reduce using rule 42 (moreAssign -> empty .)
    TAB             reduce using rule 42 (moreAssign -> empty .)
    LOOP            reduce using rule 42 (moreAssign -> empty .)
    ELSE            reduce using rule 42 (moreAssign -> empty .)


state 168

    (33) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam . parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (38) parameterList -> . empty
    (39) parameterList -> . COMMA tipo ID f_addToParam parameterList
    (4) empty -> .

    COMMA           shift and go to state 175
    RPAREN          reduce using rule 4 (empty -> .)

    parameterList                  shift and go to state 186
    empty                          shift and go to state 174

state 169

    (32) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE . f_resetTab f_incTab block f_endModule functions
    (55) f_resetTab -> .

    TAB             reduce using rule 55 (f_resetTab -> .)

    f_resetTab                     shift and go to state 187

state 170

    (31) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam . parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (38) parameterList -> . empty
    (39) parameterList -> . COMMA tipo ID f_addToParam parameterList
    (4) empty -> .

    COMMA           shift and go to state 175
    RPAREN          reduce using rule 4 (empty -> .)

    parameterList                  shift and go to state 188
    empty                          shift and go to state 174

state 171

    (30) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE . f_resetTab f_incTab block f_endModule functions
    (55) f_resetTab -> .

    TAB             reduce using rule 55 (f_resetTab -> .)

    f_resetTab                     shift and go to state 189

state 172

    (28) functions -> DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab . f_incTab block f_endModule functions
    (53) f_incTab -> .

    TAB             reduce using rule 53 (f_incTab -> .)

    f_incTab                       shift and go to state 190

state 173

    (29) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList . RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    RPAREN          shift and go to state 191


state 174

    (38) parameterList -> empty .

    RPAREN          reduce using rule 38 (parameterList -> empty .)


state 175

    (39) parameterList -> COMMA . tipo ID f_addToParam parameterList
    (23) tipo -> . BOOL f_saveType
    (24) tipo -> . INT f_saveType
    (25) tipo -> . FLOAT f_saveType
    (26) tipo -> . STRING f_saveType
    (27) tipo -> . IMAGE f_saveType

    BOOL            shift and go to state 29
    INT             shift and go to state 28
    FLOAT           shift and go to state 26
    STRING          shift and go to state 31
    IMAGE           shift and go to state 30

    tipo                           shift and go to state 192

state 176

    (18) moreVars -> f_checkTab tipo idList NEWLINE f_resetTab moreVars .

    ID              reduce using rule 18 (moreVars -> f_checkTab tipo idList NEWLINE f_resetTab moreVars .)
    TAB             reduce using rule 18 (moreVars -> f_checkTab tipo idList NEWLINE f_resetTab moreVars .)
    DEF             reduce using rule 18 (moreVars -> f_checkTab tipo idList NEWLINE f_resetTab moreVars .)
    $end            reduce using rule 18 (moreVars -> f_checkTab tipo idList NEWLINE f_resetTab moreVars .)
    LOOP            reduce using rule 18 (moreVars -> f_checkTab tipo idList NEWLINE f_resetTab moreVars .)
    ELSE            reduce using rule 18 (moreVars -> f_checkTab tipo idList NEWLINE f_resetTab moreVars .)


state 177

    (98) moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .

    PLUS            reduce using rule 98 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    MINUS           reduce using rule 98 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    GREATER_THAN    reduce using rule 98 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    LESS_THAN       reduce using rule 98 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    LESS_EQUAL_THAN reduce using rule 98 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    GREATER_EQUAL_THAN reduce using rule 98 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    NOT_EQUAL_THAN  reduce using rule 98 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    SAME_AS         reduce using rule 98 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    NEWLINE         reduce using rule 98 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    RPAREN          reduce using rule 98 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    COMMA           reduce using rule 98 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    COLON           reduce using rule 98 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)


state 178

    (99) moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .

    PLUS            reduce using rule 99 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    MINUS           reduce using rule 99 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    GREATER_THAN    reduce using rule 99 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    LESS_THAN       reduce using rule 99 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    LESS_EQUAL_THAN reduce using rule 99 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    GREATER_EQUAL_THAN reduce using rule 99 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    NOT_EQUAL_THAN  reduce using rule 99 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    SAME_AS         reduce using rule 99 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    NEWLINE         reduce using rule 99 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    RPAREN          reduce using rule 99 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    COMMA           reduce using rule 99 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    COLON           reduce using rule 99 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)


state 179

    (100) moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .

    PLUS            reduce using rule 100 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    MINUS           reduce using rule 100 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    GREATER_THAN    reduce using rule 100 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    LESS_THAN       reduce using rule 100 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    LESS_EQUAL_THAN reduce using rule 100 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    GREATER_EQUAL_THAN reduce using rule 100 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    NOT_EQUAL_THAN  reduce using rule 100 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    SAME_AS         reduce using rule 100 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    NEWLINE         reduce using rule 100 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    RPAREN          reduce using rule 100 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    COMMA           reduce using rule 100 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    COLON           reduce using rule 100 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)


state 180

    (77) funct -> ID f_checkProc LPAREN expression f_genParam expressionList . RPAREN

    RPAREN          shift and go to state 193


state 181

    (80) expressionList -> COMMA . expression f_genParam expressionList
    (82) expression -> . exp
    (83) expression -> . exp compareToken exp f_popComparation
    (91) exp -> . term moreTerms
    (96) term -> . factor moreFactors
    (101) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (102) factor -> . cvar
    (103) factor -> . funct
    (107) cvar -> . ID f_isID
    (108) cvar -> . C_BOOL f_isConst
    (109) cvar -> . C_INT f_isConst
    (110) cvar -> . C_FLOAT f_isConst
    (111) cvar -> . C_STRING f_isConst
    (76) funct -> . ID f_checkProc LPAREN RPAREN
    (77) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 85
    ID              shift and go to state 87
    C_BOOL          shift and go to state 83
    C_INT           shift and go to state 86
    C_FLOAT         shift and go to state 81
    C_STRING        shift and go to state 88

    term                           shift and go to state 89
    funct                          shift and go to state 82
    exp                            shift and go to state 90
    factor                         shift and go to state 84
    cvar                           shift and go to state 80
    expression                     shift and go to state 194

state 182

    (79) expressionList -> empty .

    RPAREN          reduce using rule 79 (expressionList -> empty .)


state 183

    (93) moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .

    GREATER_THAN    reduce using rule 93 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    LESS_THAN       reduce using rule 93 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    LESS_EQUAL_THAN reduce using rule 93 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    GREATER_EQUAL_THAN reduce using rule 93 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    NOT_EQUAL_THAN  reduce using rule 93 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    SAME_AS         reduce using rule 93 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    NEWLINE         reduce using rule 93 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    RPAREN          reduce using rule 93 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    COMMA           reduce using rule 93 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    COLON           reduce using rule 93 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)


state 184

    (94) moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .

    GREATER_THAN    reduce using rule 94 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    LESS_THAN       reduce using rule 94 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    LESS_EQUAL_THAN reduce using rule 94 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    GREATER_EQUAL_THAN reduce using rule 94 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    NOT_EQUAL_THAN  reduce using rule 94 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    SAME_AS         reduce using rule 94 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    NEWLINE         reduce using rule 94 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    RPAREN          reduce using rule 94 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    COMMA           reduce using rule 94 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    COLON           reduce using rule 94 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)


state 185

    (43) moreAssign -> f_checkTab ID . f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign
    (46) f_checkID -> .

    EQUAL           reduce using rule 46 (f_checkID -> .)

    f_checkID                      shift and go to state 195

state 186

    (33) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList . RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    RPAREN          shift and go to state 196


state 187

    (32) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab . f_incTab block f_endModule functions
    (53) f_incTab -> .

    TAB             reduce using rule 53 (f_incTab -> .)

    f_incTab                       shift and go to state 197

state 188

    (31) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList . RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    RPAREN          shift and go to state 198


state 189

    (30) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab . f_incTab block f_endModule functions
    (53) f_incTab -> .

    TAB             reduce using rule 53 (f_incTab -> .)

    f_incTab                       shift and go to state 199

state 190

    (28) functions -> DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab . block f_endModule functions
    (49) block -> . TAB f_addTab moreTabs statement moreStatements

    TAB             shift and go to state 201

    block                          shift and go to state 200

state 191

    (29) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN . COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    COLON           shift and go to state 202


state 192

    (39) parameterList -> COMMA tipo . ID f_addToParam parameterList

    ID              shift and go to state 203


state 193

    (77) funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .

    DIVIDE          reduce using rule 77 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    TIMES           reduce using rule 77 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    MOD             reduce using rule 77 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    PLUS            reduce using rule 77 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    MINUS           reduce using rule 77 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    GREATER_THAN    reduce using rule 77 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    LESS_THAN       reduce using rule 77 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    LESS_EQUAL_THAN reduce using rule 77 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    GREATER_EQUAL_THAN reduce using rule 77 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    NOT_EQUAL_THAN  reduce using rule 77 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    SAME_AS         reduce using rule 77 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    COMMA           reduce using rule 77 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    RPAREN          reduce using rule 77 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    NEWLINE         reduce using rule 77 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    COLON           reduce using rule 77 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)


state 194

    (80) expressionList -> COMMA expression . f_genParam expressionList
    (81) f_genParam -> .

    COMMA           reduce using rule 81 (f_genParam -> .)
    RPAREN          reduce using rule 81 (f_genParam -> .)

    f_genParam                     shift and go to state 204

state 195

    (43) moreAssign -> f_checkTab ID f_checkID . EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign

    EQUAL           shift and go to state 205


state 196

    (33) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN . COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    COLON           shift and go to state 206


state 197

    (32) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab . block f_endModule functions
    (49) block -> . TAB f_addTab moreTabs statement moreStatements

    TAB             shift and go to state 201

    block                          shift and go to state 207

state 198

    (31) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN . COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    COLON           shift and go to state 208


state 199

    (30) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab . block f_endModule functions
    (49) block -> . TAB f_addTab moreTabs statement moreStatements

    TAB             shift and go to state 201

    block                          shift and go to state 209

state 200

    (28) functions -> DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block . f_endModule functions
    (36) f_endModule -> .

    DEF             reduce using rule 36 (f_endModule -> .)
    $end            reduce using rule 36 (f_endModule -> .)

    f_endModule                    shift and go to state 210

state 201

    (49) block -> TAB . f_addTab moreTabs statement moreStatements
    (54) f_addTab -> .

    TAB             reduce using rule 54 (f_addTab -> .)
    NEWLINE         reduce using rule 54 (f_addTab -> .)
    RETURN          reduce using rule 54 (f_addTab -> .)
    ID              reduce using rule 54 (f_addTab -> .)
    WHILE           reduce using rule 54 (f_addTab -> .)
    IF              reduce using rule 54 (f_addTab -> .)
    DO              reduce using rule 54 (f_addTab -> .)
    BOOL            reduce using rule 54 (f_addTab -> .)
    INT             reduce using rule 54 (f_addTab -> .)
    FLOAT           reduce using rule 54 (f_addTab -> .)
    STRING          reduce using rule 54 (f_addTab -> .)
    IMAGE           reduce using rule 54 (f_addTab -> .)
    DEF             reduce using rule 54 (f_addTab -> .)
    $end            reduce using rule 54 (f_addTab -> .)
    LOOP            reduce using rule 54 (f_addTab -> .)
    ELSE            reduce using rule 54 (f_addTab -> .)

    f_addTab                       shift and go to state 211

state 202

    (29) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON . NEWLINE f_resetTab f_incTab block f_endModule functions

    NEWLINE         shift and go to state 212


state 203

    (39) parameterList -> COMMA tipo ID . f_addToParam parameterList
    (40) f_addToParam -> .

    COMMA           reduce using rule 40 (f_addToParam -> .)
    RPAREN          reduce using rule 40 (f_addToParam -> .)

    f_addToParam                   shift and go to state 213

state 204

    (80) expressionList -> COMMA expression f_genParam . expressionList
    (79) expressionList -> . empty
    (80) expressionList -> . COMMA expression f_genParam expressionList
    (4) empty -> .

    COMMA           shift and go to state 181
    RPAREN          reduce using rule 4 (empty -> .)

    expressionList                 shift and go to state 214
    empty                          shift and go to state 182

state 205

    (43) moreAssign -> f_checkTab ID f_checkID EQUAL . f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign
    (44) f_isAssign -> .

    LPAREN          reduce using rule 44 (f_isAssign -> .)
    ID              reduce using rule 44 (f_isAssign -> .)
    C_BOOL          reduce using rule 44 (f_isAssign -> .)
    C_INT           reduce using rule 44 (f_isAssign -> .)
    C_FLOAT         reduce using rule 44 (f_isAssign -> .)
    C_STRING        reduce using rule 44 (f_isAssign -> .)

    f_isAssign                     shift and go to state 215

state 206

    (33) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON . NEWLINE f_resetTab f_incTab block f_endModule functions

    NEWLINE         shift and go to state 216


state 207

    (32) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block . f_endModule functions
    (36) f_endModule -> .

    DEF             reduce using rule 36 (f_endModule -> .)
    $end            reduce using rule 36 (f_endModule -> .)

    f_endModule                    shift and go to state 217

state 208

    (31) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON . NEWLINE f_resetTab f_incTab block f_endModule functions

    NEWLINE         shift and go to state 218


state 209

    (30) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block . f_endModule functions
    (36) f_endModule -> .

    DEF             reduce using rule 36 (f_endModule -> .)
    $end            reduce using rule 36 (f_endModule -> .)

    f_endModule                    shift and go to state 219

state 210

    (28) functions -> DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule . functions
    (28) functions -> . DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (29) functions -> . DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (30) functions -> . DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (31) functions -> . DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (32) functions -> . DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (33) functions -> . DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (34) functions -> . empty
    (4) empty -> .

    DEF             shift and go to state 41
    $end            reduce using rule 4 (empty -> .)

    functions                      shift and go to state 220
    empty                          shift and go to state 43

state 211

    (49) block -> TAB f_addTab . moreTabs statement moreStatements
    (50) moreTabs -> . empty
    (51) moreTabs -> . TAB f_addTab moreTabs
    (52) moreTabs -> . NEWLINE f_resetTab TAB f_addTab moreTabs
    (4) empty -> .

  ! shift/reduce conflict for TAB resolved as shift
    TAB             shift and go to state 222
    NEWLINE         shift and go to state 223
    RETURN          reduce using rule 4 (empty -> .)
    ID              reduce using rule 4 (empty -> .)
    WHILE           reduce using rule 4 (empty -> .)
    IF              reduce using rule 4 (empty -> .)
    DO              reduce using rule 4 (empty -> .)
    BOOL            reduce using rule 4 (empty -> .)
    INT             reduce using rule 4 (empty -> .)
    FLOAT           reduce using rule 4 (empty -> .)
    STRING          reduce using rule 4 (empty -> .)
    IMAGE           reduce using rule 4 (empty -> .)
    DEF             reduce using rule 4 (empty -> .)
    $end            reduce using rule 4 (empty -> .)
    LOOP            reduce using rule 4 (empty -> .)
    ELSE            reduce using rule 4 (empty -> .)

  ! TAB             [ reduce using rule 4 (empty -> .) ]

    moreTabs                       shift and go to state 221
    empty                          shift and go to state 224

state 212

    (29) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE . f_resetTab f_incTab block f_endModule functions
    (55) f_resetTab -> .

    TAB             reduce using rule 55 (f_resetTab -> .)

    f_resetTab                     shift and go to state 225

state 213

    (39) parameterList -> COMMA tipo ID f_addToParam . parameterList
    (38) parameterList -> . empty
    (39) parameterList -> . COMMA tipo ID f_addToParam parameterList
    (4) empty -> .

    COMMA           shift and go to state 175
    RPAREN          reduce using rule 4 (empty -> .)

    parameterList                  shift and go to state 226
    empty                          shift and go to state 174

state 214

    (80) expressionList -> COMMA expression f_genParam expressionList .

    RPAREN          reduce using rule 80 (expressionList -> COMMA expression f_genParam expressionList .)


state 215

    (43) moreAssign -> f_checkTab ID f_checkID EQUAL f_isAssign . expression NEWLINE f_resetTab f_generateEqual moreAssign
    (82) expression -> . exp
    (83) expression -> . exp compareToken exp f_popComparation
    (91) exp -> . term moreTerms
    (96) term -> . factor moreFactors
    (101) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (102) factor -> . cvar
    (103) factor -> . funct
    (107) cvar -> . ID f_isID
    (108) cvar -> . C_BOOL f_isConst
    (109) cvar -> . C_INT f_isConst
    (110) cvar -> . C_FLOAT f_isConst
    (111) cvar -> . C_STRING f_isConst
    (76) funct -> . ID f_checkProc LPAREN RPAREN
    (77) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 85
    ID              shift and go to state 87
    C_BOOL          shift and go to state 83
    C_INT           shift and go to state 86
    C_FLOAT         shift and go to state 81
    C_STRING        shift and go to state 88

    cvar                           shift and go to state 80
    funct                          shift and go to state 82
    factor                         shift and go to state 84
    term                           shift and go to state 89
    exp                            shift and go to state 90
    expression                     shift and go to state 227

state 216

    (33) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE . f_resetTab f_incTab block f_endModule functions
    (55) f_resetTab -> .

    TAB             reduce using rule 55 (f_resetTab -> .)

    f_resetTab                     shift and go to state 228

state 217

    (32) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule . functions
    (28) functions -> . DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (29) functions -> . DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (30) functions -> . DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (31) functions -> . DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (32) functions -> . DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (33) functions -> . DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (34) functions -> . empty
    (4) empty -> .

    DEF             shift and go to state 41
    $end            reduce using rule 4 (empty -> .)

    functions                      shift and go to state 229
    empty                          shift and go to state 43

state 218

    (31) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE . f_resetTab f_incTab block f_endModule functions
    (55) f_resetTab -> .

    TAB             reduce using rule 55 (f_resetTab -> .)

    f_resetTab                     shift and go to state 230

state 219

    (30) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule . functions
    (28) functions -> . DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (29) functions -> . DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (30) functions -> . DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (31) functions -> . DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (32) functions -> . DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (33) functions -> . DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (34) functions -> . empty
    (4) empty -> .

    DEF             shift and go to state 41
    $end            reduce using rule 4 (empty -> .)

    functions                      shift and go to state 231
    empty                          shift and go to state 43

state 220

    (28) functions -> DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions .

    $end            reduce using rule 28 (functions -> DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions .)


state 221

    (49) block -> TAB f_addTab moreTabs . statement moreStatements
    (57) statement -> . vars
    (58) statement -> . assign
    (59) statement -> . f_checkTab condition
    (60) statement -> . f_checkTab doCycle
    (61) statement -> . cycle
    (62) statement -> . f_checkTab funct NEWLINE f_resetTab
    (63) statement -> . f_checkTab RETURN f_isReturn expression f_return NEWLINE f_resetTab
    (64) statement -> . empty
    (17) vars -> . f_checkTab tipo idList NEWLINE f_resetTab moreVars
    (41) assign -> . f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign
    (56) f_checkTab -> .
    (67) cycle -> . f_checkTab WHILE f_isCondition expression COLON NEWLINE f_resetTab f_incTab block
    (4) empty -> .

    RETURN          reduce using rule 56 (f_checkTab -> .)
    ID              reduce using rule 56 (f_checkTab -> .)
    WHILE           reduce using rule 56 (f_checkTab -> .)
    IF              reduce using rule 56 (f_checkTab -> .)
    DO              reduce using rule 56 (f_checkTab -> .)
    BOOL            reduce using rule 56 (f_checkTab -> .)
    INT             reduce using rule 56 (f_checkTab -> .)
    FLOAT           reduce using rule 56 (f_checkTab -> .)
    STRING          reduce using rule 56 (f_checkTab -> .)
    IMAGE           reduce using rule 56 (f_checkTab -> .)
    TAB             reduce using rule 4 (empty -> .)
    DEF             reduce using rule 4 (empty -> .)
    $end            reduce using rule 4 (empty -> .)
    LOOP            reduce using rule 4 (empty -> .)
    ELSE            reduce using rule 4 (empty -> .)

    vars                           shift and go to state 232
    f_checkTab                     shift and go to state 233
    statement                      shift and go to state 235
    empty                          shift and go to state 234
    cycle                          shift and go to state 236
    assign                         shift and go to state 237

state 222

    (51) moreTabs -> TAB . f_addTab moreTabs
    (54) f_addTab -> .

    TAB             reduce using rule 54 (f_addTab -> .)
    NEWLINE         reduce using rule 54 (f_addTab -> .)
    RETURN          reduce using rule 54 (f_addTab -> .)
    ID              reduce using rule 54 (f_addTab -> .)
    WHILE           reduce using rule 54 (f_addTab -> .)
    IF              reduce using rule 54 (f_addTab -> .)
    DO              reduce using rule 54 (f_addTab -> .)
    BOOL            reduce using rule 54 (f_addTab -> .)
    INT             reduce using rule 54 (f_addTab -> .)
    FLOAT           reduce using rule 54 (f_addTab -> .)
    STRING          reduce using rule 54 (f_addTab -> .)
    IMAGE           reduce using rule 54 (f_addTab -> .)
    DEF             reduce using rule 54 (f_addTab -> .)
    $end            reduce using rule 54 (f_addTab -> .)
    LOOP            reduce using rule 54 (f_addTab -> .)
    ELSE            reduce using rule 54 (f_addTab -> .)

    f_addTab                       shift and go to state 238

state 223

    (52) moreTabs -> NEWLINE . f_resetTab TAB f_addTab moreTabs
    (55) f_resetTab -> .

    TAB             reduce using rule 55 (f_resetTab -> .)

    f_resetTab                     shift and go to state 239

state 224

    (50) moreTabs -> empty .

    TAB             reduce using rule 50 (moreTabs -> empty .)
    RETURN          reduce using rule 50 (moreTabs -> empty .)
    ID              reduce using rule 50 (moreTabs -> empty .)
    WHILE           reduce using rule 50 (moreTabs -> empty .)
    IF              reduce using rule 50 (moreTabs -> empty .)
    DO              reduce using rule 50 (moreTabs -> empty .)
    BOOL            reduce using rule 50 (moreTabs -> empty .)
    INT             reduce using rule 50 (moreTabs -> empty .)
    FLOAT           reduce using rule 50 (moreTabs -> empty .)
    STRING          reduce using rule 50 (moreTabs -> empty .)
    IMAGE           reduce using rule 50 (moreTabs -> empty .)
    DEF             reduce using rule 50 (moreTabs -> empty .)
    $end            reduce using rule 50 (moreTabs -> empty .)
    LOOP            reduce using rule 50 (moreTabs -> empty .)
    ELSE            reduce using rule 50 (moreTabs -> empty .)


state 225

    (29) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab . f_incTab block f_endModule functions
    (53) f_incTab -> .

    TAB             reduce using rule 53 (f_incTab -> .)

    f_incTab                       shift and go to state 240

state 226

    (39) parameterList -> COMMA tipo ID f_addToParam parameterList .

    RPAREN          reduce using rule 39 (parameterList -> COMMA tipo ID f_addToParam parameterList .)


state 227

    (43) moreAssign -> f_checkTab ID f_checkID EQUAL f_isAssign expression . NEWLINE f_resetTab f_generateEqual moreAssign

    NEWLINE         shift and go to state 241


state 228

    (33) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab . f_incTab block f_endModule functions
    (53) f_incTab -> .

    TAB             reduce using rule 53 (f_incTab -> .)

    f_incTab                       shift and go to state 242

state 229

    (32) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions .

    $end            reduce using rule 32 (functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions .)


state 230

    (31) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab . f_incTab block f_endModule functions
    (53) f_incTab -> .

    TAB             reduce using rule 53 (f_incTab -> .)

    f_incTab                       shift and go to state 243

state 231

    (30) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions .

    $end            reduce using rule 30 (functions -> DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions .)


state 232

    (57) statement -> vars .

    TAB             reduce using rule 57 (statement -> vars .)
    DEF             reduce using rule 57 (statement -> vars .)
    $end            reduce using rule 57 (statement -> vars .)
    LOOP            reduce using rule 57 (statement -> vars .)
    ELSE            reduce using rule 57 (statement -> vars .)


state 233

    (59) statement -> f_checkTab . condition
    (60) statement -> f_checkTab . doCycle
    (62) statement -> f_checkTab . funct NEWLINE f_resetTab
    (63) statement -> f_checkTab . RETURN f_isReturn expression f_return NEWLINE f_resetTab
    (17) vars -> f_checkTab . tipo idList NEWLINE f_resetTab moreVars
    (41) assign -> f_checkTab . ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign
    (67) cycle -> f_checkTab . WHILE f_isCondition expression COLON NEWLINE f_resetTab f_incTab block
    (68) condition -> . IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block
    (69) condition -> . IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block f_checkTab ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block
    (71) doCycle -> . DO f_pushDo COLON NEWLINE f_resetTab f_incTab block f_checkTab LOOP f_isDoWhile f_isCondition expression NEWLINE f_resetTab
    (76) funct -> . ID f_checkProc LPAREN RPAREN
    (77) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN
    (23) tipo -> . BOOL f_saveType
    (24) tipo -> . INT f_saveType
    (25) tipo -> . FLOAT f_saveType
    (26) tipo -> . STRING f_saveType
    (27) tipo -> . IMAGE f_saveType

    RETURN          shift and go to state 245
    ID              shift and go to state 249
    WHILE           shift and go to state 247
    IF              shift and go to state 251
    DO              shift and go to state 244
    BOOL            shift and go to state 29
    INT             shift and go to state 28
    FLOAT           shift and go to state 26
    STRING          shift and go to state 31
    IMAGE           shift and go to state 30

    funct                          shift and go to state 246
    tipo                           shift and go to state 27
    doCycle                        shift and go to state 248
    condition                      shift and go to state 250

state 234

    (64) statement -> empty .

    TAB             reduce using rule 64 (statement -> empty .)
    DEF             reduce using rule 64 (statement -> empty .)
    $end            reduce using rule 64 (statement -> empty .)
    LOOP            reduce using rule 64 (statement -> empty .)
    ELSE            reduce using rule 64 (statement -> empty .)


state 235

    (49) block -> TAB f_addTab moreTabs statement . moreStatements
    (47) moreStatements -> . empty
    (48) moreStatements -> . TAB f_addTab moreTabs statement moreStatements
    (4) empty -> .

  ! shift/reduce conflict for TAB resolved as shift
    TAB             shift and go to state 252
    DEF             reduce using rule 4 (empty -> .)
    $end            reduce using rule 4 (empty -> .)
    LOOP            reduce using rule 4 (empty -> .)
    ELSE            reduce using rule 4 (empty -> .)

  ! TAB             [ reduce using rule 4 (empty -> .) ]

    empty                          shift and go to state 253
    moreStatements                 shift and go to state 254

state 236

    (61) statement -> cycle .

    TAB             reduce using rule 61 (statement -> cycle .)
    DEF             reduce using rule 61 (statement -> cycle .)
    $end            reduce using rule 61 (statement -> cycle .)
    LOOP            reduce using rule 61 (statement -> cycle .)
    ELSE            reduce using rule 61 (statement -> cycle .)


state 237

    (58) statement -> assign .

    TAB             reduce using rule 58 (statement -> assign .)
    DEF             reduce using rule 58 (statement -> assign .)
    $end            reduce using rule 58 (statement -> assign .)
    LOOP            reduce using rule 58 (statement -> assign .)
    ELSE            reduce using rule 58 (statement -> assign .)


state 238

    (51) moreTabs -> TAB f_addTab . moreTabs
    (50) moreTabs -> . empty
    (51) moreTabs -> . TAB f_addTab moreTabs
    (52) moreTabs -> . NEWLINE f_resetTab TAB f_addTab moreTabs
    (4) empty -> .

  ! shift/reduce conflict for TAB resolved as shift
    TAB             shift and go to state 222
    NEWLINE         shift and go to state 223
    RETURN          reduce using rule 4 (empty -> .)
    ID              reduce using rule 4 (empty -> .)
    WHILE           reduce using rule 4 (empty -> .)
    IF              reduce using rule 4 (empty -> .)
    DO              reduce using rule 4 (empty -> .)
    BOOL            reduce using rule 4 (empty -> .)
    INT             reduce using rule 4 (empty -> .)
    FLOAT           reduce using rule 4 (empty -> .)
    STRING          reduce using rule 4 (empty -> .)
    IMAGE           reduce using rule 4 (empty -> .)
    DEF             reduce using rule 4 (empty -> .)
    $end            reduce using rule 4 (empty -> .)
    LOOP            reduce using rule 4 (empty -> .)
    ELSE            reduce using rule 4 (empty -> .)

  ! TAB             [ reduce using rule 4 (empty -> .) ]

    empty                          shift and go to state 224
    moreTabs                       shift and go to state 255

state 239

    (52) moreTabs -> NEWLINE f_resetTab . TAB f_addTab moreTabs

    TAB             shift and go to state 256


state 240

    (29) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab . block f_endModule functions
    (49) block -> . TAB f_addTab moreTabs statement moreStatements

    TAB             shift and go to state 201

    block                          shift and go to state 257

state 241

    (43) moreAssign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE . f_resetTab f_generateEqual moreAssign
    (55) f_resetTab -> .

    ID              reduce using rule 55 (f_resetTab -> .)
    DEF             reduce using rule 55 (f_resetTab -> .)
    $end            reduce using rule 55 (f_resetTab -> .)
    TAB             reduce using rule 55 (f_resetTab -> .)
    LOOP            reduce using rule 55 (f_resetTab -> .)
    ELSE            reduce using rule 55 (f_resetTab -> .)

    f_resetTab                     shift and go to state 258

state 242

    (33) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab . block f_endModule functions
    (49) block -> . TAB f_addTab moreTabs statement moreStatements

    TAB             shift and go to state 201

    block                          shift and go to state 259

state 243

    (31) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab . block f_endModule functions
    (49) block -> . TAB f_addTab moreTabs statement moreStatements

    TAB             shift and go to state 201

    block                          shift and go to state 260

state 244

    (71) doCycle -> DO . f_pushDo COLON NEWLINE f_resetTab f_incTab block f_checkTab LOOP f_isDoWhile f_isCondition expression NEWLINE f_resetTab
    (73) f_pushDo -> .

    COLON           reduce using rule 73 (f_pushDo -> .)

    f_pushDo                       shift and go to state 261

state 245

    (63) statement -> f_checkTab RETURN . f_isReturn expression f_return NEWLINE f_resetTab
    (65) f_isReturn -> .

    LPAREN          reduce using rule 65 (f_isReturn -> .)
    ID              reduce using rule 65 (f_isReturn -> .)
    C_BOOL          reduce using rule 65 (f_isReturn -> .)
    C_INT           reduce using rule 65 (f_isReturn -> .)
    C_FLOAT         reduce using rule 65 (f_isReturn -> .)
    C_STRING        reduce using rule 65 (f_isReturn -> .)

    f_isReturn                     shift and go to state 262

state 246

    (62) statement -> f_checkTab funct . NEWLINE f_resetTab

    NEWLINE         shift and go to state 263


state 247

    (67) cycle -> f_checkTab WHILE . f_isCondition expression COLON NEWLINE f_resetTab f_incTab block
    (75) f_isCondition -> .

    LPAREN          reduce using rule 75 (f_isCondition -> .)
    ID              reduce using rule 75 (f_isCondition -> .)
    C_BOOL          reduce using rule 75 (f_isCondition -> .)
    C_INT           reduce using rule 75 (f_isCondition -> .)
    C_FLOAT         reduce using rule 75 (f_isCondition -> .)
    C_STRING        reduce using rule 75 (f_isCondition -> .)

    f_isCondition                  shift and go to state 264

state 248

    (60) statement -> f_checkTab doCycle .

    TAB             reduce using rule 60 (statement -> f_checkTab doCycle .)
    DEF             reduce using rule 60 (statement -> f_checkTab doCycle .)
    $end            reduce using rule 60 (statement -> f_checkTab doCycle .)
    LOOP            reduce using rule 60 (statement -> f_checkTab doCycle .)
    ELSE            reduce using rule 60 (statement -> f_checkTab doCycle .)


state 249

    (41) assign -> f_checkTab ID . f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign
    (76) funct -> ID . f_checkProc LPAREN RPAREN
    (77) funct -> ID . f_checkProc LPAREN expression f_genParam expressionList RPAREN
    (46) f_checkID -> .
    (78) f_checkProc -> .

    EQUAL           reduce using rule 46 (f_checkID -> .)
    LPAREN          reduce using rule 78 (f_checkProc -> .)

    f_checkProc                    shift and go to state 105
    f_checkID                      shift and go to state 57

state 250

    (59) statement -> f_checkTab condition .

    TAB             reduce using rule 59 (statement -> f_checkTab condition .)
    DEF             reduce using rule 59 (statement -> f_checkTab condition .)
    $end            reduce using rule 59 (statement -> f_checkTab condition .)
    LOOP            reduce using rule 59 (statement -> f_checkTab condition .)
    ELSE            reduce using rule 59 (statement -> f_checkTab condition .)


state 251

    (68) condition -> IF . f_isCondition expression COLON NEWLINE f_resetTab f_incTab block
    (69) condition -> IF . f_isCondition expression COLON NEWLINE f_resetTab f_incTab block f_checkTab ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block
    (75) f_isCondition -> .

    LPAREN          reduce using rule 75 (f_isCondition -> .)
    ID              reduce using rule 75 (f_isCondition -> .)
    C_BOOL          reduce using rule 75 (f_isCondition -> .)
    C_INT           reduce using rule 75 (f_isCondition -> .)
    C_FLOAT         reduce using rule 75 (f_isCondition -> .)
    C_STRING        reduce using rule 75 (f_isCondition -> .)

    f_isCondition                  shift and go to state 265

state 252

    (48) moreStatements -> TAB . f_addTab moreTabs statement moreStatements
    (54) f_addTab -> .

    TAB             reduce using rule 54 (f_addTab -> .)
    NEWLINE         reduce using rule 54 (f_addTab -> .)
    RETURN          reduce using rule 54 (f_addTab -> .)
    ID              reduce using rule 54 (f_addTab -> .)
    WHILE           reduce using rule 54 (f_addTab -> .)
    IF              reduce using rule 54 (f_addTab -> .)
    DO              reduce using rule 54 (f_addTab -> .)
    BOOL            reduce using rule 54 (f_addTab -> .)
    INT             reduce using rule 54 (f_addTab -> .)
    FLOAT           reduce using rule 54 (f_addTab -> .)
    STRING          reduce using rule 54 (f_addTab -> .)
    IMAGE           reduce using rule 54 (f_addTab -> .)
    DEF             reduce using rule 54 (f_addTab -> .)
    $end            reduce using rule 54 (f_addTab -> .)
    LOOP            reduce using rule 54 (f_addTab -> .)
    ELSE            reduce using rule 54 (f_addTab -> .)

    f_addTab                       shift and go to state 266

state 253

    (47) moreStatements -> empty .

    TAB             reduce using rule 47 (moreStatements -> empty .)
    DEF             reduce using rule 47 (moreStatements -> empty .)
    $end            reduce using rule 47 (moreStatements -> empty .)
    LOOP            reduce using rule 47 (moreStatements -> empty .)
    ELSE            reduce using rule 47 (moreStatements -> empty .)


state 254

    (49) block -> TAB f_addTab moreTabs statement moreStatements .

    DEF             reduce using rule 49 (block -> TAB f_addTab moreTabs statement moreStatements .)
    $end            reduce using rule 49 (block -> TAB f_addTab moreTabs statement moreStatements .)
    TAB             reduce using rule 49 (block -> TAB f_addTab moreTabs statement moreStatements .)
    LOOP            reduce using rule 49 (block -> TAB f_addTab moreTabs statement moreStatements .)
    ELSE            reduce using rule 49 (block -> TAB f_addTab moreTabs statement moreStatements .)


state 255

    (51) moreTabs -> TAB f_addTab moreTabs .

    TAB             reduce using rule 51 (moreTabs -> TAB f_addTab moreTabs .)
    RETURN          reduce using rule 51 (moreTabs -> TAB f_addTab moreTabs .)
    ID              reduce using rule 51 (moreTabs -> TAB f_addTab moreTabs .)
    WHILE           reduce using rule 51 (moreTabs -> TAB f_addTab moreTabs .)
    IF              reduce using rule 51 (moreTabs -> TAB f_addTab moreTabs .)
    DO              reduce using rule 51 (moreTabs -> TAB f_addTab moreTabs .)
    BOOL            reduce using rule 51 (moreTabs -> TAB f_addTab moreTabs .)
    INT             reduce using rule 51 (moreTabs -> TAB f_addTab moreTabs .)
    FLOAT           reduce using rule 51 (moreTabs -> TAB f_addTab moreTabs .)
    STRING          reduce using rule 51 (moreTabs -> TAB f_addTab moreTabs .)
    IMAGE           reduce using rule 51 (moreTabs -> TAB f_addTab moreTabs .)
    DEF             reduce using rule 51 (moreTabs -> TAB f_addTab moreTabs .)
    $end            reduce using rule 51 (moreTabs -> TAB f_addTab moreTabs .)
    LOOP            reduce using rule 51 (moreTabs -> TAB f_addTab moreTabs .)
    ELSE            reduce using rule 51 (moreTabs -> TAB f_addTab moreTabs .)


state 256

    (52) moreTabs -> NEWLINE f_resetTab TAB . f_addTab moreTabs
    (54) f_addTab -> .

    TAB             reduce using rule 54 (f_addTab -> .)
    NEWLINE         reduce using rule 54 (f_addTab -> .)
    RETURN          reduce using rule 54 (f_addTab -> .)
    ID              reduce using rule 54 (f_addTab -> .)
    WHILE           reduce using rule 54 (f_addTab -> .)
    IF              reduce using rule 54 (f_addTab -> .)
    DO              reduce using rule 54 (f_addTab -> .)
    BOOL            reduce using rule 54 (f_addTab -> .)
    INT             reduce using rule 54 (f_addTab -> .)
    FLOAT           reduce using rule 54 (f_addTab -> .)
    STRING          reduce using rule 54 (f_addTab -> .)
    IMAGE           reduce using rule 54 (f_addTab -> .)
    DEF             reduce using rule 54 (f_addTab -> .)
    $end            reduce using rule 54 (f_addTab -> .)
    LOOP            reduce using rule 54 (f_addTab -> .)
    ELSE            reduce using rule 54 (f_addTab -> .)

    f_addTab                       shift and go to state 267

state 257

    (29) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block . f_endModule functions
    (36) f_endModule -> .

    DEF             reduce using rule 36 (f_endModule -> .)
    $end            reduce using rule 36 (f_endModule -> .)

    f_endModule                    shift and go to state 268

state 258

    (43) moreAssign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab . f_generateEqual moreAssign
    (45) f_generateEqual -> .

    ID              reduce using rule 45 (f_generateEqual -> .)
    DEF             reduce using rule 45 (f_generateEqual -> .)
    $end            reduce using rule 45 (f_generateEqual -> .)
    TAB             reduce using rule 45 (f_generateEqual -> .)
    LOOP            reduce using rule 45 (f_generateEqual -> .)
    ELSE            reduce using rule 45 (f_generateEqual -> .)

    f_generateEqual                shift and go to state 269

state 259

    (33) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block . f_endModule functions
    (36) f_endModule -> .

    DEF             reduce using rule 36 (f_endModule -> .)
    $end            reduce using rule 36 (f_endModule -> .)

    f_endModule                    shift and go to state 270

state 260

    (31) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block . f_endModule functions
    (36) f_endModule -> .

    DEF             reduce using rule 36 (f_endModule -> .)
    $end            reduce using rule 36 (f_endModule -> .)

    f_endModule                    shift and go to state 271

state 261

    (71) doCycle -> DO f_pushDo . COLON NEWLINE f_resetTab f_incTab block f_checkTab LOOP f_isDoWhile f_isCondition expression NEWLINE f_resetTab

    COLON           shift and go to state 272


state 262

    (63) statement -> f_checkTab RETURN f_isReturn . expression f_return NEWLINE f_resetTab
    (82) expression -> . exp
    (83) expression -> . exp compareToken exp f_popComparation
    (91) exp -> . term moreTerms
    (96) term -> . factor moreFactors
    (101) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (102) factor -> . cvar
    (103) factor -> . funct
    (107) cvar -> . ID f_isID
    (108) cvar -> . C_BOOL f_isConst
    (109) cvar -> . C_INT f_isConst
    (110) cvar -> . C_FLOAT f_isConst
    (111) cvar -> . C_STRING f_isConst
    (76) funct -> . ID f_checkProc LPAREN RPAREN
    (77) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 85
    ID              shift and go to state 87
    C_BOOL          shift and go to state 83
    C_INT           shift and go to state 86
    C_FLOAT         shift and go to state 81
    C_STRING        shift and go to state 88

    term                           shift and go to state 89
    funct                          shift and go to state 82
    exp                            shift and go to state 90
    factor                         shift and go to state 84
    cvar                           shift and go to state 80
    expression                     shift and go to state 273

state 263

    (62) statement -> f_checkTab funct NEWLINE . f_resetTab
    (55) f_resetTab -> .

    TAB             reduce using rule 55 (f_resetTab -> .)
    DEF             reduce using rule 55 (f_resetTab -> .)
    $end            reduce using rule 55 (f_resetTab -> .)
    LOOP            reduce using rule 55 (f_resetTab -> .)
    ELSE            reduce using rule 55 (f_resetTab -> .)

    f_resetTab                     shift and go to state 274

state 264

    (67) cycle -> f_checkTab WHILE f_isCondition . expression COLON NEWLINE f_resetTab f_incTab block
    (82) expression -> . exp
    (83) expression -> . exp compareToken exp f_popComparation
    (91) exp -> . term moreTerms
    (96) term -> . factor moreFactors
    (101) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (102) factor -> . cvar
    (103) factor -> . funct
    (107) cvar -> . ID f_isID
    (108) cvar -> . C_BOOL f_isConst
    (109) cvar -> . C_INT f_isConst
    (110) cvar -> . C_FLOAT f_isConst
    (111) cvar -> . C_STRING f_isConst
    (76) funct -> . ID f_checkProc LPAREN RPAREN
    (77) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 85
    ID              shift and go to state 87
    C_BOOL          shift and go to state 83
    C_INT           shift and go to state 86
    C_FLOAT         shift and go to state 81
    C_STRING        shift and go to state 88

    cvar                           shift and go to state 80
    funct                          shift and go to state 82
    factor                         shift and go to state 84
    term                           shift and go to state 89
    exp                            shift and go to state 90
    expression                     shift and go to state 275

state 265

    (68) condition -> IF f_isCondition . expression COLON NEWLINE f_resetTab f_incTab block
    (69) condition -> IF f_isCondition . expression COLON NEWLINE f_resetTab f_incTab block f_checkTab ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block
    (82) expression -> . exp
    (83) expression -> . exp compareToken exp f_popComparation
    (91) exp -> . term moreTerms
    (96) term -> . factor moreFactors
    (101) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (102) factor -> . cvar
    (103) factor -> . funct
    (107) cvar -> . ID f_isID
    (108) cvar -> . C_BOOL f_isConst
    (109) cvar -> . C_INT f_isConst
    (110) cvar -> . C_FLOAT f_isConst
    (111) cvar -> . C_STRING f_isConst
    (76) funct -> . ID f_checkProc LPAREN RPAREN
    (77) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 85
    ID              shift and go to state 87
    C_BOOL          shift and go to state 83
    C_INT           shift and go to state 86
    C_FLOAT         shift and go to state 81
    C_STRING        shift and go to state 88

    cvar                           shift and go to state 80
    funct                          shift and go to state 82
    factor                         shift and go to state 84
    term                           shift and go to state 89
    exp                            shift and go to state 90
    expression                     shift and go to state 276

state 266

    (48) moreStatements -> TAB f_addTab . moreTabs statement moreStatements
    (50) moreTabs -> . empty
    (51) moreTabs -> . TAB f_addTab moreTabs
    (52) moreTabs -> . NEWLINE f_resetTab TAB f_addTab moreTabs
    (4) empty -> .

  ! shift/reduce conflict for TAB resolved as shift
    TAB             shift and go to state 222
    NEWLINE         shift and go to state 223
    RETURN          reduce using rule 4 (empty -> .)
    ID              reduce using rule 4 (empty -> .)
    WHILE           reduce using rule 4 (empty -> .)
    IF              reduce using rule 4 (empty -> .)
    DO              reduce using rule 4 (empty -> .)
    BOOL            reduce using rule 4 (empty -> .)
    INT             reduce using rule 4 (empty -> .)
    FLOAT           reduce using rule 4 (empty -> .)
    STRING          reduce using rule 4 (empty -> .)
    IMAGE           reduce using rule 4 (empty -> .)
    DEF             reduce using rule 4 (empty -> .)
    $end            reduce using rule 4 (empty -> .)
    LOOP            reduce using rule 4 (empty -> .)
    ELSE            reduce using rule 4 (empty -> .)

  ! TAB             [ reduce using rule 4 (empty -> .) ]

    moreTabs                       shift and go to state 277
    empty                          shift and go to state 224

state 267

    (52) moreTabs -> NEWLINE f_resetTab TAB f_addTab . moreTabs
    (50) moreTabs -> . empty
    (51) moreTabs -> . TAB f_addTab moreTabs
    (52) moreTabs -> . NEWLINE f_resetTab TAB f_addTab moreTabs
    (4) empty -> .

  ! shift/reduce conflict for TAB resolved as shift
    TAB             shift and go to state 222
    NEWLINE         shift and go to state 223
    RETURN          reduce using rule 4 (empty -> .)
    ID              reduce using rule 4 (empty -> .)
    WHILE           reduce using rule 4 (empty -> .)
    IF              reduce using rule 4 (empty -> .)
    DO              reduce using rule 4 (empty -> .)
    BOOL            reduce using rule 4 (empty -> .)
    INT             reduce using rule 4 (empty -> .)
    FLOAT           reduce using rule 4 (empty -> .)
    STRING          reduce using rule 4 (empty -> .)
    IMAGE           reduce using rule 4 (empty -> .)
    DEF             reduce using rule 4 (empty -> .)
    $end            reduce using rule 4 (empty -> .)
    LOOP            reduce using rule 4 (empty -> .)
    ELSE            reduce using rule 4 (empty -> .)

  ! TAB             [ reduce using rule 4 (empty -> .) ]

    empty                          shift and go to state 224
    moreTabs                       shift and go to state 278

state 268

    (29) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule . functions
    (28) functions -> . DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (29) functions -> . DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (30) functions -> . DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (31) functions -> . DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (32) functions -> . DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (33) functions -> . DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (34) functions -> . empty
    (4) empty -> .

    DEF             shift and go to state 41
    $end            reduce using rule 4 (empty -> .)

    functions                      shift and go to state 279
    empty                          shift and go to state 43

state 269

    (43) moreAssign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual . moreAssign
    (42) moreAssign -> . empty
    (43) moreAssign -> . f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign
    (4) empty -> .
    (56) f_checkTab -> .

    DEF             reduce using rule 4 (empty -> .)
    $end            reduce using rule 4 (empty -> .)
    TAB             reduce using rule 4 (empty -> .)
    LOOP            reduce using rule 4 (empty -> .)
    ELSE            reduce using rule 4 (empty -> .)
    ID              reduce using rule 56 (f_checkTab -> .)

    f_checkTab                     shift and go to state 165
    moreAssign                     shift and go to state 280
    empty                          shift and go to state 167

state 270

    (33) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule . functions
    (28) functions -> . DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (29) functions -> . DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (30) functions -> . DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (31) functions -> . DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (32) functions -> . DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (33) functions -> . DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (34) functions -> . empty
    (4) empty -> .

    DEF             shift and go to state 41
    $end            reduce using rule 4 (empty -> .)

    functions                      shift and go to state 281
    empty                          shift and go to state 43

state 271

    (31) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule . functions
    (28) functions -> . DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (29) functions -> . DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (30) functions -> . DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (31) functions -> . DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (32) functions -> . DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (33) functions -> . DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (34) functions -> . empty
    (4) empty -> .

    DEF             shift and go to state 41
    $end            reduce using rule 4 (empty -> .)

    functions                      shift and go to state 282
    empty                          shift and go to state 43

state 272

    (71) doCycle -> DO f_pushDo COLON . NEWLINE f_resetTab f_incTab block f_checkTab LOOP f_isDoWhile f_isCondition expression NEWLINE f_resetTab

    NEWLINE         shift and go to state 283


state 273

    (63) statement -> f_checkTab RETURN f_isReturn expression . f_return NEWLINE f_resetTab
    (66) f_return -> .

    NEWLINE         reduce using rule 66 (f_return -> .)

    f_return                       shift and go to state 284

state 274

    (62) statement -> f_checkTab funct NEWLINE f_resetTab .

    TAB             reduce using rule 62 (statement -> f_checkTab funct NEWLINE f_resetTab .)
    DEF             reduce using rule 62 (statement -> f_checkTab funct NEWLINE f_resetTab .)
    $end            reduce using rule 62 (statement -> f_checkTab funct NEWLINE f_resetTab .)
    LOOP            reduce using rule 62 (statement -> f_checkTab funct NEWLINE f_resetTab .)
    ELSE            reduce using rule 62 (statement -> f_checkTab funct NEWLINE f_resetTab .)


state 275

    (67) cycle -> f_checkTab WHILE f_isCondition expression . COLON NEWLINE f_resetTab f_incTab block

    COLON           shift and go to state 285


state 276

    (68) condition -> IF f_isCondition expression . COLON NEWLINE f_resetTab f_incTab block
    (69) condition -> IF f_isCondition expression . COLON NEWLINE f_resetTab f_incTab block f_checkTab ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block

    COLON           shift and go to state 286


state 277

    (48) moreStatements -> TAB f_addTab moreTabs . statement moreStatements
    (57) statement -> . vars
    (58) statement -> . assign
    (59) statement -> . f_checkTab condition
    (60) statement -> . f_checkTab doCycle
    (61) statement -> . cycle
    (62) statement -> . f_checkTab funct NEWLINE f_resetTab
    (63) statement -> . f_checkTab RETURN f_isReturn expression f_return NEWLINE f_resetTab
    (64) statement -> . empty
    (17) vars -> . f_checkTab tipo idList NEWLINE f_resetTab moreVars
    (41) assign -> . f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign
    (56) f_checkTab -> .
    (67) cycle -> . f_checkTab WHILE f_isCondition expression COLON NEWLINE f_resetTab f_incTab block
    (4) empty -> .

    RETURN          reduce using rule 56 (f_checkTab -> .)
    ID              reduce using rule 56 (f_checkTab -> .)
    WHILE           reduce using rule 56 (f_checkTab -> .)
    IF              reduce using rule 56 (f_checkTab -> .)
    DO              reduce using rule 56 (f_checkTab -> .)
    BOOL            reduce using rule 56 (f_checkTab -> .)
    INT             reduce using rule 56 (f_checkTab -> .)
    FLOAT           reduce using rule 56 (f_checkTab -> .)
    STRING          reduce using rule 56 (f_checkTab -> .)
    IMAGE           reduce using rule 56 (f_checkTab -> .)
    TAB             reduce using rule 4 (empty -> .)
    DEF             reduce using rule 4 (empty -> .)
    $end            reduce using rule 4 (empty -> .)
    LOOP            reduce using rule 4 (empty -> .)
    ELSE            reduce using rule 4 (empty -> .)

    vars                           shift and go to state 232
    f_checkTab                     shift and go to state 233
    statement                      shift and go to state 287
    empty                          shift and go to state 234
    cycle                          shift and go to state 236
    assign                         shift and go to state 237

state 278

    (52) moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .

    TAB             reduce using rule 52 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    RETURN          reduce using rule 52 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    ID              reduce using rule 52 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    WHILE           reduce using rule 52 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    IF              reduce using rule 52 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    DO              reduce using rule 52 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    BOOL            reduce using rule 52 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    INT             reduce using rule 52 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    FLOAT           reduce using rule 52 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    STRING          reduce using rule 52 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    IMAGE           reduce using rule 52 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    DEF             reduce using rule 52 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    $end            reduce using rule 52 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    LOOP            reduce using rule 52 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    ELSE            reduce using rule 52 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)


state 279

    (29) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions .

    $end            reduce using rule 29 (functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions .)


state 280

    (43) moreAssign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign .

    DEF             reduce using rule 43 (moreAssign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign .)
    $end            reduce using rule 43 (moreAssign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign .)
    TAB             reduce using rule 43 (moreAssign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign .)
    LOOP            reduce using rule 43 (moreAssign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign .)
    ELSE            reduce using rule 43 (moreAssign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign .)


state 281

    (33) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions .

    $end            reduce using rule 33 (functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions .)


state 282

    (31) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions .

    $end            reduce using rule 31 (functions -> DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions .)


state 283

    (71) doCycle -> DO f_pushDo COLON NEWLINE . f_resetTab f_incTab block f_checkTab LOOP f_isDoWhile f_isCondition expression NEWLINE f_resetTab
    (55) f_resetTab -> .

    TAB             reduce using rule 55 (f_resetTab -> .)

    f_resetTab                     shift and go to state 288

state 284

    (63) statement -> f_checkTab RETURN f_isReturn expression f_return . NEWLINE f_resetTab

    NEWLINE         shift and go to state 289


state 285

    (67) cycle -> f_checkTab WHILE f_isCondition expression COLON . NEWLINE f_resetTab f_incTab block

    NEWLINE         shift and go to state 290


state 286

    (68) condition -> IF f_isCondition expression COLON . NEWLINE f_resetTab f_incTab block
    (69) condition -> IF f_isCondition expression COLON . NEWLINE f_resetTab f_incTab block f_checkTab ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block

    NEWLINE         shift and go to state 291


state 287

    (48) moreStatements -> TAB f_addTab moreTabs statement . moreStatements
    (47) moreStatements -> . empty
    (48) moreStatements -> . TAB f_addTab moreTabs statement moreStatements
    (4) empty -> .

  ! shift/reduce conflict for TAB resolved as shift
    TAB             shift and go to state 252
    DEF             reduce using rule 4 (empty -> .)
    $end            reduce using rule 4 (empty -> .)
    LOOP            reduce using rule 4 (empty -> .)
    ELSE            reduce using rule 4 (empty -> .)

  ! TAB             [ reduce using rule 4 (empty -> .) ]

    empty                          shift and go to state 253
    moreStatements                 shift and go to state 292

state 288

    (71) doCycle -> DO f_pushDo COLON NEWLINE f_resetTab . f_incTab block f_checkTab LOOP f_isDoWhile f_isCondition expression NEWLINE f_resetTab
    (53) f_incTab -> .

    TAB             reduce using rule 53 (f_incTab -> .)

    f_incTab                       shift and go to state 293

state 289

    (63) statement -> f_checkTab RETURN f_isReturn expression f_return NEWLINE . f_resetTab
    (55) f_resetTab -> .

    TAB             reduce using rule 55 (f_resetTab -> .)
    DEF             reduce using rule 55 (f_resetTab -> .)
    $end            reduce using rule 55 (f_resetTab -> .)
    LOOP            reduce using rule 55 (f_resetTab -> .)
    ELSE            reduce using rule 55 (f_resetTab -> .)

    f_resetTab                     shift and go to state 294

state 290

    (67) cycle -> f_checkTab WHILE f_isCondition expression COLON NEWLINE . f_resetTab f_incTab block
    (55) f_resetTab -> .

    TAB             reduce using rule 55 (f_resetTab -> .)

    f_resetTab                     shift and go to state 295

state 291

    (68) condition -> IF f_isCondition expression COLON NEWLINE . f_resetTab f_incTab block
    (69) condition -> IF f_isCondition expression COLON NEWLINE . f_resetTab f_incTab block f_checkTab ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block
    (55) f_resetTab -> .

    TAB             reduce using rule 55 (f_resetTab -> .)

    f_resetTab                     shift and go to state 296

state 292

    (48) moreStatements -> TAB f_addTab moreTabs statement moreStatements .

    TAB             reduce using rule 48 (moreStatements -> TAB f_addTab moreTabs statement moreStatements .)
    DEF             reduce using rule 48 (moreStatements -> TAB f_addTab moreTabs statement moreStatements .)
    $end            reduce using rule 48 (moreStatements -> TAB f_addTab moreTabs statement moreStatements .)
    LOOP            reduce using rule 48 (moreStatements -> TAB f_addTab moreTabs statement moreStatements .)
    ELSE            reduce using rule 48 (moreStatements -> TAB f_addTab moreTabs statement moreStatements .)


state 293

    (71) doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab . block f_checkTab LOOP f_isDoWhile f_isCondition expression NEWLINE f_resetTab
    (49) block -> . TAB f_addTab moreTabs statement moreStatements

    TAB             shift and go to state 201

    block                          shift and go to state 297

state 294

    (63) statement -> f_checkTab RETURN f_isReturn expression f_return NEWLINE f_resetTab .

    TAB             reduce using rule 63 (statement -> f_checkTab RETURN f_isReturn expression f_return NEWLINE f_resetTab .)
    DEF             reduce using rule 63 (statement -> f_checkTab RETURN f_isReturn expression f_return NEWLINE f_resetTab .)
    $end            reduce using rule 63 (statement -> f_checkTab RETURN f_isReturn expression f_return NEWLINE f_resetTab .)
    LOOP            reduce using rule 63 (statement -> f_checkTab RETURN f_isReturn expression f_return NEWLINE f_resetTab .)
    ELSE            reduce using rule 63 (statement -> f_checkTab RETURN f_isReturn expression f_return NEWLINE f_resetTab .)


state 295

    (67) cycle -> f_checkTab WHILE f_isCondition expression COLON NEWLINE f_resetTab . f_incTab block
    (53) f_incTab -> .

    TAB             reduce using rule 53 (f_incTab -> .)

    f_incTab                       shift and go to state 298

state 296

    (68) condition -> IF f_isCondition expression COLON NEWLINE f_resetTab . f_incTab block
    (69) condition -> IF f_isCondition expression COLON NEWLINE f_resetTab . f_incTab block f_checkTab ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block
    (53) f_incTab -> .

    TAB             reduce using rule 53 (f_incTab -> .)

    f_incTab                       shift and go to state 299

state 297

    (71) doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block . f_checkTab LOOP f_isDoWhile f_isCondition expression NEWLINE f_resetTab
    (56) f_checkTab -> .

    LOOP            reduce using rule 56 (f_checkTab -> .)

    f_checkTab                     shift and go to state 300

state 298

    (67) cycle -> f_checkTab WHILE f_isCondition expression COLON NEWLINE f_resetTab f_incTab . block
    (49) block -> . TAB f_addTab moreTabs statement moreStatements

    TAB             shift and go to state 201

    block                          shift and go to state 301

state 299

    (68) condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab . block
    (69) condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab . block f_checkTab ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block
    (49) block -> . TAB f_addTab moreTabs statement moreStatements

    TAB             shift and go to state 201

    block                          shift and go to state 302

state 300

    (71) doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block f_checkTab . LOOP f_isDoWhile f_isCondition expression NEWLINE f_resetTab

    LOOP            shift and go to state 303


state 301

    (67) cycle -> f_checkTab WHILE f_isCondition expression COLON NEWLINE f_resetTab f_incTab block .

    TAB             reduce using rule 67 (cycle -> f_checkTab WHILE f_isCondition expression COLON NEWLINE f_resetTab f_incTab block .)
    DEF             reduce using rule 67 (cycle -> f_checkTab WHILE f_isCondition expression COLON NEWLINE f_resetTab f_incTab block .)
    $end            reduce using rule 67 (cycle -> f_checkTab WHILE f_isCondition expression COLON NEWLINE f_resetTab f_incTab block .)
    LOOP            reduce using rule 67 (cycle -> f_checkTab WHILE f_isCondition expression COLON NEWLINE f_resetTab f_incTab block .)
    ELSE            reduce using rule 67 (cycle -> f_checkTab WHILE f_isCondition expression COLON NEWLINE f_resetTab f_incTab block .)


state 302

    (68) condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block .
    (69) condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block . f_checkTab ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block
    (56) f_checkTab -> .

  ! reduce/reduce conflict for ELSE resolved using rule 56 (f_checkTab -> .)
    TAB             reduce using rule 68 (condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block .)
    DEF             reduce using rule 68 (condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block .)
    $end            reduce using rule 68 (condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block .)
    LOOP            reduce using rule 68 (condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block .)
    ELSE            reduce using rule 56 (f_checkTab -> .)

  ! ELSE            [ reduce using rule 68 (condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block .) ]

    f_checkTab                     shift and go to state 304

state 303

    (71) doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block f_checkTab LOOP . f_isDoWhile f_isCondition expression NEWLINE f_resetTab
    (74) f_isDoWhile -> .

    LPAREN          reduce using rule 74 (f_isDoWhile -> .)
    ID              reduce using rule 74 (f_isDoWhile -> .)
    C_BOOL          reduce using rule 74 (f_isDoWhile -> .)
    C_INT           reduce using rule 74 (f_isDoWhile -> .)
    C_FLOAT         reduce using rule 74 (f_isDoWhile -> .)
    C_STRING        reduce using rule 74 (f_isDoWhile -> .)

    f_isDoWhile                    shift and go to state 305

state 304

    (69) condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block f_checkTab . ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block

    ELSE            shift and go to state 306


state 305

    (71) doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block f_checkTab LOOP f_isDoWhile . f_isCondition expression NEWLINE f_resetTab
    (75) f_isCondition -> .

    LPAREN          reduce using rule 75 (f_isCondition -> .)
    ID              reduce using rule 75 (f_isCondition -> .)
    C_BOOL          reduce using rule 75 (f_isCondition -> .)
    C_INT           reduce using rule 75 (f_isCondition -> .)
    C_FLOAT         reduce using rule 75 (f_isCondition -> .)
    C_STRING        reduce using rule 75 (f_isCondition -> .)

    f_isCondition                  shift and go to state 307

state 306

    (69) condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block f_checkTab ELSE . f_popIf COLON NEWLINE f_resetTab f_incTab block
    (72) f_popIf -> .

    COLON           reduce using rule 72 (f_popIf -> .)

    f_popIf                        shift and go to state 308

state 307

    (71) doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block f_checkTab LOOP f_isDoWhile f_isCondition . expression NEWLINE f_resetTab
    (82) expression -> . exp
    (83) expression -> . exp compareToken exp f_popComparation
    (91) exp -> . term moreTerms
    (96) term -> . factor moreFactors
    (101) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (102) factor -> . cvar
    (103) factor -> . funct
    (107) cvar -> . ID f_isID
    (108) cvar -> . C_BOOL f_isConst
    (109) cvar -> . C_INT f_isConst
    (110) cvar -> . C_FLOAT f_isConst
    (111) cvar -> . C_STRING f_isConst
    (76) funct -> . ID f_checkProc LPAREN RPAREN
    (77) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 85
    ID              shift and go to state 87
    C_BOOL          shift and go to state 83
    C_INT           shift and go to state 86
    C_FLOAT         shift and go to state 81
    C_STRING        shift and go to state 88

    funct                          shift and go to state 82
    cvar                           shift and go to state 80
    factor                         shift and go to state 84
    term                           shift and go to state 89
    exp                            shift and go to state 90
    expression                     shift and go to state 309

state 308

    (69) condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block f_checkTab ELSE f_popIf . COLON NEWLINE f_resetTab f_incTab block

    COLON           shift and go to state 310


state 309

    (71) doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block f_checkTab LOOP f_isDoWhile f_isCondition expression . NEWLINE f_resetTab

    NEWLINE         shift and go to state 311


state 310

    (69) condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block f_checkTab ELSE f_popIf COLON . NEWLINE f_resetTab f_incTab block

    NEWLINE         shift and go to state 312


state 311

    (71) doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block f_checkTab LOOP f_isDoWhile f_isCondition expression NEWLINE . f_resetTab
    (55) f_resetTab -> .

    TAB             reduce using rule 55 (f_resetTab -> .)
    DEF             reduce using rule 55 (f_resetTab -> .)
    $end            reduce using rule 55 (f_resetTab -> .)
    LOOP            reduce using rule 55 (f_resetTab -> .)
    ELSE            reduce using rule 55 (f_resetTab -> .)

    f_resetTab                     shift and go to state 313

state 312

    (69) condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block f_checkTab ELSE f_popIf COLON NEWLINE . f_resetTab f_incTab block
    (55) f_resetTab -> .

    TAB             reduce using rule 55 (f_resetTab -> .)

    f_resetTab                     shift and go to state 314

state 313

    (71) doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block f_checkTab LOOP f_isDoWhile f_isCondition expression NEWLINE f_resetTab .

    TAB             reduce using rule 71 (doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block f_checkTab LOOP f_isDoWhile f_isCondition expression NEWLINE f_resetTab .)
    DEF             reduce using rule 71 (doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block f_checkTab LOOP f_isDoWhile f_isCondition expression NEWLINE f_resetTab .)
    $end            reduce using rule 71 (doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block f_checkTab LOOP f_isDoWhile f_isCondition expression NEWLINE f_resetTab .)
    LOOP            reduce using rule 71 (doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block f_checkTab LOOP f_isDoWhile f_isCondition expression NEWLINE f_resetTab .)
    ELSE            reduce using rule 71 (doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block f_checkTab LOOP f_isDoWhile f_isCondition expression NEWLINE f_resetTab .)


state 314

    (69) condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block f_checkTab ELSE f_popIf COLON NEWLINE f_resetTab . f_incTab block
    (53) f_incTab -> .

    TAB             reduce using rule 53 (f_incTab -> .)

    f_incTab                       shift and go to state 315

state 315

    (69) condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block f_checkTab ELSE f_popIf COLON NEWLINE f_resetTab f_incTab . block
    (49) block -> . TAB f_addTab moreTabs statement moreStatements

    TAB             shift and go to state 201

    block                          shift and go to state 316

state 316

    (69) condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block f_checkTab ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block .

    TAB             reduce using rule 69 (condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block f_checkTab ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block .)
    DEF             reduce using rule 69 (condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block f_checkTab ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block .)
    $end            reduce using rule 69 (condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block f_checkTab ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block .)
    LOOP            reduce using rule 69 (condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block f_checkTab ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block .)
    ELSE            reduce using rule 69 (condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block f_checkTab ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for TAB in state 211 resolved as shift
WARNING: shift/reduce conflict for TAB in state 235 resolved as shift
WARNING: shift/reduce conflict for TAB in state 238 resolved as shift
WARNING: shift/reduce conflict for TAB in state 266 resolved as shift
WARNING: shift/reduce conflict for TAB in state 267 resolved as shift
WARNING: shift/reduce conflict for TAB in state 287 resolved as shift
WARNING: reduce/reduce conflict in state 302 resolved using rule (f_checkTab -> <empty>)
WARNING: rejected rule (condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block) in state 302
