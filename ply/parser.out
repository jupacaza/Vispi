Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    PERIOD
    AND
    NOT
    OR

Grammar

Rule 0     S' -> program
Rule 1     program -> programName hardware vars assign functions
Rule 2     programName -> PROGRAM ID NEWLINE
Rule 3     empty -> <empty>
Rule 4     hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration
Rule 5     camDeclaration -> empty
Rule 6     camDeclaration -> CAM WEBCAM COLON ID NEWLINE
Rule 7     camDeclaration -> CAM PICAM COLON ID NEWLINE
Rule 8     inputsDeclaration -> empty
Rule 9     inputsDeclaration -> INPUT f_saveType pinList NEWLINE
Rule 10    outputsDeclaration -> empty
Rule 11    outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE
Rule 12    pwmDeclaration -> empty
Rule 13    pwmDeclaration -> PWM f_saveType pinList NEWLINE
Rule 14    pinList -> C_INT COLON ID
Rule 15    pinList -> C_INT COLON ID COMMA pinList
Rule 16    vars -> f_checkTab tipo idList NEWLINE f_resetTab vars
Rule 17    vars -> empty
Rule 18    f_saveType -> <empty>
Rule 19    idList -> ID
Rule 20    idList -> ID COMMA idList
Rule 21    tipo -> BOOL f_saveType
Rule 22    tipo -> INT f_saveType
Rule 23    tipo -> FLOAT f_saveType
Rule 24    tipo -> STRING f_saveType
Rule 25    tipo -> IMAGE f_saveType
Rule 26    functions -> DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
Rule 27    functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
Rule 28    functions -> DEF VOID ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
Rule 29    functions -> DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
Rule 30    functions -> DEF VOID MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
Rule 31    functions -> DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
Rule 32    functions -> empty
Rule 33    f_endModule -> <empty>
Rule 34    f_saveModule -> <empty>
Rule 35    parameterList -> empty
Rule 36    parameterList -> COMMA tipo ID f_addToParam parameterList
Rule 37    f_addToParam -> <empty>
Rule 38    assign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual assign
Rule 39    assign -> empty
Rule 40    f_isAssign -> <empty>
Rule 41    f_generateEqual -> <empty>
Rule 42    f_checkID -> <empty>
Rule 43    block -> empty
Rule 44    block -> TAB f_addTab moreTabs statement moreStatements
Rule 45    moreStatements -> empty
Rule 46    moreStatements -> TAB f_addTab moreTabs statement moreStatements
Rule 47    moreTabs -> empty
Rule 48    moreTabs -> TAB f_addTab moreTabs
Rule 49    moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs
Rule 50    f_incTab -> <empty>
Rule 51    f_addTab -> <empty>
Rule 52    f_resetTab -> <empty>
Rule 53    f_checkTab -> <empty>
Rule 54    statement -> vars
Rule 55    statement -> assign
Rule 56    statement -> f_checkTab condition
Rule 57    statement -> f_checkTab cycle
Rule 58    statement -> f_checkTab doCycle
Rule 59    statement -> f_checkTab funct NEWLINE f_resetTab
Rule 60    statement -> f_checkTab RETURN expression f_return NEWLINE f_resetTab
Rule 61    f_return -> <empty>
Rule 62    condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block
Rule 63    condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block
Rule 64    cycle -> WHILE f_isCondition expression COLON NEWLINE f_resetTab f_incTab block
Rule 65    doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block WHILE f_isDoWhile f_isCondition expression NEWLINE f_resetTab
Rule 66    f_popIf -> <empty>
Rule 67    f_pushDo -> <empty>
Rule 68    f_isDoWhile -> <empty>
Rule 69    f_isCondition -> <empty>
Rule 70    funct -> ID f_checkProc LPAREN RPAREN
Rule 71    funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN
Rule 72    f_checkProc -> <empty>
Rule 73    expressionList -> empty
Rule 74    expressionList -> COMMA expression f_genParam expressionList
Rule 75    f_genParam -> <empty>
Rule 76    expression -> exp
Rule 77    expression -> exp compareToken exp f_popComparation
Rule 78    f_popComparation -> <empty>
Rule 79    compareToken -> GREATER_THAN
Rule 80    compareToken -> LESS_THAN
Rule 81    compareToken -> LESS_EQUAL_THAN
Rule 82    compareToken -> GREATER_EQUAL_THAN
Rule 83    compareToken -> NOT_EQUAL_THAN
Rule 84    compareToken -> SAME_AS
Rule 85    exp -> term moreTerms
Rule 86    moreTerms -> empty
Rule 87    moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms
Rule 88    moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms
Rule 89    f_popTerm -> <empty>
Rule 90    term -> factor moreFactors
Rule 91    moreFactors -> empty
Rule 92    moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors
Rule 93    moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors
Rule 94    moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors
Rule 95    factor -> LPAREN f_pushOperator expression RPAREN f_popOperator
Rule 96    factor -> cvar
Rule 97    factor -> funct
Rule 98    f_pushOperator -> <empty>
Rule 99    f_popOperator -> <empty>
Rule 100   f_popFactor -> <empty>
Rule 101   cvar -> ID f_isID
Rule 102   cvar -> C_BOOL f_isConst
Rule 103   cvar -> C_INT f_isConst
Rule 104   cvar -> C_FLOAT f_isConst
Rule 105   cvar -> C_STRING f_isConst
Rule 106   f_isID -> <empty>
Rule 107   f_isConst -> <empty>

Terminals, with rules where they appear

AND                  : 
BOOL                 : 21
CAM                  : 6 7
COLON                : 6 7 14 15 26 27 28 29 30 31 62 63 63 64 65
COMMA                : 15 20 36 74
C_BOOL               : 102
C_FLOAT              : 104
C_INT                : 14 15 103
C_STRING             : 105
DEF                  : 26 27 28 29 30 31
DIVIDE               : 92
DO                   : 65
ELSE                 : 63
EQUAL                : 38
FLOAT                : 23
GREATER_EQUAL_THAN   : 82
GREATER_THAN         : 79
ID                   : 2 6 7 14 15 19 20 26 27 27 28 29 29 31 36 38 70 71 101
IF                   : 62 63
IMAGE                : 25
INPUT                : 9
INT                  : 22
LESS_EQUAL_THAN      : 81
LESS_THAN            : 80
LPAREN               : 26 27 28 29 30 31 70 71 95
MAIN                 : 30 31
MINUS                : 88
MOD                  : 94
NEWLINE              : 2 6 7 9 11 13 16 26 27 28 29 30 31 38 49 59 60 62 63 63 64 65 65
NOT                  : 
NOT_EQUAL_THAN       : 83
OR                   : 
OUTPUT               : 11
PERIOD               : 
PICAM                : 7
PLUS                 : 87
PROGRAM              : 2
PWM                  : 13
RETURN               : 60
RPAREN               : 26 27 28 29 30 31 70 71 95
SAME_AS              : 84
STRING               : 24
TAB                  : 44 46 48 49
TIMES                : 93
VOID                 : 28 29 30 31
WEBCAM               : 6
WHILE                : 64 65
error                : 

Nonterminals, with rules where they appear

assign               : 1 38 55
block                : 26 27 28 29 30 31 62 63 63 64 65
camDeclaration       : 4
compareToken         : 77
condition            : 56
cvar                 : 96
cycle                : 57
doCycle              : 58
empty                : 5 8 10 12 17 32 35 39 43 45 47 73 86 91
exp                  : 76 77 77
expression           : 38 60 62 63 64 65 71 74 95
expressionList       : 71 74
f_addTab             : 44 46 48 49
f_addToParam         : 27 29 31 36
f_checkID            : 38
f_checkProc          : 70 71
f_checkTab           : 16 38 56 57 58 59 60
f_endModule          : 26 27 28 29 30 31
f_genParam           : 71 74
f_generateEqual      : 38
f_incTab             : 26 27 28 29 30 31 62 63 63 64 65
f_isAssign           : 38
f_isCondition        : 62 63 64 65
f_isConst            : 102 103 104 105
f_isDoWhile          : 65
f_isID               : 101
f_popComparation     : 77
f_popFactor          : 92 93 94
f_popIf              : 63
f_popOperator        : 95
f_popTerm            : 87 88
f_pushDo             : 65
f_pushOperator       : 87 88 92 93 94 95
f_resetTab           : 16 26 27 28 29 30 31 38 49 59 60 62 63 63 64 65 65
f_return             : 60
f_saveModule         : 26 27 28 29 30 31
f_saveType           : 9 11 13 21 22 23 24 25
factor               : 90 92 93 94
funct                : 59 97
functions            : 1 26 27 28 29 30 31
hardware             : 1
idList               : 16 20
inputsDeclaration    : 4
moreFactors          : 90 92 93 94
moreStatements       : 44 46
moreTabs             : 44 46 48 49
moreTerms            : 85 87 88
outputsDeclaration   : 4
parameterList        : 27 29 31 36
pinList              : 9 11 13 15
program              : 0
programName          : 1
pwmDeclaration       : 4
statement            : 44 46
term                 : 85 87 88
tipo                 : 16 26 27 27 29 31 36
vars                 : 1 16 54

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . programName hardware vars assign functions
    (2) programName -> . PROGRAM ID NEWLINE

    PROGRAM         shift and go to state 3

    program                        shift and go to state 1
    programName                    shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> programName . hardware vars assign functions
    (4) hardware -> . camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration
    (5) camDeclaration -> . empty
    (6) camDeclaration -> . CAM WEBCAM COLON ID NEWLINE
    (7) camDeclaration -> . CAM PICAM COLON ID NEWLINE
    (3) empty -> .

    CAM             shift and go to state 4
    INPUT           reduce using rule 3 (empty -> .)
    OUTPUT          reduce using rule 3 (empty -> .)
    PWM             reduce using rule 3 (empty -> .)
    DEF             reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)
    BOOL            reduce using rule 3 (empty -> .)
    INT             reduce using rule 3 (empty -> .)
    FLOAT           reduce using rule 3 (empty -> .)
    STRING          reduce using rule 3 (empty -> .)
    IMAGE           reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)

    hardware                       shift and go to state 5
    camDeclaration                 shift and go to state 6
    empty                          shift and go to state 7

state 3

    (2) programName -> PROGRAM . ID NEWLINE

    ID              shift and go to state 8


state 4

    (6) camDeclaration -> CAM . WEBCAM COLON ID NEWLINE
    (7) camDeclaration -> CAM . PICAM COLON ID NEWLINE

    WEBCAM          shift and go to state 9
    PICAM           shift and go to state 10


state 5

    (1) program -> programName hardware . vars assign functions
    (16) vars -> . f_checkTab tipo idList NEWLINE f_resetTab vars
    (17) vars -> . empty
    (53) f_checkTab -> .
    (3) empty -> .

    BOOL            reduce using rule 53 (f_checkTab -> .)
    INT             reduce using rule 53 (f_checkTab -> .)
    FLOAT           reduce using rule 53 (f_checkTab -> .)
    STRING          reduce using rule 53 (f_checkTab -> .)
    IMAGE           reduce using rule 53 (f_checkTab -> .)
    DEF             reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)

    vars                           shift and go to state 11
    f_checkTab                     shift and go to state 12
    empty                          shift and go to state 13

state 6

    (4) hardware -> camDeclaration . inputsDeclaration outputsDeclaration pwmDeclaration
    (8) inputsDeclaration -> . empty
    (9) inputsDeclaration -> . INPUT f_saveType pinList NEWLINE
    (3) empty -> .

    INPUT           shift and go to state 15
    OUTPUT          reduce using rule 3 (empty -> .)
    PWM             reduce using rule 3 (empty -> .)
    DEF             reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)
    BOOL            reduce using rule 3 (empty -> .)
    INT             reduce using rule 3 (empty -> .)
    FLOAT           reduce using rule 3 (empty -> .)
    STRING          reduce using rule 3 (empty -> .)
    IMAGE           reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)

    inputsDeclaration              shift and go to state 14
    empty                          shift and go to state 16

state 7

    (5) camDeclaration -> empty .

    INPUT           reduce using rule 5 (camDeclaration -> empty .)
    OUTPUT          reduce using rule 5 (camDeclaration -> empty .)
    PWM             reduce using rule 5 (camDeclaration -> empty .)
    DEF             reduce using rule 5 (camDeclaration -> empty .)
    ID              reduce using rule 5 (camDeclaration -> empty .)
    BOOL            reduce using rule 5 (camDeclaration -> empty .)
    INT             reduce using rule 5 (camDeclaration -> empty .)
    FLOAT           reduce using rule 5 (camDeclaration -> empty .)
    STRING          reduce using rule 5 (camDeclaration -> empty .)
    IMAGE           reduce using rule 5 (camDeclaration -> empty .)
    $end            reduce using rule 5 (camDeclaration -> empty .)


state 8

    (2) programName -> PROGRAM ID . NEWLINE

    NEWLINE         shift and go to state 17


state 9

    (6) camDeclaration -> CAM WEBCAM . COLON ID NEWLINE

    COLON           shift and go to state 18


state 10

    (7) camDeclaration -> CAM PICAM . COLON ID NEWLINE

    COLON           shift and go to state 19


state 11

    (1) program -> programName hardware vars . assign functions
    (38) assign -> . f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual assign
    (39) assign -> . empty
    (53) f_checkTab -> .
    (3) empty -> .

    ID              reduce using rule 53 (f_checkTab -> .)
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)

    f_checkTab                     shift and go to state 20
    assign                         shift and go to state 21
    empty                          shift and go to state 22

state 12

    (16) vars -> f_checkTab . tipo idList NEWLINE f_resetTab vars
    (21) tipo -> . BOOL f_saveType
    (22) tipo -> . INT f_saveType
    (23) tipo -> . FLOAT f_saveType
    (24) tipo -> . STRING f_saveType
    (25) tipo -> . IMAGE f_saveType

    BOOL            shift and go to state 25
    INT             shift and go to state 24
    FLOAT           shift and go to state 23
    STRING          shift and go to state 26
    IMAGE           shift and go to state 27

    tipo                           shift and go to state 28

state 13

    (17) vars -> empty .

    DEF             reduce using rule 17 (vars -> empty .)
    ID              reduce using rule 17 (vars -> empty .)
    $end            reduce using rule 17 (vars -> empty .)
    TAB             reduce using rule 17 (vars -> empty .)
    WHILE           reduce using rule 17 (vars -> empty .)
    ELSE            reduce using rule 17 (vars -> empty .)


state 14

    (4) hardware -> camDeclaration inputsDeclaration . outputsDeclaration pwmDeclaration
    (10) outputsDeclaration -> . empty
    (11) outputsDeclaration -> . OUTPUT f_saveType pinList NEWLINE
    (3) empty -> .

    OUTPUT          shift and go to state 30
    PWM             reduce using rule 3 (empty -> .)
    DEF             reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)
    BOOL            reduce using rule 3 (empty -> .)
    INT             reduce using rule 3 (empty -> .)
    FLOAT           reduce using rule 3 (empty -> .)
    STRING          reduce using rule 3 (empty -> .)
    IMAGE           reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)

    outputsDeclaration             shift and go to state 29
    empty                          shift and go to state 31

state 15

    (9) inputsDeclaration -> INPUT . f_saveType pinList NEWLINE
    (18) f_saveType -> .

    C_INT           reduce using rule 18 (f_saveType -> .)

    f_saveType                     shift and go to state 32

state 16

    (8) inputsDeclaration -> empty .

    OUTPUT          reduce using rule 8 (inputsDeclaration -> empty .)
    PWM             reduce using rule 8 (inputsDeclaration -> empty .)
    DEF             reduce using rule 8 (inputsDeclaration -> empty .)
    ID              reduce using rule 8 (inputsDeclaration -> empty .)
    BOOL            reduce using rule 8 (inputsDeclaration -> empty .)
    INT             reduce using rule 8 (inputsDeclaration -> empty .)
    FLOAT           reduce using rule 8 (inputsDeclaration -> empty .)
    STRING          reduce using rule 8 (inputsDeclaration -> empty .)
    IMAGE           reduce using rule 8 (inputsDeclaration -> empty .)
    $end            reduce using rule 8 (inputsDeclaration -> empty .)


state 17

    (2) programName -> PROGRAM ID NEWLINE .

    CAM             reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)
    DEF             reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)
    ID              reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)
    BOOL            reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)
    INT             reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)
    FLOAT           reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)
    STRING          reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)
    IMAGE           reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)
    INPUT           reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)
    OUTPUT          reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)
    PWM             reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)
    $end            reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)


state 18

    (6) camDeclaration -> CAM WEBCAM COLON . ID NEWLINE

    ID              shift and go to state 33


state 19

    (7) camDeclaration -> CAM PICAM COLON . ID NEWLINE

    ID              shift and go to state 34


state 20

    (38) assign -> f_checkTab . ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual assign

    ID              shift and go to state 35


state 21

    (1) program -> programName hardware vars assign . functions
    (26) functions -> . DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (27) functions -> . DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (28) functions -> . DEF VOID ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (29) functions -> . DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (30) functions -> . DEF VOID MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (31) functions -> . DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (32) functions -> . empty
    (3) empty -> .

    DEF             shift and go to state 36
    $end            reduce using rule 3 (empty -> .)

    functions                      shift and go to state 37
    empty                          shift and go to state 38

state 22

    (39) assign -> empty .

    DEF             reduce using rule 39 (assign -> empty .)
    $end            reduce using rule 39 (assign -> empty .)
    TAB             reduce using rule 39 (assign -> empty .)
    WHILE           reduce using rule 39 (assign -> empty .)
    ELSE            reduce using rule 39 (assign -> empty .)


state 23

    (23) tipo -> FLOAT . f_saveType
    (18) f_saveType -> .

    ID              reduce using rule 18 (f_saveType -> .)

    f_saveType                     shift and go to state 39

state 24

    (22) tipo -> INT . f_saveType
    (18) f_saveType -> .

    ID              reduce using rule 18 (f_saveType -> .)

    f_saveType                     shift and go to state 40

state 25

    (21) tipo -> BOOL . f_saveType
    (18) f_saveType -> .

    ID              reduce using rule 18 (f_saveType -> .)

    f_saveType                     shift and go to state 41

state 26

    (24) tipo -> STRING . f_saveType
    (18) f_saveType -> .

    ID              reduce using rule 18 (f_saveType -> .)

    f_saveType                     shift and go to state 42

state 27

    (25) tipo -> IMAGE . f_saveType
    (18) f_saveType -> .

    ID              reduce using rule 18 (f_saveType -> .)

    f_saveType                     shift and go to state 43

state 28

    (16) vars -> f_checkTab tipo . idList NEWLINE f_resetTab vars
    (19) idList -> . ID
    (20) idList -> . ID COMMA idList

    ID              shift and go to state 45

    idList                         shift and go to state 44

state 29

    (4) hardware -> camDeclaration inputsDeclaration outputsDeclaration . pwmDeclaration
    (12) pwmDeclaration -> . empty
    (13) pwmDeclaration -> . PWM f_saveType pinList NEWLINE
    (3) empty -> .

    PWM             shift and go to state 47
    DEF             reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)
    BOOL            reduce using rule 3 (empty -> .)
    INT             reduce using rule 3 (empty -> .)
    FLOAT           reduce using rule 3 (empty -> .)
    STRING          reduce using rule 3 (empty -> .)
    IMAGE           reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)

    pwmDeclaration                 shift and go to state 46
    empty                          shift and go to state 48

state 30

    (11) outputsDeclaration -> OUTPUT . f_saveType pinList NEWLINE
    (18) f_saveType -> .

    C_INT           reduce using rule 18 (f_saveType -> .)

    f_saveType                     shift and go to state 49

state 31

    (10) outputsDeclaration -> empty .

    PWM             reduce using rule 10 (outputsDeclaration -> empty .)
    DEF             reduce using rule 10 (outputsDeclaration -> empty .)
    ID              reduce using rule 10 (outputsDeclaration -> empty .)
    BOOL            reduce using rule 10 (outputsDeclaration -> empty .)
    INT             reduce using rule 10 (outputsDeclaration -> empty .)
    FLOAT           reduce using rule 10 (outputsDeclaration -> empty .)
    STRING          reduce using rule 10 (outputsDeclaration -> empty .)
    IMAGE           reduce using rule 10 (outputsDeclaration -> empty .)
    $end            reduce using rule 10 (outputsDeclaration -> empty .)


state 32

    (9) inputsDeclaration -> INPUT f_saveType . pinList NEWLINE
    (14) pinList -> . C_INT COLON ID
    (15) pinList -> . C_INT COLON ID COMMA pinList

    C_INT           shift and go to state 51

    pinList                        shift and go to state 50

state 33

    (6) camDeclaration -> CAM WEBCAM COLON ID . NEWLINE

    NEWLINE         shift and go to state 52


state 34

    (7) camDeclaration -> CAM PICAM COLON ID . NEWLINE

    NEWLINE         shift and go to state 53


state 35

    (38) assign -> f_checkTab ID . f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual assign
    (42) f_checkID -> .

    EQUAL           reduce using rule 42 (f_checkID -> .)

    f_checkID                      shift and go to state 54

state 36

    (26) functions -> DEF . tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (27) functions -> DEF . tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (28) functions -> DEF . VOID ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (29) functions -> DEF . VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (30) functions -> DEF . VOID MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (31) functions -> DEF . VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (21) tipo -> . BOOL f_saveType
    (22) tipo -> . INT f_saveType
    (23) tipo -> . FLOAT f_saveType
    (24) tipo -> . STRING f_saveType
    (25) tipo -> . IMAGE f_saveType

    VOID            shift and go to state 55
    BOOL            shift and go to state 25
    INT             shift and go to state 24
    FLOAT           shift and go to state 23
    STRING          shift and go to state 26
    IMAGE           shift and go to state 27

    tipo                           shift and go to state 56

state 37

    (1) program -> programName hardware vars assign functions .

    $end            reduce using rule 1 (program -> programName hardware vars assign functions .)


state 38

    (32) functions -> empty .

    $end            reduce using rule 32 (functions -> empty .)


state 39

    (23) tipo -> FLOAT f_saveType .

    ID              reduce using rule 23 (tipo -> FLOAT f_saveType .)


state 40

    (22) tipo -> INT f_saveType .

    ID              reduce using rule 22 (tipo -> INT f_saveType .)


state 41

    (21) tipo -> BOOL f_saveType .

    ID              reduce using rule 21 (tipo -> BOOL f_saveType .)


state 42

    (24) tipo -> STRING f_saveType .

    ID              reduce using rule 24 (tipo -> STRING f_saveType .)


state 43

    (25) tipo -> IMAGE f_saveType .

    ID              reduce using rule 25 (tipo -> IMAGE f_saveType .)


state 44

    (16) vars -> f_checkTab tipo idList . NEWLINE f_resetTab vars

    NEWLINE         shift and go to state 57


state 45

    (19) idList -> ID .
    (20) idList -> ID . COMMA idList

    NEWLINE         reduce using rule 19 (idList -> ID .)
    COMMA           shift and go to state 58


state 46

    (4) hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .

    DEF             reduce using rule 4 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    ID              reduce using rule 4 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    BOOL            reduce using rule 4 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    INT             reduce using rule 4 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    FLOAT           reduce using rule 4 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    STRING          reduce using rule 4 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    IMAGE           reduce using rule 4 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    $end            reduce using rule 4 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)


state 47

    (13) pwmDeclaration -> PWM . f_saveType pinList NEWLINE
    (18) f_saveType -> .

    C_INT           reduce using rule 18 (f_saveType -> .)

    f_saveType                     shift and go to state 59

state 48

    (12) pwmDeclaration -> empty .

    DEF             reduce using rule 12 (pwmDeclaration -> empty .)
    ID              reduce using rule 12 (pwmDeclaration -> empty .)
    BOOL            reduce using rule 12 (pwmDeclaration -> empty .)
    INT             reduce using rule 12 (pwmDeclaration -> empty .)
    FLOAT           reduce using rule 12 (pwmDeclaration -> empty .)
    STRING          reduce using rule 12 (pwmDeclaration -> empty .)
    IMAGE           reduce using rule 12 (pwmDeclaration -> empty .)
    $end            reduce using rule 12 (pwmDeclaration -> empty .)


state 49

    (11) outputsDeclaration -> OUTPUT f_saveType . pinList NEWLINE
    (14) pinList -> . C_INT COLON ID
    (15) pinList -> . C_INT COLON ID COMMA pinList

    C_INT           shift and go to state 51

    pinList                        shift and go to state 60

state 50

    (9) inputsDeclaration -> INPUT f_saveType pinList . NEWLINE

    NEWLINE         shift and go to state 61


state 51

    (14) pinList -> C_INT . COLON ID
    (15) pinList -> C_INT . COLON ID COMMA pinList

    COLON           shift and go to state 62


state 52

    (6) camDeclaration -> CAM WEBCAM COLON ID NEWLINE .

    INPUT           reduce using rule 6 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    OUTPUT          reduce using rule 6 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    PWM             reduce using rule 6 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    DEF             reduce using rule 6 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    ID              reduce using rule 6 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    BOOL            reduce using rule 6 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    INT             reduce using rule 6 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    FLOAT           reduce using rule 6 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    STRING          reduce using rule 6 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    IMAGE           reduce using rule 6 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    $end            reduce using rule 6 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)


state 53

    (7) camDeclaration -> CAM PICAM COLON ID NEWLINE .

    INPUT           reduce using rule 7 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    OUTPUT          reduce using rule 7 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    PWM             reduce using rule 7 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    DEF             reduce using rule 7 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    ID              reduce using rule 7 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    BOOL            reduce using rule 7 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    INT             reduce using rule 7 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    FLOAT           reduce using rule 7 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    STRING          reduce using rule 7 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    IMAGE           reduce using rule 7 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    $end            reduce using rule 7 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)


state 54

    (38) assign -> f_checkTab ID f_checkID . EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual assign

    EQUAL           shift and go to state 63


state 55

    (28) functions -> DEF VOID . ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (29) functions -> DEF VOID . ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (30) functions -> DEF VOID . MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (31) functions -> DEF VOID . MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    ID              shift and go to state 65
    MAIN            shift and go to state 64


state 56

    (26) functions -> DEF tipo . ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (27) functions -> DEF tipo . ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    ID              shift and go to state 66


state 57

    (16) vars -> f_checkTab tipo idList NEWLINE . f_resetTab vars
    (52) f_resetTab -> .

    BOOL            reduce using rule 52 (f_resetTab -> .)
    INT             reduce using rule 52 (f_resetTab -> .)
    FLOAT           reduce using rule 52 (f_resetTab -> .)
    STRING          reduce using rule 52 (f_resetTab -> .)
    IMAGE           reduce using rule 52 (f_resetTab -> .)
    DEF             reduce using rule 52 (f_resetTab -> .)
    ID              reduce using rule 52 (f_resetTab -> .)
    $end            reduce using rule 52 (f_resetTab -> .)
    TAB             reduce using rule 52 (f_resetTab -> .)
    WHILE           reduce using rule 52 (f_resetTab -> .)
    ELSE            reduce using rule 52 (f_resetTab -> .)

    f_resetTab                     shift and go to state 67

state 58

    (20) idList -> ID COMMA . idList
    (19) idList -> . ID
    (20) idList -> . ID COMMA idList

    ID              shift and go to state 45

    idList                         shift and go to state 68

state 59

    (13) pwmDeclaration -> PWM f_saveType . pinList NEWLINE
    (14) pinList -> . C_INT COLON ID
    (15) pinList -> . C_INT COLON ID COMMA pinList

    C_INT           shift and go to state 51

    pinList                        shift and go to state 69

state 60

    (11) outputsDeclaration -> OUTPUT f_saveType pinList . NEWLINE

    NEWLINE         shift and go to state 70


state 61

    (9) inputsDeclaration -> INPUT f_saveType pinList NEWLINE .

    OUTPUT          reduce using rule 9 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    PWM             reduce using rule 9 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    DEF             reduce using rule 9 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    ID              reduce using rule 9 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    BOOL            reduce using rule 9 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    INT             reduce using rule 9 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    FLOAT           reduce using rule 9 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    STRING          reduce using rule 9 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    IMAGE           reduce using rule 9 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    $end            reduce using rule 9 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)


state 62

    (14) pinList -> C_INT COLON . ID
    (15) pinList -> C_INT COLON . ID COMMA pinList

    ID              shift and go to state 71


state 63

    (38) assign -> f_checkTab ID f_checkID EQUAL . f_isAssign expression NEWLINE f_resetTab f_generateEqual assign
    (40) f_isAssign -> .

    LPAREN          reduce using rule 40 (f_isAssign -> .)
    ID              reduce using rule 40 (f_isAssign -> .)
    C_BOOL          reduce using rule 40 (f_isAssign -> .)
    C_INT           reduce using rule 40 (f_isAssign -> .)
    C_FLOAT         reduce using rule 40 (f_isAssign -> .)
    C_STRING        reduce using rule 40 (f_isAssign -> .)

    f_isAssign                     shift and go to state 72

state 64

    (30) functions -> DEF VOID MAIN . f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (31) functions -> DEF VOID MAIN . f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (34) f_saveModule -> .

    LPAREN          reduce using rule 34 (f_saveModule -> .)

    f_saveModule                   shift and go to state 73

state 65

    (28) functions -> DEF VOID ID . f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (29) functions -> DEF VOID ID . f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (34) f_saveModule -> .

    LPAREN          reduce using rule 34 (f_saveModule -> .)

    f_saveModule                   shift and go to state 74

state 66

    (26) functions -> DEF tipo ID . f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (27) functions -> DEF tipo ID . f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (34) f_saveModule -> .

    LPAREN          reduce using rule 34 (f_saveModule -> .)

    f_saveModule                   shift and go to state 75

state 67

    (16) vars -> f_checkTab tipo idList NEWLINE f_resetTab . vars
    (16) vars -> . f_checkTab tipo idList NEWLINE f_resetTab vars
    (17) vars -> . empty
    (53) f_checkTab -> .
    (3) empty -> .

    BOOL            reduce using rule 53 (f_checkTab -> .)
    INT             reduce using rule 53 (f_checkTab -> .)
    FLOAT           reduce using rule 53 (f_checkTab -> .)
    STRING          reduce using rule 53 (f_checkTab -> .)
    IMAGE           reduce using rule 53 (f_checkTab -> .)
    DEF             reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)
    TAB             reduce using rule 3 (empty -> .)
    WHILE           reduce using rule 3 (empty -> .)
    ELSE            reduce using rule 3 (empty -> .)

    vars                           shift and go to state 76
    f_checkTab                     shift and go to state 12
    empty                          shift and go to state 13

state 68

    (20) idList -> ID COMMA idList .

    NEWLINE         reduce using rule 20 (idList -> ID COMMA idList .)


state 69

    (13) pwmDeclaration -> PWM f_saveType pinList . NEWLINE

    NEWLINE         shift and go to state 77


state 70

    (11) outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .

    PWM             reduce using rule 11 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    DEF             reduce using rule 11 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    ID              reduce using rule 11 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    BOOL            reduce using rule 11 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    INT             reduce using rule 11 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    FLOAT           reduce using rule 11 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    STRING          reduce using rule 11 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    IMAGE           reduce using rule 11 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    $end            reduce using rule 11 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)


state 71

    (14) pinList -> C_INT COLON ID .
    (15) pinList -> C_INT COLON ID . COMMA pinList

    NEWLINE         reduce using rule 14 (pinList -> C_INT COLON ID .)
    COMMA           shift and go to state 78


state 72

    (38) assign -> f_checkTab ID f_checkID EQUAL f_isAssign . expression NEWLINE f_resetTab f_generateEqual assign
    (76) expression -> . exp
    (77) expression -> . exp compareToken exp f_popComparation
    (85) exp -> . term moreTerms
    (90) term -> . factor moreFactors
    (95) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (96) factor -> . cvar
    (97) factor -> . funct
    (101) cvar -> . ID f_isID
    (102) cvar -> . C_BOOL f_isConst
    (103) cvar -> . C_INT f_isConst
    (104) cvar -> . C_FLOAT f_isConst
    (105) cvar -> . C_STRING f_isConst
    (70) funct -> . ID f_checkProc LPAREN RPAREN
    (71) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 84
    ID              shift and go to state 86
    C_BOOL          shift and go to state 82
    C_INT           shift and go to state 85
    C_FLOAT         shift and go to state 80
    C_STRING        shift and go to state 87

    cvar                           shift and go to state 79
    funct                          shift and go to state 81
    factor                         shift and go to state 83
    term                           shift and go to state 88
    exp                            shift and go to state 89
    expression                     shift and go to state 90

state 73

    (30) functions -> DEF VOID MAIN f_saveModule . LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (31) functions -> DEF VOID MAIN f_saveModule . LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    LPAREN          shift and go to state 91


state 74

    (28) functions -> DEF VOID ID f_saveModule . LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (29) functions -> DEF VOID ID f_saveModule . LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    LPAREN          shift and go to state 92


state 75

    (26) functions -> DEF tipo ID f_saveModule . LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (27) functions -> DEF tipo ID f_saveModule . LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    LPAREN          shift and go to state 93


state 76

    (16) vars -> f_checkTab tipo idList NEWLINE f_resetTab vars .

    TAB             reduce using rule 16 (vars -> f_checkTab tipo idList NEWLINE f_resetTab vars .)
    DEF             reduce using rule 16 (vars -> f_checkTab tipo idList NEWLINE f_resetTab vars .)
    $end            reduce using rule 16 (vars -> f_checkTab tipo idList NEWLINE f_resetTab vars .)
    WHILE           reduce using rule 16 (vars -> f_checkTab tipo idList NEWLINE f_resetTab vars .)
    ELSE            reduce using rule 16 (vars -> f_checkTab tipo idList NEWLINE f_resetTab vars .)
    ID              reduce using rule 16 (vars -> f_checkTab tipo idList NEWLINE f_resetTab vars .)


state 77

    (13) pwmDeclaration -> PWM f_saveType pinList NEWLINE .

    DEF             reduce using rule 13 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)
    ID              reduce using rule 13 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)
    BOOL            reduce using rule 13 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)
    INT             reduce using rule 13 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)
    FLOAT           reduce using rule 13 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)
    STRING          reduce using rule 13 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)
    IMAGE           reduce using rule 13 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)
    $end            reduce using rule 13 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)


state 78

    (15) pinList -> C_INT COLON ID COMMA . pinList
    (14) pinList -> . C_INT COLON ID
    (15) pinList -> . C_INT COLON ID COMMA pinList

    C_INT           shift and go to state 51

    pinList                        shift and go to state 94

state 79

    (96) factor -> cvar .

    DIVIDE          reduce using rule 96 (factor -> cvar .)
    TIMES           reduce using rule 96 (factor -> cvar .)
    MOD             reduce using rule 96 (factor -> cvar .)
    PLUS            reduce using rule 96 (factor -> cvar .)
    MINUS           reduce using rule 96 (factor -> cvar .)
    GREATER_THAN    reduce using rule 96 (factor -> cvar .)
    LESS_THAN       reduce using rule 96 (factor -> cvar .)
    LESS_EQUAL_THAN reduce using rule 96 (factor -> cvar .)
    GREATER_EQUAL_THAN reduce using rule 96 (factor -> cvar .)
    NOT_EQUAL_THAN  reduce using rule 96 (factor -> cvar .)
    SAME_AS         reduce using rule 96 (factor -> cvar .)
    NEWLINE         reduce using rule 96 (factor -> cvar .)
    RPAREN          reduce using rule 96 (factor -> cvar .)
    COMMA           reduce using rule 96 (factor -> cvar .)
    COLON           reduce using rule 96 (factor -> cvar .)


state 80

    (104) cvar -> C_FLOAT . f_isConst
    (107) f_isConst -> .

    DIVIDE          reduce using rule 107 (f_isConst -> .)
    TIMES           reduce using rule 107 (f_isConst -> .)
    MOD             reduce using rule 107 (f_isConst -> .)
    PLUS            reduce using rule 107 (f_isConst -> .)
    MINUS           reduce using rule 107 (f_isConst -> .)
    GREATER_THAN    reduce using rule 107 (f_isConst -> .)
    LESS_THAN       reduce using rule 107 (f_isConst -> .)
    LESS_EQUAL_THAN reduce using rule 107 (f_isConst -> .)
    GREATER_EQUAL_THAN reduce using rule 107 (f_isConst -> .)
    NOT_EQUAL_THAN  reduce using rule 107 (f_isConst -> .)
    SAME_AS         reduce using rule 107 (f_isConst -> .)
    NEWLINE         reduce using rule 107 (f_isConst -> .)
    RPAREN          reduce using rule 107 (f_isConst -> .)
    COMMA           reduce using rule 107 (f_isConst -> .)
    COLON           reduce using rule 107 (f_isConst -> .)

    f_isConst                      shift and go to state 95

state 81

    (97) factor -> funct .

    DIVIDE          reduce using rule 97 (factor -> funct .)
    TIMES           reduce using rule 97 (factor -> funct .)
    MOD             reduce using rule 97 (factor -> funct .)
    PLUS            reduce using rule 97 (factor -> funct .)
    MINUS           reduce using rule 97 (factor -> funct .)
    GREATER_THAN    reduce using rule 97 (factor -> funct .)
    LESS_THAN       reduce using rule 97 (factor -> funct .)
    LESS_EQUAL_THAN reduce using rule 97 (factor -> funct .)
    GREATER_EQUAL_THAN reduce using rule 97 (factor -> funct .)
    NOT_EQUAL_THAN  reduce using rule 97 (factor -> funct .)
    SAME_AS         reduce using rule 97 (factor -> funct .)
    NEWLINE         reduce using rule 97 (factor -> funct .)
    RPAREN          reduce using rule 97 (factor -> funct .)
    COMMA           reduce using rule 97 (factor -> funct .)
    COLON           reduce using rule 97 (factor -> funct .)


state 82

    (102) cvar -> C_BOOL . f_isConst
    (107) f_isConst -> .

    DIVIDE          reduce using rule 107 (f_isConst -> .)
    TIMES           reduce using rule 107 (f_isConst -> .)
    MOD             reduce using rule 107 (f_isConst -> .)
    PLUS            reduce using rule 107 (f_isConst -> .)
    MINUS           reduce using rule 107 (f_isConst -> .)
    GREATER_THAN    reduce using rule 107 (f_isConst -> .)
    LESS_THAN       reduce using rule 107 (f_isConst -> .)
    LESS_EQUAL_THAN reduce using rule 107 (f_isConst -> .)
    GREATER_EQUAL_THAN reduce using rule 107 (f_isConst -> .)
    NOT_EQUAL_THAN  reduce using rule 107 (f_isConst -> .)
    SAME_AS         reduce using rule 107 (f_isConst -> .)
    NEWLINE         reduce using rule 107 (f_isConst -> .)
    RPAREN          reduce using rule 107 (f_isConst -> .)
    COMMA           reduce using rule 107 (f_isConst -> .)
    COLON           reduce using rule 107 (f_isConst -> .)

    f_isConst                      shift and go to state 96

state 83

    (90) term -> factor . moreFactors
    (91) moreFactors -> . empty
    (92) moreFactors -> . DIVIDE f_pushOperator factor f_popFactor moreFactors
    (93) moreFactors -> . TIMES f_pushOperator factor f_popFactor moreFactors
    (94) moreFactors -> . MOD f_pushOperator factor f_popFactor moreFactors
    (3) empty -> .

    DIVIDE          shift and go to state 98
    TIMES           shift and go to state 99
    MOD             shift and go to state 101
    PLUS            reduce using rule 3 (empty -> .)
    MINUS           reduce using rule 3 (empty -> .)
    GREATER_THAN    reduce using rule 3 (empty -> .)
    LESS_THAN       reduce using rule 3 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 3 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 3 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 3 (empty -> .)
    SAME_AS         reduce using rule 3 (empty -> .)
    NEWLINE         reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    COLON           reduce using rule 3 (empty -> .)

    moreFactors                    shift and go to state 97
    empty                          shift and go to state 100

state 84

    (95) factor -> LPAREN . f_pushOperator expression RPAREN f_popOperator
    (98) f_pushOperator -> .

    LPAREN          reduce using rule 98 (f_pushOperator -> .)
    ID              reduce using rule 98 (f_pushOperator -> .)
    C_BOOL          reduce using rule 98 (f_pushOperator -> .)
    C_INT           reduce using rule 98 (f_pushOperator -> .)
    C_FLOAT         reduce using rule 98 (f_pushOperator -> .)
    C_STRING        reduce using rule 98 (f_pushOperator -> .)

    f_pushOperator                 shift and go to state 102

state 85

    (103) cvar -> C_INT . f_isConst
    (107) f_isConst -> .

    DIVIDE          reduce using rule 107 (f_isConst -> .)
    TIMES           reduce using rule 107 (f_isConst -> .)
    MOD             reduce using rule 107 (f_isConst -> .)
    PLUS            reduce using rule 107 (f_isConst -> .)
    MINUS           reduce using rule 107 (f_isConst -> .)
    GREATER_THAN    reduce using rule 107 (f_isConst -> .)
    LESS_THAN       reduce using rule 107 (f_isConst -> .)
    LESS_EQUAL_THAN reduce using rule 107 (f_isConst -> .)
    GREATER_EQUAL_THAN reduce using rule 107 (f_isConst -> .)
    NOT_EQUAL_THAN  reduce using rule 107 (f_isConst -> .)
    SAME_AS         reduce using rule 107 (f_isConst -> .)
    NEWLINE         reduce using rule 107 (f_isConst -> .)
    RPAREN          reduce using rule 107 (f_isConst -> .)
    COMMA           reduce using rule 107 (f_isConst -> .)
    COLON           reduce using rule 107 (f_isConst -> .)

    f_isConst                      shift and go to state 103

state 86

    (101) cvar -> ID . f_isID
    (70) funct -> ID . f_checkProc LPAREN RPAREN
    (71) funct -> ID . f_checkProc LPAREN expression f_genParam expressionList RPAREN
    (106) f_isID -> .
    (72) f_checkProc -> .

    DIVIDE          reduce using rule 106 (f_isID -> .)
    TIMES           reduce using rule 106 (f_isID -> .)
    MOD             reduce using rule 106 (f_isID -> .)
    PLUS            reduce using rule 106 (f_isID -> .)
    MINUS           reduce using rule 106 (f_isID -> .)
    GREATER_THAN    reduce using rule 106 (f_isID -> .)
    LESS_THAN       reduce using rule 106 (f_isID -> .)
    LESS_EQUAL_THAN reduce using rule 106 (f_isID -> .)
    GREATER_EQUAL_THAN reduce using rule 106 (f_isID -> .)
    NOT_EQUAL_THAN  reduce using rule 106 (f_isID -> .)
    SAME_AS         reduce using rule 106 (f_isID -> .)
    NEWLINE         reduce using rule 106 (f_isID -> .)
    RPAREN          reduce using rule 106 (f_isID -> .)
    COMMA           reduce using rule 106 (f_isID -> .)
    COLON           reduce using rule 106 (f_isID -> .)
    LPAREN          reduce using rule 72 (f_checkProc -> .)

    f_checkProc                    shift and go to state 104
    f_isID                         shift and go to state 105

state 87

    (105) cvar -> C_STRING . f_isConst
    (107) f_isConst -> .

    DIVIDE          reduce using rule 107 (f_isConst -> .)
    TIMES           reduce using rule 107 (f_isConst -> .)
    MOD             reduce using rule 107 (f_isConst -> .)
    PLUS            reduce using rule 107 (f_isConst -> .)
    MINUS           reduce using rule 107 (f_isConst -> .)
    GREATER_THAN    reduce using rule 107 (f_isConst -> .)
    LESS_THAN       reduce using rule 107 (f_isConst -> .)
    LESS_EQUAL_THAN reduce using rule 107 (f_isConst -> .)
    GREATER_EQUAL_THAN reduce using rule 107 (f_isConst -> .)
    NOT_EQUAL_THAN  reduce using rule 107 (f_isConst -> .)
    SAME_AS         reduce using rule 107 (f_isConst -> .)
    NEWLINE         reduce using rule 107 (f_isConst -> .)
    RPAREN          reduce using rule 107 (f_isConst -> .)
    COMMA           reduce using rule 107 (f_isConst -> .)
    COLON           reduce using rule 107 (f_isConst -> .)

    f_isConst                      shift and go to state 106

state 88

    (85) exp -> term . moreTerms
    (86) moreTerms -> . empty
    (87) moreTerms -> . PLUS f_pushOperator term f_popTerm moreTerms
    (88) moreTerms -> . MINUS f_pushOperator term f_popTerm moreTerms
    (3) empty -> .

    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    GREATER_THAN    reduce using rule 3 (empty -> .)
    LESS_THAN       reduce using rule 3 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 3 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 3 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 3 (empty -> .)
    SAME_AS         reduce using rule 3 (empty -> .)
    NEWLINE         reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    COLON           reduce using rule 3 (empty -> .)

    moreTerms                      shift and go to state 107
    empty                          shift and go to state 110

state 89

    (76) expression -> exp .
    (77) expression -> exp . compareToken exp f_popComparation
    (79) compareToken -> . GREATER_THAN
    (80) compareToken -> . LESS_THAN
    (81) compareToken -> . LESS_EQUAL_THAN
    (82) compareToken -> . GREATER_EQUAL_THAN
    (83) compareToken -> . NOT_EQUAL_THAN
    (84) compareToken -> . SAME_AS

    COLON           reduce using rule 76 (expression -> exp .)
    NEWLINE         reduce using rule 76 (expression -> exp .)
    RPAREN          reduce using rule 76 (expression -> exp .)
    COMMA           reduce using rule 76 (expression -> exp .)
    GREATER_THAN    shift and go to state 116
    LESS_THAN       shift and go to state 117
    LESS_EQUAL_THAN shift and go to state 113
    GREATER_EQUAL_THAN shift and go to state 112
    NOT_EQUAL_THAN  shift and go to state 115
    SAME_AS         shift and go to state 114

    compareToken                   shift and go to state 111

state 90

    (38) assign -> f_checkTab ID f_checkID EQUAL f_isAssign expression . NEWLINE f_resetTab f_generateEqual assign

    NEWLINE         shift and go to state 118


state 91

    (30) functions -> DEF VOID MAIN f_saveModule LPAREN . RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (31) functions -> DEF VOID MAIN f_saveModule LPAREN . tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (21) tipo -> . BOOL f_saveType
    (22) tipo -> . INT f_saveType
    (23) tipo -> . FLOAT f_saveType
    (24) tipo -> . STRING f_saveType
    (25) tipo -> . IMAGE f_saveType

    RPAREN          shift and go to state 119
    BOOL            shift and go to state 25
    INT             shift and go to state 24
    FLOAT           shift and go to state 23
    STRING          shift and go to state 26
    IMAGE           shift and go to state 27

    tipo                           shift and go to state 120

state 92

    (28) functions -> DEF VOID ID f_saveModule LPAREN . RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (29) functions -> DEF VOID ID f_saveModule LPAREN . tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (21) tipo -> . BOOL f_saveType
    (22) tipo -> . INT f_saveType
    (23) tipo -> . FLOAT f_saveType
    (24) tipo -> . STRING f_saveType
    (25) tipo -> . IMAGE f_saveType

    RPAREN          shift and go to state 121
    BOOL            shift and go to state 25
    INT             shift and go to state 24
    FLOAT           shift and go to state 23
    STRING          shift and go to state 26
    IMAGE           shift and go to state 27

    tipo                           shift and go to state 122

state 93

    (26) functions -> DEF tipo ID f_saveModule LPAREN . RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (27) functions -> DEF tipo ID f_saveModule LPAREN . tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (21) tipo -> . BOOL f_saveType
    (22) tipo -> . INT f_saveType
    (23) tipo -> . FLOAT f_saveType
    (24) tipo -> . STRING f_saveType
    (25) tipo -> . IMAGE f_saveType

    RPAREN          shift and go to state 123
    BOOL            shift and go to state 25
    INT             shift and go to state 24
    FLOAT           shift and go to state 23
    STRING          shift and go to state 26
    IMAGE           shift and go to state 27

    tipo                           shift and go to state 124

state 94

    (15) pinList -> C_INT COLON ID COMMA pinList .

    NEWLINE         reduce using rule 15 (pinList -> C_INT COLON ID COMMA pinList .)


state 95

    (104) cvar -> C_FLOAT f_isConst .

    DIVIDE          reduce using rule 104 (cvar -> C_FLOAT f_isConst .)
    TIMES           reduce using rule 104 (cvar -> C_FLOAT f_isConst .)
    MOD             reduce using rule 104 (cvar -> C_FLOAT f_isConst .)
    PLUS            reduce using rule 104 (cvar -> C_FLOAT f_isConst .)
    MINUS           reduce using rule 104 (cvar -> C_FLOAT f_isConst .)
    GREATER_THAN    reduce using rule 104 (cvar -> C_FLOAT f_isConst .)
    LESS_THAN       reduce using rule 104 (cvar -> C_FLOAT f_isConst .)
    LESS_EQUAL_THAN reduce using rule 104 (cvar -> C_FLOAT f_isConst .)
    GREATER_EQUAL_THAN reduce using rule 104 (cvar -> C_FLOAT f_isConst .)
    NOT_EQUAL_THAN  reduce using rule 104 (cvar -> C_FLOAT f_isConst .)
    SAME_AS         reduce using rule 104 (cvar -> C_FLOAT f_isConst .)
    COMMA           reduce using rule 104 (cvar -> C_FLOAT f_isConst .)
    RPAREN          reduce using rule 104 (cvar -> C_FLOAT f_isConst .)
    NEWLINE         reduce using rule 104 (cvar -> C_FLOAT f_isConst .)
    COLON           reduce using rule 104 (cvar -> C_FLOAT f_isConst .)


state 96

    (102) cvar -> C_BOOL f_isConst .

    DIVIDE          reduce using rule 102 (cvar -> C_BOOL f_isConst .)
    TIMES           reduce using rule 102 (cvar -> C_BOOL f_isConst .)
    MOD             reduce using rule 102 (cvar -> C_BOOL f_isConst .)
    PLUS            reduce using rule 102 (cvar -> C_BOOL f_isConst .)
    MINUS           reduce using rule 102 (cvar -> C_BOOL f_isConst .)
    GREATER_THAN    reduce using rule 102 (cvar -> C_BOOL f_isConst .)
    LESS_THAN       reduce using rule 102 (cvar -> C_BOOL f_isConst .)
    LESS_EQUAL_THAN reduce using rule 102 (cvar -> C_BOOL f_isConst .)
    GREATER_EQUAL_THAN reduce using rule 102 (cvar -> C_BOOL f_isConst .)
    NOT_EQUAL_THAN  reduce using rule 102 (cvar -> C_BOOL f_isConst .)
    SAME_AS         reduce using rule 102 (cvar -> C_BOOL f_isConst .)
    COMMA           reduce using rule 102 (cvar -> C_BOOL f_isConst .)
    RPAREN          reduce using rule 102 (cvar -> C_BOOL f_isConst .)
    NEWLINE         reduce using rule 102 (cvar -> C_BOOL f_isConst .)
    COLON           reduce using rule 102 (cvar -> C_BOOL f_isConst .)


state 97

    (90) term -> factor moreFactors .

    PLUS            reduce using rule 90 (term -> factor moreFactors .)
    MINUS           reduce using rule 90 (term -> factor moreFactors .)
    NEWLINE         reduce using rule 90 (term -> factor moreFactors .)
    RPAREN          reduce using rule 90 (term -> factor moreFactors .)
    COMMA           reduce using rule 90 (term -> factor moreFactors .)
    COLON           reduce using rule 90 (term -> factor moreFactors .)
    GREATER_THAN    reduce using rule 90 (term -> factor moreFactors .)
    LESS_THAN       reduce using rule 90 (term -> factor moreFactors .)
    LESS_EQUAL_THAN reduce using rule 90 (term -> factor moreFactors .)
    GREATER_EQUAL_THAN reduce using rule 90 (term -> factor moreFactors .)
    NOT_EQUAL_THAN  reduce using rule 90 (term -> factor moreFactors .)
    SAME_AS         reduce using rule 90 (term -> factor moreFactors .)


state 98

    (92) moreFactors -> DIVIDE . f_pushOperator factor f_popFactor moreFactors
    (98) f_pushOperator -> .

    LPAREN          reduce using rule 98 (f_pushOperator -> .)
    ID              reduce using rule 98 (f_pushOperator -> .)
    C_BOOL          reduce using rule 98 (f_pushOperator -> .)
    C_INT           reduce using rule 98 (f_pushOperator -> .)
    C_FLOAT         reduce using rule 98 (f_pushOperator -> .)
    C_STRING        reduce using rule 98 (f_pushOperator -> .)

    f_pushOperator                 shift and go to state 125

state 99

    (93) moreFactors -> TIMES . f_pushOperator factor f_popFactor moreFactors
    (98) f_pushOperator -> .

    LPAREN          reduce using rule 98 (f_pushOperator -> .)
    ID              reduce using rule 98 (f_pushOperator -> .)
    C_BOOL          reduce using rule 98 (f_pushOperator -> .)
    C_INT           reduce using rule 98 (f_pushOperator -> .)
    C_FLOAT         reduce using rule 98 (f_pushOperator -> .)
    C_STRING        reduce using rule 98 (f_pushOperator -> .)

    f_pushOperator                 shift and go to state 126

state 100

    (91) moreFactors -> empty .

    PLUS            reduce using rule 91 (moreFactors -> empty .)
    MINUS           reduce using rule 91 (moreFactors -> empty .)
    GREATER_THAN    reduce using rule 91 (moreFactors -> empty .)
    LESS_THAN       reduce using rule 91 (moreFactors -> empty .)
    LESS_EQUAL_THAN reduce using rule 91 (moreFactors -> empty .)
    GREATER_EQUAL_THAN reduce using rule 91 (moreFactors -> empty .)
    NOT_EQUAL_THAN  reduce using rule 91 (moreFactors -> empty .)
    SAME_AS         reduce using rule 91 (moreFactors -> empty .)
    NEWLINE         reduce using rule 91 (moreFactors -> empty .)
    RPAREN          reduce using rule 91 (moreFactors -> empty .)
    COMMA           reduce using rule 91 (moreFactors -> empty .)
    COLON           reduce using rule 91 (moreFactors -> empty .)


state 101

    (94) moreFactors -> MOD . f_pushOperator factor f_popFactor moreFactors
    (98) f_pushOperator -> .

    LPAREN          reduce using rule 98 (f_pushOperator -> .)
    ID              reduce using rule 98 (f_pushOperator -> .)
    C_BOOL          reduce using rule 98 (f_pushOperator -> .)
    C_INT           reduce using rule 98 (f_pushOperator -> .)
    C_FLOAT         reduce using rule 98 (f_pushOperator -> .)
    C_STRING        reduce using rule 98 (f_pushOperator -> .)

    f_pushOperator                 shift and go to state 127

state 102

    (95) factor -> LPAREN f_pushOperator . expression RPAREN f_popOperator
    (76) expression -> . exp
    (77) expression -> . exp compareToken exp f_popComparation
    (85) exp -> . term moreTerms
    (90) term -> . factor moreFactors
    (95) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (96) factor -> . cvar
    (97) factor -> . funct
    (101) cvar -> . ID f_isID
    (102) cvar -> . C_BOOL f_isConst
    (103) cvar -> . C_INT f_isConst
    (104) cvar -> . C_FLOAT f_isConst
    (105) cvar -> . C_STRING f_isConst
    (70) funct -> . ID f_checkProc LPAREN RPAREN
    (71) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 84
    ID              shift and go to state 86
    C_BOOL          shift and go to state 82
    C_INT           shift and go to state 85
    C_FLOAT         shift and go to state 80
    C_STRING        shift and go to state 87

    term                           shift and go to state 88
    funct                          shift and go to state 81
    exp                            shift and go to state 89
    factor                         shift and go to state 83
    cvar                           shift and go to state 79
    expression                     shift and go to state 128

state 103

    (103) cvar -> C_INT f_isConst .

    DIVIDE          reduce using rule 103 (cvar -> C_INT f_isConst .)
    TIMES           reduce using rule 103 (cvar -> C_INT f_isConst .)
    MOD             reduce using rule 103 (cvar -> C_INT f_isConst .)
    PLUS            reduce using rule 103 (cvar -> C_INT f_isConst .)
    MINUS           reduce using rule 103 (cvar -> C_INT f_isConst .)
    GREATER_THAN    reduce using rule 103 (cvar -> C_INT f_isConst .)
    LESS_THAN       reduce using rule 103 (cvar -> C_INT f_isConst .)
    LESS_EQUAL_THAN reduce using rule 103 (cvar -> C_INT f_isConst .)
    GREATER_EQUAL_THAN reduce using rule 103 (cvar -> C_INT f_isConst .)
    NOT_EQUAL_THAN  reduce using rule 103 (cvar -> C_INT f_isConst .)
    SAME_AS         reduce using rule 103 (cvar -> C_INT f_isConst .)
    COMMA           reduce using rule 103 (cvar -> C_INT f_isConst .)
    RPAREN          reduce using rule 103 (cvar -> C_INT f_isConst .)
    NEWLINE         reduce using rule 103 (cvar -> C_INT f_isConst .)
    COLON           reduce using rule 103 (cvar -> C_INT f_isConst .)


state 104

    (70) funct -> ID f_checkProc . LPAREN RPAREN
    (71) funct -> ID f_checkProc . LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 129


state 105

    (101) cvar -> ID f_isID .

    DIVIDE          reduce using rule 101 (cvar -> ID f_isID .)
    TIMES           reduce using rule 101 (cvar -> ID f_isID .)
    MOD             reduce using rule 101 (cvar -> ID f_isID .)
    PLUS            reduce using rule 101 (cvar -> ID f_isID .)
    MINUS           reduce using rule 101 (cvar -> ID f_isID .)
    GREATER_THAN    reduce using rule 101 (cvar -> ID f_isID .)
    LESS_THAN       reduce using rule 101 (cvar -> ID f_isID .)
    LESS_EQUAL_THAN reduce using rule 101 (cvar -> ID f_isID .)
    GREATER_EQUAL_THAN reduce using rule 101 (cvar -> ID f_isID .)
    NOT_EQUAL_THAN  reduce using rule 101 (cvar -> ID f_isID .)
    SAME_AS         reduce using rule 101 (cvar -> ID f_isID .)
    COMMA           reduce using rule 101 (cvar -> ID f_isID .)
    RPAREN          reduce using rule 101 (cvar -> ID f_isID .)
    NEWLINE         reduce using rule 101 (cvar -> ID f_isID .)
    COLON           reduce using rule 101 (cvar -> ID f_isID .)


state 106

    (105) cvar -> C_STRING f_isConst .

    DIVIDE          reduce using rule 105 (cvar -> C_STRING f_isConst .)
    TIMES           reduce using rule 105 (cvar -> C_STRING f_isConst .)
    MOD             reduce using rule 105 (cvar -> C_STRING f_isConst .)
    PLUS            reduce using rule 105 (cvar -> C_STRING f_isConst .)
    MINUS           reduce using rule 105 (cvar -> C_STRING f_isConst .)
    GREATER_THAN    reduce using rule 105 (cvar -> C_STRING f_isConst .)
    LESS_THAN       reduce using rule 105 (cvar -> C_STRING f_isConst .)
    LESS_EQUAL_THAN reduce using rule 105 (cvar -> C_STRING f_isConst .)
    GREATER_EQUAL_THAN reduce using rule 105 (cvar -> C_STRING f_isConst .)
    NOT_EQUAL_THAN  reduce using rule 105 (cvar -> C_STRING f_isConst .)
    SAME_AS         reduce using rule 105 (cvar -> C_STRING f_isConst .)
    COMMA           reduce using rule 105 (cvar -> C_STRING f_isConst .)
    RPAREN          reduce using rule 105 (cvar -> C_STRING f_isConst .)
    NEWLINE         reduce using rule 105 (cvar -> C_STRING f_isConst .)
    COLON           reduce using rule 105 (cvar -> C_STRING f_isConst .)


state 107

    (85) exp -> term moreTerms .

    NEWLINE         reduce using rule 85 (exp -> term moreTerms .)
    RPAREN          reduce using rule 85 (exp -> term moreTerms .)
    COMMA           reduce using rule 85 (exp -> term moreTerms .)
    COLON           reduce using rule 85 (exp -> term moreTerms .)
    GREATER_THAN    reduce using rule 85 (exp -> term moreTerms .)
    LESS_THAN       reduce using rule 85 (exp -> term moreTerms .)
    LESS_EQUAL_THAN reduce using rule 85 (exp -> term moreTerms .)
    GREATER_EQUAL_THAN reduce using rule 85 (exp -> term moreTerms .)
    NOT_EQUAL_THAN  reduce using rule 85 (exp -> term moreTerms .)
    SAME_AS         reduce using rule 85 (exp -> term moreTerms .)


state 108

    (87) moreTerms -> PLUS . f_pushOperator term f_popTerm moreTerms
    (98) f_pushOperator -> .

    LPAREN          reduce using rule 98 (f_pushOperator -> .)
    ID              reduce using rule 98 (f_pushOperator -> .)
    C_BOOL          reduce using rule 98 (f_pushOperator -> .)
    C_INT           reduce using rule 98 (f_pushOperator -> .)
    C_FLOAT         reduce using rule 98 (f_pushOperator -> .)
    C_STRING        reduce using rule 98 (f_pushOperator -> .)

    f_pushOperator                 shift and go to state 130

state 109

    (88) moreTerms -> MINUS . f_pushOperator term f_popTerm moreTerms
    (98) f_pushOperator -> .

    LPAREN          reduce using rule 98 (f_pushOperator -> .)
    ID              reduce using rule 98 (f_pushOperator -> .)
    C_BOOL          reduce using rule 98 (f_pushOperator -> .)
    C_INT           reduce using rule 98 (f_pushOperator -> .)
    C_FLOAT         reduce using rule 98 (f_pushOperator -> .)
    C_STRING        reduce using rule 98 (f_pushOperator -> .)

    f_pushOperator                 shift and go to state 131

state 110

    (86) moreTerms -> empty .

    GREATER_THAN    reduce using rule 86 (moreTerms -> empty .)
    LESS_THAN       reduce using rule 86 (moreTerms -> empty .)
    LESS_EQUAL_THAN reduce using rule 86 (moreTerms -> empty .)
    GREATER_EQUAL_THAN reduce using rule 86 (moreTerms -> empty .)
    NOT_EQUAL_THAN  reduce using rule 86 (moreTerms -> empty .)
    SAME_AS         reduce using rule 86 (moreTerms -> empty .)
    NEWLINE         reduce using rule 86 (moreTerms -> empty .)
    RPAREN          reduce using rule 86 (moreTerms -> empty .)
    COMMA           reduce using rule 86 (moreTerms -> empty .)
    COLON           reduce using rule 86 (moreTerms -> empty .)


state 111

    (77) expression -> exp compareToken . exp f_popComparation
    (85) exp -> . term moreTerms
    (90) term -> . factor moreFactors
    (95) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (96) factor -> . cvar
    (97) factor -> . funct
    (101) cvar -> . ID f_isID
    (102) cvar -> . C_BOOL f_isConst
    (103) cvar -> . C_INT f_isConst
    (104) cvar -> . C_FLOAT f_isConst
    (105) cvar -> . C_STRING f_isConst
    (70) funct -> . ID f_checkProc LPAREN RPAREN
    (71) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 84
    ID              shift and go to state 86
    C_BOOL          shift and go to state 82
    C_INT           shift and go to state 85
    C_FLOAT         shift and go to state 80
    C_STRING        shift and go to state 87

    term                           shift and go to state 88
    funct                          shift and go to state 81
    exp                            shift and go to state 132
    factor                         shift and go to state 83
    cvar                           shift and go to state 79

state 112

    (82) compareToken -> GREATER_EQUAL_THAN .

    LPAREN          reduce using rule 82 (compareToken -> GREATER_EQUAL_THAN .)
    ID              reduce using rule 82 (compareToken -> GREATER_EQUAL_THAN .)
    C_BOOL          reduce using rule 82 (compareToken -> GREATER_EQUAL_THAN .)
    C_INT           reduce using rule 82 (compareToken -> GREATER_EQUAL_THAN .)
    C_FLOAT         reduce using rule 82 (compareToken -> GREATER_EQUAL_THAN .)
    C_STRING        reduce using rule 82 (compareToken -> GREATER_EQUAL_THAN .)


state 113

    (81) compareToken -> LESS_EQUAL_THAN .

    LPAREN          reduce using rule 81 (compareToken -> LESS_EQUAL_THAN .)
    ID              reduce using rule 81 (compareToken -> LESS_EQUAL_THAN .)
    C_BOOL          reduce using rule 81 (compareToken -> LESS_EQUAL_THAN .)
    C_INT           reduce using rule 81 (compareToken -> LESS_EQUAL_THAN .)
    C_FLOAT         reduce using rule 81 (compareToken -> LESS_EQUAL_THAN .)
    C_STRING        reduce using rule 81 (compareToken -> LESS_EQUAL_THAN .)


state 114

    (84) compareToken -> SAME_AS .

    LPAREN          reduce using rule 84 (compareToken -> SAME_AS .)
    ID              reduce using rule 84 (compareToken -> SAME_AS .)
    C_BOOL          reduce using rule 84 (compareToken -> SAME_AS .)
    C_INT           reduce using rule 84 (compareToken -> SAME_AS .)
    C_FLOAT         reduce using rule 84 (compareToken -> SAME_AS .)
    C_STRING        reduce using rule 84 (compareToken -> SAME_AS .)


state 115

    (83) compareToken -> NOT_EQUAL_THAN .

    LPAREN          reduce using rule 83 (compareToken -> NOT_EQUAL_THAN .)
    ID              reduce using rule 83 (compareToken -> NOT_EQUAL_THAN .)
    C_BOOL          reduce using rule 83 (compareToken -> NOT_EQUAL_THAN .)
    C_INT           reduce using rule 83 (compareToken -> NOT_EQUAL_THAN .)
    C_FLOAT         reduce using rule 83 (compareToken -> NOT_EQUAL_THAN .)
    C_STRING        reduce using rule 83 (compareToken -> NOT_EQUAL_THAN .)


state 116

    (79) compareToken -> GREATER_THAN .

    LPAREN          reduce using rule 79 (compareToken -> GREATER_THAN .)
    ID              reduce using rule 79 (compareToken -> GREATER_THAN .)
    C_BOOL          reduce using rule 79 (compareToken -> GREATER_THAN .)
    C_INT           reduce using rule 79 (compareToken -> GREATER_THAN .)
    C_FLOAT         reduce using rule 79 (compareToken -> GREATER_THAN .)
    C_STRING        reduce using rule 79 (compareToken -> GREATER_THAN .)


state 117

    (80) compareToken -> LESS_THAN .

    LPAREN          reduce using rule 80 (compareToken -> LESS_THAN .)
    ID              reduce using rule 80 (compareToken -> LESS_THAN .)
    C_BOOL          reduce using rule 80 (compareToken -> LESS_THAN .)
    C_INT           reduce using rule 80 (compareToken -> LESS_THAN .)
    C_FLOAT         reduce using rule 80 (compareToken -> LESS_THAN .)
    C_STRING        reduce using rule 80 (compareToken -> LESS_THAN .)


state 118

    (38) assign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE . f_resetTab f_generateEqual assign
    (52) f_resetTab -> .

    ID              reduce using rule 52 (f_resetTab -> .)
    DEF             reduce using rule 52 (f_resetTab -> .)
    $end            reduce using rule 52 (f_resetTab -> .)
    TAB             reduce using rule 52 (f_resetTab -> .)
    WHILE           reduce using rule 52 (f_resetTab -> .)
    ELSE            reduce using rule 52 (f_resetTab -> .)

    f_resetTab                     shift and go to state 133

state 119

    (30) functions -> DEF VOID MAIN f_saveModule LPAREN RPAREN . COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    COLON           shift and go to state 134


state 120

    (31) functions -> DEF VOID MAIN f_saveModule LPAREN tipo . ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    ID              shift and go to state 135


state 121

    (28) functions -> DEF VOID ID f_saveModule LPAREN RPAREN . COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    COLON           shift and go to state 136


state 122

    (29) functions -> DEF VOID ID f_saveModule LPAREN tipo . ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    ID              shift and go to state 137


state 123

    (26) functions -> DEF tipo ID f_saveModule LPAREN RPAREN . COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    COLON           shift and go to state 138


state 124

    (27) functions -> DEF tipo ID f_saveModule LPAREN tipo . ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    ID              shift and go to state 139


state 125

    (92) moreFactors -> DIVIDE f_pushOperator . factor f_popFactor moreFactors
    (95) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (96) factor -> . cvar
    (97) factor -> . funct
    (101) cvar -> . ID f_isID
    (102) cvar -> . C_BOOL f_isConst
    (103) cvar -> . C_INT f_isConst
    (104) cvar -> . C_FLOAT f_isConst
    (105) cvar -> . C_STRING f_isConst
    (70) funct -> . ID f_checkProc LPAREN RPAREN
    (71) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 84
    ID              shift and go to state 86
    C_BOOL          shift and go to state 82
    C_INT           shift and go to state 85
    C_FLOAT         shift and go to state 80
    C_STRING        shift and go to state 87

    funct                          shift and go to state 81
    cvar                           shift and go to state 79
    factor                         shift and go to state 140

state 126

    (93) moreFactors -> TIMES f_pushOperator . factor f_popFactor moreFactors
    (95) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (96) factor -> . cvar
    (97) factor -> . funct
    (101) cvar -> . ID f_isID
    (102) cvar -> . C_BOOL f_isConst
    (103) cvar -> . C_INT f_isConst
    (104) cvar -> . C_FLOAT f_isConst
    (105) cvar -> . C_STRING f_isConst
    (70) funct -> . ID f_checkProc LPAREN RPAREN
    (71) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 84
    ID              shift and go to state 86
    C_BOOL          shift and go to state 82
    C_INT           shift and go to state 85
    C_FLOAT         shift and go to state 80
    C_STRING        shift and go to state 87

    funct                          shift and go to state 81
    cvar                           shift and go to state 79
    factor                         shift and go to state 141

state 127

    (94) moreFactors -> MOD f_pushOperator . factor f_popFactor moreFactors
    (95) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (96) factor -> . cvar
    (97) factor -> . funct
    (101) cvar -> . ID f_isID
    (102) cvar -> . C_BOOL f_isConst
    (103) cvar -> . C_INT f_isConst
    (104) cvar -> . C_FLOAT f_isConst
    (105) cvar -> . C_STRING f_isConst
    (70) funct -> . ID f_checkProc LPAREN RPAREN
    (71) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 84
    ID              shift and go to state 86
    C_BOOL          shift and go to state 82
    C_INT           shift and go to state 85
    C_FLOAT         shift and go to state 80
    C_STRING        shift and go to state 87

    funct                          shift and go to state 81
    cvar                           shift and go to state 79
    factor                         shift and go to state 142

state 128

    (95) factor -> LPAREN f_pushOperator expression . RPAREN f_popOperator

    RPAREN          shift and go to state 143


state 129

    (70) funct -> ID f_checkProc LPAREN . RPAREN
    (71) funct -> ID f_checkProc LPAREN . expression f_genParam expressionList RPAREN
    (76) expression -> . exp
    (77) expression -> . exp compareToken exp f_popComparation
    (85) exp -> . term moreTerms
    (90) term -> . factor moreFactors
    (95) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (96) factor -> . cvar
    (97) factor -> . funct
    (101) cvar -> . ID f_isID
    (102) cvar -> . C_BOOL f_isConst
    (103) cvar -> . C_INT f_isConst
    (104) cvar -> . C_FLOAT f_isConst
    (105) cvar -> . C_STRING f_isConst
    (70) funct -> . ID f_checkProc LPAREN RPAREN
    (71) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    RPAREN          shift and go to state 144
    LPAREN          shift and go to state 84
    ID              shift and go to state 86
    C_BOOL          shift and go to state 82
    C_INT           shift and go to state 85
    C_FLOAT         shift and go to state 80
    C_STRING        shift and go to state 87

    term                           shift and go to state 88
    funct                          shift and go to state 81
    exp                            shift and go to state 89
    factor                         shift and go to state 83
    cvar                           shift and go to state 79
    expression                     shift and go to state 145

state 130

    (87) moreTerms -> PLUS f_pushOperator . term f_popTerm moreTerms
    (90) term -> . factor moreFactors
    (95) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (96) factor -> . cvar
    (97) factor -> . funct
    (101) cvar -> . ID f_isID
    (102) cvar -> . C_BOOL f_isConst
    (103) cvar -> . C_INT f_isConst
    (104) cvar -> . C_FLOAT f_isConst
    (105) cvar -> . C_STRING f_isConst
    (70) funct -> . ID f_checkProc LPAREN RPAREN
    (71) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 84
    ID              shift and go to state 86
    C_BOOL          shift and go to state 82
    C_INT           shift and go to state 85
    C_FLOAT         shift and go to state 80
    C_STRING        shift and go to state 87

    term                           shift and go to state 146
    funct                          shift and go to state 81
    factor                         shift and go to state 83
    cvar                           shift and go to state 79

state 131

    (88) moreTerms -> MINUS f_pushOperator . term f_popTerm moreTerms
    (90) term -> . factor moreFactors
    (95) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (96) factor -> . cvar
    (97) factor -> . funct
    (101) cvar -> . ID f_isID
    (102) cvar -> . C_BOOL f_isConst
    (103) cvar -> . C_INT f_isConst
    (104) cvar -> . C_FLOAT f_isConst
    (105) cvar -> . C_STRING f_isConst
    (70) funct -> . ID f_checkProc LPAREN RPAREN
    (71) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 84
    ID              shift and go to state 86
    C_BOOL          shift and go to state 82
    C_INT           shift and go to state 85
    C_FLOAT         shift and go to state 80
    C_STRING        shift and go to state 87

    term                           shift and go to state 147
    funct                          shift and go to state 81
    factor                         shift and go to state 83
    cvar                           shift and go to state 79

state 132

    (77) expression -> exp compareToken exp . f_popComparation
    (78) f_popComparation -> .

    NEWLINE         reduce using rule 78 (f_popComparation -> .)
    RPAREN          reduce using rule 78 (f_popComparation -> .)
    COMMA           reduce using rule 78 (f_popComparation -> .)
    COLON           reduce using rule 78 (f_popComparation -> .)

    f_popComparation               shift and go to state 148

state 133

    (38) assign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab . f_generateEqual assign
    (41) f_generateEqual -> .

    ID              reduce using rule 41 (f_generateEqual -> .)
    DEF             reduce using rule 41 (f_generateEqual -> .)
    $end            reduce using rule 41 (f_generateEqual -> .)
    TAB             reduce using rule 41 (f_generateEqual -> .)
    WHILE           reduce using rule 41 (f_generateEqual -> .)
    ELSE            reduce using rule 41 (f_generateEqual -> .)

    f_generateEqual                shift and go to state 149

state 134

    (30) functions -> DEF VOID MAIN f_saveModule LPAREN RPAREN COLON . NEWLINE f_resetTab f_incTab block f_endModule functions

    NEWLINE         shift and go to state 150


state 135

    (31) functions -> DEF VOID MAIN f_saveModule LPAREN tipo ID . f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (37) f_addToParam -> .

    COMMA           reduce using rule 37 (f_addToParam -> .)
    RPAREN          reduce using rule 37 (f_addToParam -> .)

    f_addToParam                   shift and go to state 151

state 136

    (28) functions -> DEF VOID ID f_saveModule LPAREN RPAREN COLON . NEWLINE f_resetTab f_incTab block f_endModule functions

    NEWLINE         shift and go to state 152


state 137

    (29) functions -> DEF VOID ID f_saveModule LPAREN tipo ID . f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (37) f_addToParam -> .

    COMMA           reduce using rule 37 (f_addToParam -> .)
    RPAREN          reduce using rule 37 (f_addToParam -> .)

    f_addToParam                   shift and go to state 153

state 138

    (26) functions -> DEF tipo ID f_saveModule LPAREN RPAREN COLON . NEWLINE f_resetTab f_incTab block f_endModule functions

    NEWLINE         shift and go to state 154


state 139

    (27) functions -> DEF tipo ID f_saveModule LPAREN tipo ID . f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (37) f_addToParam -> .

    COMMA           reduce using rule 37 (f_addToParam -> .)
    RPAREN          reduce using rule 37 (f_addToParam -> .)

    f_addToParam                   shift and go to state 155

state 140

    (92) moreFactors -> DIVIDE f_pushOperator factor . f_popFactor moreFactors
    (100) f_popFactor -> .

    DIVIDE          reduce using rule 100 (f_popFactor -> .)
    TIMES           reduce using rule 100 (f_popFactor -> .)
    MOD             reduce using rule 100 (f_popFactor -> .)
    PLUS            reduce using rule 100 (f_popFactor -> .)
    MINUS           reduce using rule 100 (f_popFactor -> .)
    GREATER_THAN    reduce using rule 100 (f_popFactor -> .)
    LESS_THAN       reduce using rule 100 (f_popFactor -> .)
    LESS_EQUAL_THAN reduce using rule 100 (f_popFactor -> .)
    GREATER_EQUAL_THAN reduce using rule 100 (f_popFactor -> .)
    NOT_EQUAL_THAN  reduce using rule 100 (f_popFactor -> .)
    SAME_AS         reduce using rule 100 (f_popFactor -> .)
    NEWLINE         reduce using rule 100 (f_popFactor -> .)
    RPAREN          reduce using rule 100 (f_popFactor -> .)
    COMMA           reduce using rule 100 (f_popFactor -> .)
    COLON           reduce using rule 100 (f_popFactor -> .)

    f_popFactor                    shift and go to state 156

state 141

    (93) moreFactors -> TIMES f_pushOperator factor . f_popFactor moreFactors
    (100) f_popFactor -> .

    DIVIDE          reduce using rule 100 (f_popFactor -> .)
    TIMES           reduce using rule 100 (f_popFactor -> .)
    MOD             reduce using rule 100 (f_popFactor -> .)
    PLUS            reduce using rule 100 (f_popFactor -> .)
    MINUS           reduce using rule 100 (f_popFactor -> .)
    GREATER_THAN    reduce using rule 100 (f_popFactor -> .)
    LESS_THAN       reduce using rule 100 (f_popFactor -> .)
    LESS_EQUAL_THAN reduce using rule 100 (f_popFactor -> .)
    GREATER_EQUAL_THAN reduce using rule 100 (f_popFactor -> .)
    NOT_EQUAL_THAN  reduce using rule 100 (f_popFactor -> .)
    SAME_AS         reduce using rule 100 (f_popFactor -> .)
    NEWLINE         reduce using rule 100 (f_popFactor -> .)
    RPAREN          reduce using rule 100 (f_popFactor -> .)
    COMMA           reduce using rule 100 (f_popFactor -> .)
    COLON           reduce using rule 100 (f_popFactor -> .)

    f_popFactor                    shift and go to state 157

state 142

    (94) moreFactors -> MOD f_pushOperator factor . f_popFactor moreFactors
    (100) f_popFactor -> .

    DIVIDE          reduce using rule 100 (f_popFactor -> .)
    TIMES           reduce using rule 100 (f_popFactor -> .)
    MOD             reduce using rule 100 (f_popFactor -> .)
    PLUS            reduce using rule 100 (f_popFactor -> .)
    MINUS           reduce using rule 100 (f_popFactor -> .)
    GREATER_THAN    reduce using rule 100 (f_popFactor -> .)
    LESS_THAN       reduce using rule 100 (f_popFactor -> .)
    LESS_EQUAL_THAN reduce using rule 100 (f_popFactor -> .)
    GREATER_EQUAL_THAN reduce using rule 100 (f_popFactor -> .)
    NOT_EQUAL_THAN  reduce using rule 100 (f_popFactor -> .)
    SAME_AS         reduce using rule 100 (f_popFactor -> .)
    NEWLINE         reduce using rule 100 (f_popFactor -> .)
    RPAREN          reduce using rule 100 (f_popFactor -> .)
    COMMA           reduce using rule 100 (f_popFactor -> .)
    COLON           reduce using rule 100 (f_popFactor -> .)

    f_popFactor                    shift and go to state 158

state 143

    (95) factor -> LPAREN f_pushOperator expression RPAREN . f_popOperator
    (99) f_popOperator -> .

    DIVIDE          reduce using rule 99 (f_popOperator -> .)
    TIMES           reduce using rule 99 (f_popOperator -> .)
    MOD             reduce using rule 99 (f_popOperator -> .)
    PLUS            reduce using rule 99 (f_popOperator -> .)
    MINUS           reduce using rule 99 (f_popOperator -> .)
    GREATER_THAN    reduce using rule 99 (f_popOperator -> .)
    LESS_THAN       reduce using rule 99 (f_popOperator -> .)
    LESS_EQUAL_THAN reduce using rule 99 (f_popOperator -> .)
    GREATER_EQUAL_THAN reduce using rule 99 (f_popOperator -> .)
    NOT_EQUAL_THAN  reduce using rule 99 (f_popOperator -> .)
    SAME_AS         reduce using rule 99 (f_popOperator -> .)
    NEWLINE         reduce using rule 99 (f_popOperator -> .)
    RPAREN          reduce using rule 99 (f_popOperator -> .)
    COMMA           reduce using rule 99 (f_popOperator -> .)
    COLON           reduce using rule 99 (f_popOperator -> .)

    f_popOperator                  shift and go to state 159

state 144

    (70) funct -> ID f_checkProc LPAREN RPAREN .

    DIVIDE          reduce using rule 70 (funct -> ID f_checkProc LPAREN RPAREN .)
    TIMES           reduce using rule 70 (funct -> ID f_checkProc LPAREN RPAREN .)
    MOD             reduce using rule 70 (funct -> ID f_checkProc LPAREN RPAREN .)
    PLUS            reduce using rule 70 (funct -> ID f_checkProc LPAREN RPAREN .)
    MINUS           reduce using rule 70 (funct -> ID f_checkProc LPAREN RPAREN .)
    GREATER_THAN    reduce using rule 70 (funct -> ID f_checkProc LPAREN RPAREN .)
    LESS_THAN       reduce using rule 70 (funct -> ID f_checkProc LPAREN RPAREN .)
    LESS_EQUAL_THAN reduce using rule 70 (funct -> ID f_checkProc LPAREN RPAREN .)
    GREATER_EQUAL_THAN reduce using rule 70 (funct -> ID f_checkProc LPAREN RPAREN .)
    NOT_EQUAL_THAN  reduce using rule 70 (funct -> ID f_checkProc LPAREN RPAREN .)
    SAME_AS         reduce using rule 70 (funct -> ID f_checkProc LPAREN RPAREN .)
    NEWLINE         reduce using rule 70 (funct -> ID f_checkProc LPAREN RPAREN .)
    RPAREN          reduce using rule 70 (funct -> ID f_checkProc LPAREN RPAREN .)
    COMMA           reduce using rule 70 (funct -> ID f_checkProc LPAREN RPAREN .)
    COLON           reduce using rule 70 (funct -> ID f_checkProc LPAREN RPAREN .)


state 145

    (71) funct -> ID f_checkProc LPAREN expression . f_genParam expressionList RPAREN
    (75) f_genParam -> .

    COMMA           reduce using rule 75 (f_genParam -> .)
    RPAREN          reduce using rule 75 (f_genParam -> .)

    f_genParam                     shift and go to state 160

state 146

    (87) moreTerms -> PLUS f_pushOperator term . f_popTerm moreTerms
    (89) f_popTerm -> .

    PLUS            reduce using rule 89 (f_popTerm -> .)
    MINUS           reduce using rule 89 (f_popTerm -> .)
    GREATER_THAN    reduce using rule 89 (f_popTerm -> .)
    LESS_THAN       reduce using rule 89 (f_popTerm -> .)
    LESS_EQUAL_THAN reduce using rule 89 (f_popTerm -> .)
    GREATER_EQUAL_THAN reduce using rule 89 (f_popTerm -> .)
    NOT_EQUAL_THAN  reduce using rule 89 (f_popTerm -> .)
    SAME_AS         reduce using rule 89 (f_popTerm -> .)
    NEWLINE         reduce using rule 89 (f_popTerm -> .)
    RPAREN          reduce using rule 89 (f_popTerm -> .)
    COMMA           reduce using rule 89 (f_popTerm -> .)
    COLON           reduce using rule 89 (f_popTerm -> .)

    f_popTerm                      shift and go to state 161

state 147

    (88) moreTerms -> MINUS f_pushOperator term . f_popTerm moreTerms
    (89) f_popTerm -> .

    PLUS            reduce using rule 89 (f_popTerm -> .)
    MINUS           reduce using rule 89 (f_popTerm -> .)
    GREATER_THAN    reduce using rule 89 (f_popTerm -> .)
    LESS_THAN       reduce using rule 89 (f_popTerm -> .)
    LESS_EQUAL_THAN reduce using rule 89 (f_popTerm -> .)
    GREATER_EQUAL_THAN reduce using rule 89 (f_popTerm -> .)
    NOT_EQUAL_THAN  reduce using rule 89 (f_popTerm -> .)
    SAME_AS         reduce using rule 89 (f_popTerm -> .)
    NEWLINE         reduce using rule 89 (f_popTerm -> .)
    RPAREN          reduce using rule 89 (f_popTerm -> .)
    COMMA           reduce using rule 89 (f_popTerm -> .)
    COLON           reduce using rule 89 (f_popTerm -> .)

    f_popTerm                      shift and go to state 162

state 148

    (77) expression -> exp compareToken exp f_popComparation .

    COLON           reduce using rule 77 (expression -> exp compareToken exp f_popComparation .)
    NEWLINE         reduce using rule 77 (expression -> exp compareToken exp f_popComparation .)
    RPAREN          reduce using rule 77 (expression -> exp compareToken exp f_popComparation .)
    COMMA           reduce using rule 77 (expression -> exp compareToken exp f_popComparation .)


state 149

    (38) assign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual . assign
    (38) assign -> . f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual assign
    (39) assign -> . empty
    (53) f_checkTab -> .
    (3) empty -> .

    ID              reduce using rule 53 (f_checkTab -> .)
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)
    TAB             reduce using rule 3 (empty -> .)
    WHILE           reduce using rule 3 (empty -> .)
    ELSE            reduce using rule 3 (empty -> .)

    f_checkTab                     shift and go to state 20
    assign                         shift and go to state 163
    empty                          shift and go to state 22

state 150

    (30) functions -> DEF VOID MAIN f_saveModule LPAREN RPAREN COLON NEWLINE . f_resetTab f_incTab block f_endModule functions
    (52) f_resetTab -> .

    TAB             reduce using rule 52 (f_resetTab -> .)
    DEF             reduce using rule 52 (f_resetTab -> .)
    $end            reduce using rule 52 (f_resetTab -> .)

    f_resetTab                     shift and go to state 164

state 151

    (31) functions -> DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam . parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (35) parameterList -> . empty
    (36) parameterList -> . COMMA tipo ID f_addToParam parameterList
    (3) empty -> .

    COMMA           shift and go to state 166
    RPAREN          reduce using rule 3 (empty -> .)

    parameterList                  shift and go to state 165
    empty                          shift and go to state 167

state 152

    (28) functions -> DEF VOID ID f_saveModule LPAREN RPAREN COLON NEWLINE . f_resetTab f_incTab block f_endModule functions
    (52) f_resetTab -> .

    TAB             reduce using rule 52 (f_resetTab -> .)
    DEF             reduce using rule 52 (f_resetTab -> .)
    $end            reduce using rule 52 (f_resetTab -> .)

    f_resetTab                     shift and go to state 168

state 153

    (29) functions -> DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam . parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (35) parameterList -> . empty
    (36) parameterList -> . COMMA tipo ID f_addToParam parameterList
    (3) empty -> .

    COMMA           shift and go to state 166
    RPAREN          reduce using rule 3 (empty -> .)

    parameterList                  shift and go to state 169
    empty                          shift and go to state 167

state 154

    (26) functions -> DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE . f_resetTab f_incTab block f_endModule functions
    (52) f_resetTab -> .

    TAB             reduce using rule 52 (f_resetTab -> .)
    DEF             reduce using rule 52 (f_resetTab -> .)
    $end            reduce using rule 52 (f_resetTab -> .)

    f_resetTab                     shift and go to state 170

state 155

    (27) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam . parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (35) parameterList -> . empty
    (36) parameterList -> . COMMA tipo ID f_addToParam parameterList
    (3) empty -> .

    COMMA           shift and go to state 166
    RPAREN          reduce using rule 3 (empty -> .)

    parameterList                  shift and go to state 171
    empty                          shift and go to state 167

state 156

    (92) moreFactors -> DIVIDE f_pushOperator factor f_popFactor . moreFactors
    (91) moreFactors -> . empty
    (92) moreFactors -> . DIVIDE f_pushOperator factor f_popFactor moreFactors
    (93) moreFactors -> . TIMES f_pushOperator factor f_popFactor moreFactors
    (94) moreFactors -> . MOD f_pushOperator factor f_popFactor moreFactors
    (3) empty -> .

    DIVIDE          shift and go to state 98
    TIMES           shift and go to state 99
    MOD             shift and go to state 101
    PLUS            reduce using rule 3 (empty -> .)
    MINUS           reduce using rule 3 (empty -> .)
    GREATER_THAN    reduce using rule 3 (empty -> .)
    LESS_THAN       reduce using rule 3 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 3 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 3 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 3 (empty -> .)
    SAME_AS         reduce using rule 3 (empty -> .)
    NEWLINE         reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    COLON           reduce using rule 3 (empty -> .)

    moreFactors                    shift and go to state 172
    empty                          shift and go to state 100

state 157

    (93) moreFactors -> TIMES f_pushOperator factor f_popFactor . moreFactors
    (91) moreFactors -> . empty
    (92) moreFactors -> . DIVIDE f_pushOperator factor f_popFactor moreFactors
    (93) moreFactors -> . TIMES f_pushOperator factor f_popFactor moreFactors
    (94) moreFactors -> . MOD f_pushOperator factor f_popFactor moreFactors
    (3) empty -> .

    DIVIDE          shift and go to state 98
    TIMES           shift and go to state 99
    MOD             shift and go to state 101
    PLUS            reduce using rule 3 (empty -> .)
    MINUS           reduce using rule 3 (empty -> .)
    GREATER_THAN    reduce using rule 3 (empty -> .)
    LESS_THAN       reduce using rule 3 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 3 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 3 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 3 (empty -> .)
    SAME_AS         reduce using rule 3 (empty -> .)
    NEWLINE         reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    COLON           reduce using rule 3 (empty -> .)

    moreFactors                    shift and go to state 173
    empty                          shift and go to state 100

state 158

    (94) moreFactors -> MOD f_pushOperator factor f_popFactor . moreFactors
    (91) moreFactors -> . empty
    (92) moreFactors -> . DIVIDE f_pushOperator factor f_popFactor moreFactors
    (93) moreFactors -> . TIMES f_pushOperator factor f_popFactor moreFactors
    (94) moreFactors -> . MOD f_pushOperator factor f_popFactor moreFactors
    (3) empty -> .

    DIVIDE          shift and go to state 98
    TIMES           shift and go to state 99
    MOD             shift and go to state 101
    PLUS            reduce using rule 3 (empty -> .)
    MINUS           reduce using rule 3 (empty -> .)
    GREATER_THAN    reduce using rule 3 (empty -> .)
    LESS_THAN       reduce using rule 3 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 3 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 3 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 3 (empty -> .)
    SAME_AS         reduce using rule 3 (empty -> .)
    NEWLINE         reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    COLON           reduce using rule 3 (empty -> .)

    moreFactors                    shift and go to state 174
    empty                          shift and go to state 100

state 159

    (95) factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .

    DIVIDE          reduce using rule 95 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    TIMES           reduce using rule 95 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    MOD             reduce using rule 95 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    PLUS            reduce using rule 95 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    MINUS           reduce using rule 95 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    GREATER_THAN    reduce using rule 95 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    LESS_THAN       reduce using rule 95 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    LESS_EQUAL_THAN reduce using rule 95 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    GREATER_EQUAL_THAN reduce using rule 95 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    NOT_EQUAL_THAN  reduce using rule 95 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    SAME_AS         reduce using rule 95 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    NEWLINE         reduce using rule 95 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    RPAREN          reduce using rule 95 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    COMMA           reduce using rule 95 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    COLON           reduce using rule 95 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)


state 160

    (71) funct -> ID f_checkProc LPAREN expression f_genParam . expressionList RPAREN
    (73) expressionList -> . empty
    (74) expressionList -> . COMMA expression f_genParam expressionList
    (3) empty -> .

    COMMA           shift and go to state 176
    RPAREN          reduce using rule 3 (empty -> .)

    empty                          shift and go to state 177
    expressionList                 shift and go to state 175

state 161

    (87) moreTerms -> PLUS f_pushOperator term f_popTerm . moreTerms
    (86) moreTerms -> . empty
    (87) moreTerms -> . PLUS f_pushOperator term f_popTerm moreTerms
    (88) moreTerms -> . MINUS f_pushOperator term f_popTerm moreTerms
    (3) empty -> .

    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    GREATER_THAN    reduce using rule 3 (empty -> .)
    LESS_THAN       reduce using rule 3 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 3 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 3 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 3 (empty -> .)
    SAME_AS         reduce using rule 3 (empty -> .)
    NEWLINE         reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    COLON           reduce using rule 3 (empty -> .)

    moreTerms                      shift and go to state 178
    empty                          shift and go to state 110

state 162

    (88) moreTerms -> MINUS f_pushOperator term f_popTerm . moreTerms
    (86) moreTerms -> . empty
    (87) moreTerms -> . PLUS f_pushOperator term f_popTerm moreTerms
    (88) moreTerms -> . MINUS f_pushOperator term f_popTerm moreTerms
    (3) empty -> .

    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    GREATER_THAN    reduce using rule 3 (empty -> .)
    LESS_THAN       reduce using rule 3 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 3 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 3 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 3 (empty -> .)
    SAME_AS         reduce using rule 3 (empty -> .)
    NEWLINE         reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    COLON           reduce using rule 3 (empty -> .)

    moreTerms                      shift and go to state 179
    empty                          shift and go to state 110

state 163

    (38) assign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual assign .

    DEF             reduce using rule 38 (assign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual assign .)
    $end            reduce using rule 38 (assign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual assign .)
    TAB             reduce using rule 38 (assign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual assign .)
    WHILE           reduce using rule 38 (assign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual assign .)
    ELSE            reduce using rule 38 (assign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual assign .)


state 164

    (30) functions -> DEF VOID MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab . f_incTab block f_endModule functions
    (50) f_incTab -> .

    TAB             reduce using rule 50 (f_incTab -> .)
    DEF             reduce using rule 50 (f_incTab -> .)
    $end            reduce using rule 50 (f_incTab -> .)

    f_incTab                       shift and go to state 180

state 165

    (31) functions -> DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList . RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    RPAREN          shift and go to state 181


state 166

    (36) parameterList -> COMMA . tipo ID f_addToParam parameterList
    (21) tipo -> . BOOL f_saveType
    (22) tipo -> . INT f_saveType
    (23) tipo -> . FLOAT f_saveType
    (24) tipo -> . STRING f_saveType
    (25) tipo -> . IMAGE f_saveType

    BOOL            shift and go to state 25
    INT             shift and go to state 24
    FLOAT           shift and go to state 23
    STRING          shift and go to state 26
    IMAGE           shift and go to state 27

    tipo                           shift and go to state 182

state 167

    (35) parameterList -> empty .

    RPAREN          reduce using rule 35 (parameterList -> empty .)


state 168

    (28) functions -> DEF VOID ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab . f_incTab block f_endModule functions
    (50) f_incTab -> .

    TAB             reduce using rule 50 (f_incTab -> .)
    DEF             reduce using rule 50 (f_incTab -> .)
    $end            reduce using rule 50 (f_incTab -> .)

    f_incTab                       shift and go to state 183

state 169

    (29) functions -> DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList . RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    RPAREN          shift and go to state 184


state 170

    (26) functions -> DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab . f_incTab block f_endModule functions
    (50) f_incTab -> .

    TAB             reduce using rule 50 (f_incTab -> .)
    DEF             reduce using rule 50 (f_incTab -> .)
    $end            reduce using rule 50 (f_incTab -> .)

    f_incTab                       shift and go to state 185

state 171

    (27) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList . RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    RPAREN          shift and go to state 186


state 172

    (92) moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .

    PLUS            reduce using rule 92 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    MINUS           reduce using rule 92 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    GREATER_THAN    reduce using rule 92 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    LESS_THAN       reduce using rule 92 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    LESS_EQUAL_THAN reduce using rule 92 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    GREATER_EQUAL_THAN reduce using rule 92 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    NOT_EQUAL_THAN  reduce using rule 92 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    SAME_AS         reduce using rule 92 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    NEWLINE         reduce using rule 92 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    RPAREN          reduce using rule 92 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    COMMA           reduce using rule 92 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    COLON           reduce using rule 92 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)


state 173

    (93) moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .

    PLUS            reduce using rule 93 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    MINUS           reduce using rule 93 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    GREATER_THAN    reduce using rule 93 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    LESS_THAN       reduce using rule 93 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    LESS_EQUAL_THAN reduce using rule 93 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    GREATER_EQUAL_THAN reduce using rule 93 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    NOT_EQUAL_THAN  reduce using rule 93 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    SAME_AS         reduce using rule 93 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    NEWLINE         reduce using rule 93 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    RPAREN          reduce using rule 93 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    COMMA           reduce using rule 93 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    COLON           reduce using rule 93 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)


state 174

    (94) moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .

    PLUS            reduce using rule 94 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    MINUS           reduce using rule 94 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    GREATER_THAN    reduce using rule 94 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    LESS_THAN       reduce using rule 94 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    LESS_EQUAL_THAN reduce using rule 94 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    GREATER_EQUAL_THAN reduce using rule 94 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    NOT_EQUAL_THAN  reduce using rule 94 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    SAME_AS         reduce using rule 94 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    NEWLINE         reduce using rule 94 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    RPAREN          reduce using rule 94 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    COMMA           reduce using rule 94 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    COLON           reduce using rule 94 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)


state 175

    (71) funct -> ID f_checkProc LPAREN expression f_genParam expressionList . RPAREN

    RPAREN          shift and go to state 187


state 176

    (74) expressionList -> COMMA . expression f_genParam expressionList
    (76) expression -> . exp
    (77) expression -> . exp compareToken exp f_popComparation
    (85) exp -> . term moreTerms
    (90) term -> . factor moreFactors
    (95) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (96) factor -> . cvar
    (97) factor -> . funct
    (101) cvar -> . ID f_isID
    (102) cvar -> . C_BOOL f_isConst
    (103) cvar -> . C_INT f_isConst
    (104) cvar -> . C_FLOAT f_isConst
    (105) cvar -> . C_STRING f_isConst
    (70) funct -> . ID f_checkProc LPAREN RPAREN
    (71) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 84
    ID              shift and go to state 86
    C_BOOL          shift and go to state 82
    C_INT           shift and go to state 85
    C_FLOAT         shift and go to state 80
    C_STRING        shift and go to state 87

    term                           shift and go to state 88
    funct                          shift and go to state 81
    exp                            shift and go to state 89
    factor                         shift and go to state 83
    cvar                           shift and go to state 79
    expression                     shift and go to state 188

state 177

    (73) expressionList -> empty .

    RPAREN          reduce using rule 73 (expressionList -> empty .)


state 178

    (87) moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .

    GREATER_THAN    reduce using rule 87 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    LESS_THAN       reduce using rule 87 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    LESS_EQUAL_THAN reduce using rule 87 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    GREATER_EQUAL_THAN reduce using rule 87 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    NOT_EQUAL_THAN  reduce using rule 87 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    SAME_AS         reduce using rule 87 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    NEWLINE         reduce using rule 87 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    RPAREN          reduce using rule 87 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    COMMA           reduce using rule 87 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    COLON           reduce using rule 87 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)


state 179

    (88) moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .

    GREATER_THAN    reduce using rule 88 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    LESS_THAN       reduce using rule 88 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    LESS_EQUAL_THAN reduce using rule 88 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    GREATER_EQUAL_THAN reduce using rule 88 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    NOT_EQUAL_THAN  reduce using rule 88 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    SAME_AS         reduce using rule 88 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    NEWLINE         reduce using rule 88 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    RPAREN          reduce using rule 88 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    COMMA           reduce using rule 88 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    COLON           reduce using rule 88 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)


state 180

    (30) functions -> DEF VOID MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab . block f_endModule functions
    (43) block -> . empty
    (44) block -> . TAB f_addTab moreTabs statement moreStatements
    (3) empty -> .

    TAB             shift and go to state 189
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)

    empty                          shift and go to state 190
    block                          shift and go to state 191

state 181

    (31) functions -> DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN . COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    COLON           shift and go to state 192


state 182

    (36) parameterList -> COMMA tipo . ID f_addToParam parameterList

    ID              shift and go to state 193


state 183

    (28) functions -> DEF VOID ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab . block f_endModule functions
    (43) block -> . empty
    (44) block -> . TAB f_addTab moreTabs statement moreStatements
    (3) empty -> .

    TAB             shift and go to state 189
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)

    empty                          shift and go to state 190
    block                          shift and go to state 194

state 184

    (29) functions -> DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN . COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    COLON           shift and go to state 195


state 185

    (26) functions -> DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab . block f_endModule functions
    (43) block -> . empty
    (44) block -> . TAB f_addTab moreTabs statement moreStatements
    (3) empty -> .

    TAB             shift and go to state 189
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)

    empty                          shift and go to state 190
    block                          shift and go to state 196

state 186

    (27) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN . COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    COLON           shift and go to state 197


state 187

    (71) funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .

    DIVIDE          reduce using rule 71 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    TIMES           reduce using rule 71 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    MOD             reduce using rule 71 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    PLUS            reduce using rule 71 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    MINUS           reduce using rule 71 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    GREATER_THAN    reduce using rule 71 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    LESS_THAN       reduce using rule 71 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    LESS_EQUAL_THAN reduce using rule 71 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    GREATER_EQUAL_THAN reduce using rule 71 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    NOT_EQUAL_THAN  reduce using rule 71 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    SAME_AS         reduce using rule 71 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    NEWLINE         reduce using rule 71 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    RPAREN          reduce using rule 71 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    COMMA           reduce using rule 71 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    COLON           reduce using rule 71 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)


state 188

    (74) expressionList -> COMMA expression . f_genParam expressionList
    (75) f_genParam -> .

    COMMA           reduce using rule 75 (f_genParam -> .)
    RPAREN          reduce using rule 75 (f_genParam -> .)

    f_genParam                     shift and go to state 198

state 189

    (44) block -> TAB . f_addTab moreTabs statement moreStatements
    (51) f_addTab -> .

    TAB             reduce using rule 51 (f_addTab -> .)
    NEWLINE         reduce using rule 51 (f_addTab -> .)
    RETURN          reduce using rule 51 (f_addTab -> .)
    ID              reduce using rule 51 (f_addTab -> .)
    IF              reduce using rule 51 (f_addTab -> .)
    WHILE           reduce using rule 51 (f_addTab -> .)
    DO              reduce using rule 51 (f_addTab -> .)
    BOOL            reduce using rule 51 (f_addTab -> .)
    INT             reduce using rule 51 (f_addTab -> .)
    FLOAT           reduce using rule 51 (f_addTab -> .)
    STRING          reduce using rule 51 (f_addTab -> .)
    IMAGE           reduce using rule 51 (f_addTab -> .)
    DEF             reduce using rule 51 (f_addTab -> .)
    $end            reduce using rule 51 (f_addTab -> .)
    ELSE            reduce using rule 51 (f_addTab -> .)

    f_addTab                       shift and go to state 199

state 190

    (43) block -> empty .

    DEF             reduce using rule 43 (block -> empty .)
    $end            reduce using rule 43 (block -> empty .)
    TAB             reduce using rule 43 (block -> empty .)
    WHILE           reduce using rule 43 (block -> empty .)
    ELSE            reduce using rule 43 (block -> empty .)


state 191

    (30) functions -> DEF VOID MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block . f_endModule functions
    (33) f_endModule -> .

    DEF             reduce using rule 33 (f_endModule -> .)
    $end            reduce using rule 33 (f_endModule -> .)

    f_endModule                    shift and go to state 200

state 192

    (31) functions -> DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON . NEWLINE f_resetTab f_incTab block f_endModule functions

    NEWLINE         shift and go to state 201


state 193

    (36) parameterList -> COMMA tipo ID . f_addToParam parameterList
    (37) f_addToParam -> .

    COMMA           reduce using rule 37 (f_addToParam -> .)
    RPAREN          reduce using rule 37 (f_addToParam -> .)

    f_addToParam                   shift and go to state 202

state 194

    (28) functions -> DEF VOID ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block . f_endModule functions
    (33) f_endModule -> .

    DEF             reduce using rule 33 (f_endModule -> .)
    $end            reduce using rule 33 (f_endModule -> .)

    f_endModule                    shift and go to state 203

state 195

    (29) functions -> DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON . NEWLINE f_resetTab f_incTab block f_endModule functions

    NEWLINE         shift and go to state 204


state 196

    (26) functions -> DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block . f_endModule functions
    (33) f_endModule -> .

    DEF             reduce using rule 33 (f_endModule -> .)
    $end            reduce using rule 33 (f_endModule -> .)

    f_endModule                    shift and go to state 205

state 197

    (27) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON . NEWLINE f_resetTab f_incTab block f_endModule functions

    NEWLINE         shift and go to state 206


state 198

    (74) expressionList -> COMMA expression f_genParam . expressionList
    (73) expressionList -> . empty
    (74) expressionList -> . COMMA expression f_genParam expressionList
    (3) empty -> .

    COMMA           shift and go to state 176
    RPAREN          reduce using rule 3 (empty -> .)

    expressionList                 shift and go to state 207
    empty                          shift and go to state 177

state 199

    (44) block -> TAB f_addTab . moreTabs statement moreStatements
    (47) moreTabs -> . empty
    (48) moreTabs -> . TAB f_addTab moreTabs
    (49) moreTabs -> . NEWLINE f_resetTab TAB f_addTab moreTabs
    (3) empty -> .

  ! shift/reduce conflict for TAB resolved as shift
    TAB             shift and go to state 209
    NEWLINE         shift and go to state 210
    RETURN          reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)
    IF              reduce using rule 3 (empty -> .)
    WHILE           reduce using rule 3 (empty -> .)
    DO              reduce using rule 3 (empty -> .)
    BOOL            reduce using rule 3 (empty -> .)
    INT             reduce using rule 3 (empty -> .)
    FLOAT           reduce using rule 3 (empty -> .)
    STRING          reduce using rule 3 (empty -> .)
    IMAGE           reduce using rule 3 (empty -> .)
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)
    ELSE            reduce using rule 3 (empty -> .)

  ! TAB             [ reduce using rule 3 (empty -> .) ]

    moreTabs                       shift and go to state 208
    empty                          shift and go to state 211

state 200

    (30) functions -> DEF VOID MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule . functions
    (26) functions -> . DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (27) functions -> . DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (28) functions -> . DEF VOID ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (29) functions -> . DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (30) functions -> . DEF VOID MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (31) functions -> . DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (32) functions -> . empty
    (3) empty -> .

    DEF             shift and go to state 36
    $end            reduce using rule 3 (empty -> .)

    functions                      shift and go to state 212
    empty                          shift and go to state 38

state 201

    (31) functions -> DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE . f_resetTab f_incTab block f_endModule functions
    (52) f_resetTab -> .

    TAB             reduce using rule 52 (f_resetTab -> .)
    DEF             reduce using rule 52 (f_resetTab -> .)
    $end            reduce using rule 52 (f_resetTab -> .)

    f_resetTab                     shift and go to state 213

state 202

    (36) parameterList -> COMMA tipo ID f_addToParam . parameterList
    (35) parameterList -> . empty
    (36) parameterList -> . COMMA tipo ID f_addToParam parameterList
    (3) empty -> .

    COMMA           shift and go to state 166
    RPAREN          reduce using rule 3 (empty -> .)

    parameterList                  shift and go to state 214
    empty                          shift and go to state 167

state 203

    (28) functions -> DEF VOID ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule . functions
    (26) functions -> . DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (27) functions -> . DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (28) functions -> . DEF VOID ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (29) functions -> . DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (30) functions -> . DEF VOID MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (31) functions -> . DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (32) functions -> . empty
    (3) empty -> .

    DEF             shift and go to state 36
    $end            reduce using rule 3 (empty -> .)

    functions                      shift and go to state 215
    empty                          shift and go to state 38

state 204

    (29) functions -> DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE . f_resetTab f_incTab block f_endModule functions
    (52) f_resetTab -> .

    TAB             reduce using rule 52 (f_resetTab -> .)
    DEF             reduce using rule 52 (f_resetTab -> .)
    $end            reduce using rule 52 (f_resetTab -> .)

    f_resetTab                     shift and go to state 216

state 205

    (26) functions -> DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule . functions
    (26) functions -> . DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (27) functions -> . DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (28) functions -> . DEF VOID ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (29) functions -> . DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (30) functions -> . DEF VOID MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (31) functions -> . DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (32) functions -> . empty
    (3) empty -> .

    DEF             shift and go to state 36
    $end            reduce using rule 3 (empty -> .)

    functions                      shift and go to state 217
    empty                          shift and go to state 38

state 206

    (27) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE . f_resetTab f_incTab block f_endModule functions
    (52) f_resetTab -> .

    TAB             reduce using rule 52 (f_resetTab -> .)
    DEF             reduce using rule 52 (f_resetTab -> .)
    $end            reduce using rule 52 (f_resetTab -> .)

    f_resetTab                     shift and go to state 218

state 207

    (74) expressionList -> COMMA expression f_genParam expressionList .

    RPAREN          reduce using rule 74 (expressionList -> COMMA expression f_genParam expressionList .)


state 208

    (44) block -> TAB f_addTab moreTabs . statement moreStatements
    (54) statement -> . vars
    (55) statement -> . assign
    (56) statement -> . f_checkTab condition
    (57) statement -> . f_checkTab cycle
    (58) statement -> . f_checkTab doCycle
    (59) statement -> . f_checkTab funct NEWLINE f_resetTab
    (60) statement -> . f_checkTab RETURN expression f_return NEWLINE f_resetTab
    (16) vars -> . f_checkTab tipo idList NEWLINE f_resetTab vars
    (17) vars -> . empty
    (38) assign -> . f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual assign
    (39) assign -> . empty
    (53) f_checkTab -> .
    (3) empty -> .

  ! reduce/reduce conflict for WHILE resolved using rule 3 (empty -> .)
    RETURN          reduce using rule 53 (f_checkTab -> .)
    ID              reduce using rule 53 (f_checkTab -> .)
    IF              reduce using rule 53 (f_checkTab -> .)
    DO              reduce using rule 53 (f_checkTab -> .)
    BOOL            reduce using rule 53 (f_checkTab -> .)
    INT             reduce using rule 53 (f_checkTab -> .)
    FLOAT           reduce using rule 53 (f_checkTab -> .)
    STRING          reduce using rule 53 (f_checkTab -> .)
    IMAGE           reduce using rule 53 (f_checkTab -> .)
    TAB             reduce using rule 3 (empty -> .)
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)
    WHILE           reduce using rule 3 (empty -> .)
    ELSE            reduce using rule 3 (empty -> .)

  ! WHILE           [ reduce using rule 53 (f_checkTab -> .) ]

    vars                           shift and go to state 219
    f_checkTab                     shift and go to state 220
    empty                          shift and go to state 221
    statement                      shift and go to state 222
    assign                         shift and go to state 223

state 209

    (48) moreTabs -> TAB . f_addTab moreTabs
    (51) f_addTab -> .

    TAB             reduce using rule 51 (f_addTab -> .)
    NEWLINE         reduce using rule 51 (f_addTab -> .)
    RETURN          reduce using rule 51 (f_addTab -> .)
    ID              reduce using rule 51 (f_addTab -> .)
    IF              reduce using rule 51 (f_addTab -> .)
    WHILE           reduce using rule 51 (f_addTab -> .)
    DO              reduce using rule 51 (f_addTab -> .)
    BOOL            reduce using rule 51 (f_addTab -> .)
    INT             reduce using rule 51 (f_addTab -> .)
    FLOAT           reduce using rule 51 (f_addTab -> .)
    STRING          reduce using rule 51 (f_addTab -> .)
    IMAGE           reduce using rule 51 (f_addTab -> .)
    DEF             reduce using rule 51 (f_addTab -> .)
    $end            reduce using rule 51 (f_addTab -> .)
    ELSE            reduce using rule 51 (f_addTab -> .)

    f_addTab                       shift and go to state 224

state 210

    (49) moreTabs -> NEWLINE . f_resetTab TAB f_addTab moreTabs
    (52) f_resetTab -> .

    TAB             reduce using rule 52 (f_resetTab -> .)

    f_resetTab                     shift and go to state 225

state 211

    (47) moreTabs -> empty .

    TAB             reduce using rule 47 (moreTabs -> empty .)
    RETURN          reduce using rule 47 (moreTabs -> empty .)
    ID              reduce using rule 47 (moreTabs -> empty .)
    IF              reduce using rule 47 (moreTabs -> empty .)
    WHILE           reduce using rule 47 (moreTabs -> empty .)
    DO              reduce using rule 47 (moreTabs -> empty .)
    BOOL            reduce using rule 47 (moreTabs -> empty .)
    INT             reduce using rule 47 (moreTabs -> empty .)
    FLOAT           reduce using rule 47 (moreTabs -> empty .)
    STRING          reduce using rule 47 (moreTabs -> empty .)
    IMAGE           reduce using rule 47 (moreTabs -> empty .)
    DEF             reduce using rule 47 (moreTabs -> empty .)
    $end            reduce using rule 47 (moreTabs -> empty .)
    ELSE            reduce using rule 47 (moreTabs -> empty .)


state 212

    (30) functions -> DEF VOID MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions .

    $end            reduce using rule 30 (functions -> DEF VOID MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions .)


state 213

    (31) functions -> DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab . f_incTab block f_endModule functions
    (50) f_incTab -> .

    TAB             reduce using rule 50 (f_incTab -> .)
    DEF             reduce using rule 50 (f_incTab -> .)
    $end            reduce using rule 50 (f_incTab -> .)

    f_incTab                       shift and go to state 226

state 214

    (36) parameterList -> COMMA tipo ID f_addToParam parameterList .

    RPAREN          reduce using rule 36 (parameterList -> COMMA tipo ID f_addToParam parameterList .)


state 215

    (28) functions -> DEF VOID ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions .

    $end            reduce using rule 28 (functions -> DEF VOID ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions .)


state 216

    (29) functions -> DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab . f_incTab block f_endModule functions
    (50) f_incTab -> .

    TAB             reduce using rule 50 (f_incTab -> .)
    DEF             reduce using rule 50 (f_incTab -> .)
    $end            reduce using rule 50 (f_incTab -> .)

    f_incTab                       shift and go to state 227

state 217

    (26) functions -> DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions .

    $end            reduce using rule 26 (functions -> DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions .)


state 218

    (27) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab . f_incTab block f_endModule functions
    (50) f_incTab -> .

    TAB             reduce using rule 50 (f_incTab -> .)
    DEF             reduce using rule 50 (f_incTab -> .)
    $end            reduce using rule 50 (f_incTab -> .)

    f_incTab                       shift and go to state 228

state 219

    (54) statement -> vars .

    TAB             reduce using rule 54 (statement -> vars .)
    DEF             reduce using rule 54 (statement -> vars .)
    $end            reduce using rule 54 (statement -> vars .)
    WHILE           reduce using rule 54 (statement -> vars .)
    ELSE            reduce using rule 54 (statement -> vars .)


state 220

    (56) statement -> f_checkTab . condition
    (57) statement -> f_checkTab . cycle
    (58) statement -> f_checkTab . doCycle
    (59) statement -> f_checkTab . funct NEWLINE f_resetTab
    (60) statement -> f_checkTab . RETURN expression f_return NEWLINE f_resetTab
    (16) vars -> f_checkTab . tipo idList NEWLINE f_resetTab vars
    (38) assign -> f_checkTab . ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual assign
    (62) condition -> . IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block
    (63) condition -> . IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block
    (64) cycle -> . WHILE f_isCondition expression COLON NEWLINE f_resetTab f_incTab block
    (65) doCycle -> . DO f_pushDo COLON NEWLINE f_resetTab f_incTab block WHILE f_isDoWhile f_isCondition expression NEWLINE f_resetTab
    (70) funct -> . ID f_checkProc LPAREN RPAREN
    (71) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN
    (21) tipo -> . BOOL f_saveType
    (22) tipo -> . INT f_saveType
    (23) tipo -> . FLOAT f_saveType
    (24) tipo -> . STRING f_saveType
    (25) tipo -> . IMAGE f_saveType

    RETURN          shift and go to state 230
    ID              shift and go to state 235
    IF              shift and go to state 237
    WHILE           shift and go to state 232
    DO              shift and go to state 229
    BOOL            shift and go to state 25
    INT             shift and go to state 24
    FLOAT           shift and go to state 23
    STRING          shift and go to state 26
    IMAGE           shift and go to state 27

    funct                          shift and go to state 231
    tipo                           shift and go to state 28
    doCycle                        shift and go to state 233
    condition                      shift and go to state 236
    cycle                          shift and go to state 234

state 221

    (17) vars -> empty .
    (39) assign -> empty .

  ! reduce/reduce conflict for TAB resolved using rule 17 (vars -> empty .)
  ! reduce/reduce conflict for DEF resolved using rule 17 (vars -> empty .)
  ! reduce/reduce conflict for $end resolved using rule 17 (vars -> empty .)
  ! reduce/reduce conflict for WHILE resolved using rule 17 (vars -> empty .)
  ! reduce/reduce conflict for ELSE resolved using rule 17 (vars -> empty .)
    TAB             reduce using rule 17 (vars -> empty .)
    DEF             reduce using rule 17 (vars -> empty .)
    $end            reduce using rule 17 (vars -> empty .)
    WHILE           reduce using rule 17 (vars -> empty .)
    ELSE            reduce using rule 17 (vars -> empty .)

  ! TAB             [ reduce using rule 39 (assign -> empty .) ]
  ! DEF             [ reduce using rule 39 (assign -> empty .) ]
  ! $end            [ reduce using rule 39 (assign -> empty .) ]
  ! WHILE           [ reduce using rule 39 (assign -> empty .) ]
  ! ELSE            [ reduce using rule 39 (assign -> empty .) ]


state 222

    (44) block -> TAB f_addTab moreTabs statement . moreStatements
    (45) moreStatements -> . empty
    (46) moreStatements -> . TAB f_addTab moreTabs statement moreStatements
    (3) empty -> .

  ! shift/reduce conflict for TAB resolved as shift
    TAB             shift and go to state 238
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)
    WHILE           reduce using rule 3 (empty -> .)
    ELSE            reduce using rule 3 (empty -> .)

  ! TAB             [ reduce using rule 3 (empty -> .) ]

    empty                          shift and go to state 239
    moreStatements                 shift and go to state 240

state 223

    (55) statement -> assign .

    TAB             reduce using rule 55 (statement -> assign .)
    DEF             reduce using rule 55 (statement -> assign .)
    $end            reduce using rule 55 (statement -> assign .)
    WHILE           reduce using rule 55 (statement -> assign .)
    ELSE            reduce using rule 55 (statement -> assign .)


state 224

    (48) moreTabs -> TAB f_addTab . moreTabs
    (47) moreTabs -> . empty
    (48) moreTabs -> . TAB f_addTab moreTabs
    (49) moreTabs -> . NEWLINE f_resetTab TAB f_addTab moreTabs
    (3) empty -> .

  ! shift/reduce conflict for TAB resolved as shift
    TAB             shift and go to state 209
    NEWLINE         shift and go to state 210
    RETURN          reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)
    IF              reduce using rule 3 (empty -> .)
    WHILE           reduce using rule 3 (empty -> .)
    DO              reduce using rule 3 (empty -> .)
    BOOL            reduce using rule 3 (empty -> .)
    INT             reduce using rule 3 (empty -> .)
    FLOAT           reduce using rule 3 (empty -> .)
    STRING          reduce using rule 3 (empty -> .)
    IMAGE           reduce using rule 3 (empty -> .)
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)
    ELSE            reduce using rule 3 (empty -> .)

  ! TAB             [ reduce using rule 3 (empty -> .) ]

    empty                          shift and go to state 211
    moreTabs                       shift and go to state 241

state 225

    (49) moreTabs -> NEWLINE f_resetTab . TAB f_addTab moreTabs

    TAB             shift and go to state 242


state 226

    (31) functions -> DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab . block f_endModule functions
    (43) block -> . empty
    (44) block -> . TAB f_addTab moreTabs statement moreStatements
    (3) empty -> .

    TAB             shift and go to state 189
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)

    empty                          shift and go to state 190
    block                          shift and go to state 243

state 227

    (29) functions -> DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab . block f_endModule functions
    (43) block -> . empty
    (44) block -> . TAB f_addTab moreTabs statement moreStatements
    (3) empty -> .

    TAB             shift and go to state 189
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)

    empty                          shift and go to state 190
    block                          shift and go to state 244

state 228

    (27) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab . block f_endModule functions
    (43) block -> . empty
    (44) block -> . TAB f_addTab moreTabs statement moreStatements
    (3) empty -> .

    TAB             shift and go to state 189
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)

    empty                          shift and go to state 190
    block                          shift and go to state 245

state 229

    (65) doCycle -> DO . f_pushDo COLON NEWLINE f_resetTab f_incTab block WHILE f_isDoWhile f_isCondition expression NEWLINE f_resetTab
    (67) f_pushDo -> .

    COLON           reduce using rule 67 (f_pushDo -> .)

    f_pushDo                       shift and go to state 246

state 230

    (60) statement -> f_checkTab RETURN . expression f_return NEWLINE f_resetTab
    (76) expression -> . exp
    (77) expression -> . exp compareToken exp f_popComparation
    (85) exp -> . term moreTerms
    (90) term -> . factor moreFactors
    (95) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (96) factor -> . cvar
    (97) factor -> . funct
    (101) cvar -> . ID f_isID
    (102) cvar -> . C_BOOL f_isConst
    (103) cvar -> . C_INT f_isConst
    (104) cvar -> . C_FLOAT f_isConst
    (105) cvar -> . C_STRING f_isConst
    (70) funct -> . ID f_checkProc LPAREN RPAREN
    (71) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 84
    ID              shift and go to state 86
    C_BOOL          shift and go to state 82
    C_INT           shift and go to state 85
    C_FLOAT         shift and go to state 80
    C_STRING        shift and go to state 87

    term                           shift and go to state 88
    funct                          shift and go to state 81
    exp                            shift and go to state 89
    factor                         shift and go to state 83
    cvar                           shift and go to state 79
    expression                     shift and go to state 247

state 231

    (59) statement -> f_checkTab funct . NEWLINE f_resetTab

    NEWLINE         shift and go to state 248


state 232

    (64) cycle -> WHILE . f_isCondition expression COLON NEWLINE f_resetTab f_incTab block
    (69) f_isCondition -> .

    LPAREN          reduce using rule 69 (f_isCondition -> .)
    ID              reduce using rule 69 (f_isCondition -> .)
    C_BOOL          reduce using rule 69 (f_isCondition -> .)
    C_INT           reduce using rule 69 (f_isCondition -> .)
    C_FLOAT         reduce using rule 69 (f_isCondition -> .)
    C_STRING        reduce using rule 69 (f_isCondition -> .)

    f_isCondition                  shift and go to state 249

state 233

    (58) statement -> f_checkTab doCycle .

    TAB             reduce using rule 58 (statement -> f_checkTab doCycle .)
    DEF             reduce using rule 58 (statement -> f_checkTab doCycle .)
    $end            reduce using rule 58 (statement -> f_checkTab doCycle .)
    WHILE           reduce using rule 58 (statement -> f_checkTab doCycle .)
    ELSE            reduce using rule 58 (statement -> f_checkTab doCycle .)


state 234

    (57) statement -> f_checkTab cycle .

    TAB             reduce using rule 57 (statement -> f_checkTab cycle .)
    DEF             reduce using rule 57 (statement -> f_checkTab cycle .)
    $end            reduce using rule 57 (statement -> f_checkTab cycle .)
    WHILE           reduce using rule 57 (statement -> f_checkTab cycle .)
    ELSE            reduce using rule 57 (statement -> f_checkTab cycle .)


state 235

    (38) assign -> f_checkTab ID . f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual assign
    (70) funct -> ID . f_checkProc LPAREN RPAREN
    (71) funct -> ID . f_checkProc LPAREN expression f_genParam expressionList RPAREN
    (42) f_checkID -> .
    (72) f_checkProc -> .

    EQUAL           reduce using rule 42 (f_checkID -> .)
    LPAREN          reduce using rule 72 (f_checkProc -> .)

    f_checkProc                    shift and go to state 104
    f_checkID                      shift and go to state 54

state 236

    (56) statement -> f_checkTab condition .

    TAB             reduce using rule 56 (statement -> f_checkTab condition .)
    DEF             reduce using rule 56 (statement -> f_checkTab condition .)
    $end            reduce using rule 56 (statement -> f_checkTab condition .)
    WHILE           reduce using rule 56 (statement -> f_checkTab condition .)
    ELSE            reduce using rule 56 (statement -> f_checkTab condition .)


state 237

    (62) condition -> IF . f_isCondition expression COLON NEWLINE f_resetTab f_incTab block
    (63) condition -> IF . f_isCondition expression COLON NEWLINE f_resetTab f_incTab block ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block
    (69) f_isCondition -> .

    LPAREN          reduce using rule 69 (f_isCondition -> .)
    ID              reduce using rule 69 (f_isCondition -> .)
    C_BOOL          reduce using rule 69 (f_isCondition -> .)
    C_INT           reduce using rule 69 (f_isCondition -> .)
    C_FLOAT         reduce using rule 69 (f_isCondition -> .)
    C_STRING        reduce using rule 69 (f_isCondition -> .)

    f_isCondition                  shift and go to state 250

state 238

    (46) moreStatements -> TAB . f_addTab moreTabs statement moreStatements
    (51) f_addTab -> .

    TAB             reduce using rule 51 (f_addTab -> .)
    NEWLINE         reduce using rule 51 (f_addTab -> .)
    RETURN          reduce using rule 51 (f_addTab -> .)
    ID              reduce using rule 51 (f_addTab -> .)
    IF              reduce using rule 51 (f_addTab -> .)
    WHILE           reduce using rule 51 (f_addTab -> .)
    DO              reduce using rule 51 (f_addTab -> .)
    BOOL            reduce using rule 51 (f_addTab -> .)
    INT             reduce using rule 51 (f_addTab -> .)
    FLOAT           reduce using rule 51 (f_addTab -> .)
    STRING          reduce using rule 51 (f_addTab -> .)
    IMAGE           reduce using rule 51 (f_addTab -> .)
    DEF             reduce using rule 51 (f_addTab -> .)
    $end            reduce using rule 51 (f_addTab -> .)
    ELSE            reduce using rule 51 (f_addTab -> .)

    f_addTab                       shift and go to state 251

state 239

    (45) moreStatements -> empty .

    TAB             reduce using rule 45 (moreStatements -> empty .)
    DEF             reduce using rule 45 (moreStatements -> empty .)
    $end            reduce using rule 45 (moreStatements -> empty .)
    WHILE           reduce using rule 45 (moreStatements -> empty .)
    ELSE            reduce using rule 45 (moreStatements -> empty .)


state 240

    (44) block -> TAB f_addTab moreTabs statement moreStatements .

    DEF             reduce using rule 44 (block -> TAB f_addTab moreTabs statement moreStatements .)
    $end            reduce using rule 44 (block -> TAB f_addTab moreTabs statement moreStatements .)
    TAB             reduce using rule 44 (block -> TAB f_addTab moreTabs statement moreStatements .)
    WHILE           reduce using rule 44 (block -> TAB f_addTab moreTabs statement moreStatements .)
    ELSE            reduce using rule 44 (block -> TAB f_addTab moreTabs statement moreStatements .)


state 241

    (48) moreTabs -> TAB f_addTab moreTabs .

    TAB             reduce using rule 48 (moreTabs -> TAB f_addTab moreTabs .)
    RETURN          reduce using rule 48 (moreTabs -> TAB f_addTab moreTabs .)
    ID              reduce using rule 48 (moreTabs -> TAB f_addTab moreTabs .)
    IF              reduce using rule 48 (moreTabs -> TAB f_addTab moreTabs .)
    WHILE           reduce using rule 48 (moreTabs -> TAB f_addTab moreTabs .)
    DO              reduce using rule 48 (moreTabs -> TAB f_addTab moreTabs .)
    BOOL            reduce using rule 48 (moreTabs -> TAB f_addTab moreTabs .)
    INT             reduce using rule 48 (moreTabs -> TAB f_addTab moreTabs .)
    FLOAT           reduce using rule 48 (moreTabs -> TAB f_addTab moreTabs .)
    STRING          reduce using rule 48 (moreTabs -> TAB f_addTab moreTabs .)
    IMAGE           reduce using rule 48 (moreTabs -> TAB f_addTab moreTabs .)
    DEF             reduce using rule 48 (moreTabs -> TAB f_addTab moreTabs .)
    $end            reduce using rule 48 (moreTabs -> TAB f_addTab moreTabs .)
    ELSE            reduce using rule 48 (moreTabs -> TAB f_addTab moreTabs .)


state 242

    (49) moreTabs -> NEWLINE f_resetTab TAB . f_addTab moreTabs
    (51) f_addTab -> .

    TAB             reduce using rule 51 (f_addTab -> .)
    NEWLINE         reduce using rule 51 (f_addTab -> .)
    RETURN          reduce using rule 51 (f_addTab -> .)
    ID              reduce using rule 51 (f_addTab -> .)
    IF              reduce using rule 51 (f_addTab -> .)
    WHILE           reduce using rule 51 (f_addTab -> .)
    DO              reduce using rule 51 (f_addTab -> .)
    BOOL            reduce using rule 51 (f_addTab -> .)
    INT             reduce using rule 51 (f_addTab -> .)
    FLOAT           reduce using rule 51 (f_addTab -> .)
    STRING          reduce using rule 51 (f_addTab -> .)
    IMAGE           reduce using rule 51 (f_addTab -> .)
    DEF             reduce using rule 51 (f_addTab -> .)
    $end            reduce using rule 51 (f_addTab -> .)
    ELSE            reduce using rule 51 (f_addTab -> .)

    f_addTab                       shift and go to state 252

state 243

    (31) functions -> DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block . f_endModule functions
    (33) f_endModule -> .

    DEF             reduce using rule 33 (f_endModule -> .)
    $end            reduce using rule 33 (f_endModule -> .)

    f_endModule                    shift and go to state 253

state 244

    (29) functions -> DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block . f_endModule functions
    (33) f_endModule -> .

    DEF             reduce using rule 33 (f_endModule -> .)
    $end            reduce using rule 33 (f_endModule -> .)

    f_endModule                    shift and go to state 254

state 245

    (27) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block . f_endModule functions
    (33) f_endModule -> .

    DEF             reduce using rule 33 (f_endModule -> .)
    $end            reduce using rule 33 (f_endModule -> .)

    f_endModule                    shift and go to state 255

state 246

    (65) doCycle -> DO f_pushDo . COLON NEWLINE f_resetTab f_incTab block WHILE f_isDoWhile f_isCondition expression NEWLINE f_resetTab

    COLON           shift and go to state 256


state 247

    (60) statement -> f_checkTab RETURN expression . f_return NEWLINE f_resetTab
    (61) f_return -> .

    NEWLINE         reduce using rule 61 (f_return -> .)

    f_return                       shift and go to state 257

state 248

    (59) statement -> f_checkTab funct NEWLINE . f_resetTab
    (52) f_resetTab -> .

    TAB             reduce using rule 52 (f_resetTab -> .)
    DEF             reduce using rule 52 (f_resetTab -> .)
    $end            reduce using rule 52 (f_resetTab -> .)
    WHILE           reduce using rule 52 (f_resetTab -> .)
    ELSE            reduce using rule 52 (f_resetTab -> .)

    f_resetTab                     shift and go to state 258

state 249

    (64) cycle -> WHILE f_isCondition . expression COLON NEWLINE f_resetTab f_incTab block
    (76) expression -> . exp
    (77) expression -> . exp compareToken exp f_popComparation
    (85) exp -> . term moreTerms
    (90) term -> . factor moreFactors
    (95) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (96) factor -> . cvar
    (97) factor -> . funct
    (101) cvar -> . ID f_isID
    (102) cvar -> . C_BOOL f_isConst
    (103) cvar -> . C_INT f_isConst
    (104) cvar -> . C_FLOAT f_isConst
    (105) cvar -> . C_STRING f_isConst
    (70) funct -> . ID f_checkProc LPAREN RPAREN
    (71) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 84
    ID              shift and go to state 86
    C_BOOL          shift and go to state 82
    C_INT           shift and go to state 85
    C_FLOAT         shift and go to state 80
    C_STRING        shift and go to state 87

    term                           shift and go to state 88
    funct                          shift and go to state 81
    exp                            shift and go to state 89
    factor                         shift and go to state 83
    cvar                           shift and go to state 79
    expression                     shift and go to state 259

state 250

    (62) condition -> IF f_isCondition . expression COLON NEWLINE f_resetTab f_incTab block
    (63) condition -> IF f_isCondition . expression COLON NEWLINE f_resetTab f_incTab block ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block
    (76) expression -> . exp
    (77) expression -> . exp compareToken exp f_popComparation
    (85) exp -> . term moreTerms
    (90) term -> . factor moreFactors
    (95) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (96) factor -> . cvar
    (97) factor -> . funct
    (101) cvar -> . ID f_isID
    (102) cvar -> . C_BOOL f_isConst
    (103) cvar -> . C_INT f_isConst
    (104) cvar -> . C_FLOAT f_isConst
    (105) cvar -> . C_STRING f_isConst
    (70) funct -> . ID f_checkProc LPAREN RPAREN
    (71) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 84
    ID              shift and go to state 86
    C_BOOL          shift and go to state 82
    C_INT           shift and go to state 85
    C_FLOAT         shift and go to state 80
    C_STRING        shift and go to state 87

    cvar                           shift and go to state 79
    funct                          shift and go to state 81
    factor                         shift and go to state 83
    term                           shift and go to state 88
    exp                            shift and go to state 89
    expression                     shift and go to state 260

state 251

    (46) moreStatements -> TAB f_addTab . moreTabs statement moreStatements
    (47) moreTabs -> . empty
    (48) moreTabs -> . TAB f_addTab moreTabs
    (49) moreTabs -> . NEWLINE f_resetTab TAB f_addTab moreTabs
    (3) empty -> .

  ! shift/reduce conflict for TAB resolved as shift
    TAB             shift and go to state 209
    NEWLINE         shift and go to state 210
    RETURN          reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)
    IF              reduce using rule 3 (empty -> .)
    WHILE           reduce using rule 3 (empty -> .)
    DO              reduce using rule 3 (empty -> .)
    BOOL            reduce using rule 3 (empty -> .)
    INT             reduce using rule 3 (empty -> .)
    FLOAT           reduce using rule 3 (empty -> .)
    STRING          reduce using rule 3 (empty -> .)
    IMAGE           reduce using rule 3 (empty -> .)
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)
    ELSE            reduce using rule 3 (empty -> .)

  ! TAB             [ reduce using rule 3 (empty -> .) ]

    moreTabs                       shift and go to state 261
    empty                          shift and go to state 211

state 252

    (49) moreTabs -> NEWLINE f_resetTab TAB f_addTab . moreTabs
    (47) moreTabs -> . empty
    (48) moreTabs -> . TAB f_addTab moreTabs
    (49) moreTabs -> . NEWLINE f_resetTab TAB f_addTab moreTabs
    (3) empty -> .

  ! shift/reduce conflict for TAB resolved as shift
    TAB             shift and go to state 209
    NEWLINE         shift and go to state 210
    RETURN          reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)
    IF              reduce using rule 3 (empty -> .)
    WHILE           reduce using rule 3 (empty -> .)
    DO              reduce using rule 3 (empty -> .)
    BOOL            reduce using rule 3 (empty -> .)
    INT             reduce using rule 3 (empty -> .)
    FLOAT           reduce using rule 3 (empty -> .)
    STRING          reduce using rule 3 (empty -> .)
    IMAGE           reduce using rule 3 (empty -> .)
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)
    ELSE            reduce using rule 3 (empty -> .)

  ! TAB             [ reduce using rule 3 (empty -> .) ]

    empty                          shift and go to state 211
    moreTabs                       shift and go to state 262

state 253

    (31) functions -> DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule . functions
    (26) functions -> . DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (27) functions -> . DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (28) functions -> . DEF VOID ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (29) functions -> . DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (30) functions -> . DEF VOID MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (31) functions -> . DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (32) functions -> . empty
    (3) empty -> .

    DEF             shift and go to state 36
    $end            reduce using rule 3 (empty -> .)

    functions                      shift and go to state 263
    empty                          shift and go to state 38

state 254

    (29) functions -> DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule . functions
    (26) functions -> . DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (27) functions -> . DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (28) functions -> . DEF VOID ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (29) functions -> . DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (30) functions -> . DEF VOID MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (31) functions -> . DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (32) functions -> . empty
    (3) empty -> .

    DEF             shift and go to state 36
    $end            reduce using rule 3 (empty -> .)

    functions                      shift and go to state 264
    empty                          shift and go to state 38

state 255

    (27) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule . functions
    (26) functions -> . DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (27) functions -> . DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (28) functions -> . DEF VOID ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (29) functions -> . DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (30) functions -> . DEF VOID MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (31) functions -> . DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (32) functions -> . empty
    (3) empty -> .

    DEF             shift and go to state 36
    $end            reduce using rule 3 (empty -> .)

    functions                      shift and go to state 265
    empty                          shift and go to state 38

state 256

    (65) doCycle -> DO f_pushDo COLON . NEWLINE f_resetTab f_incTab block WHILE f_isDoWhile f_isCondition expression NEWLINE f_resetTab

    NEWLINE         shift and go to state 266


state 257

    (60) statement -> f_checkTab RETURN expression f_return . NEWLINE f_resetTab

    NEWLINE         shift and go to state 267


state 258

    (59) statement -> f_checkTab funct NEWLINE f_resetTab .

    TAB             reduce using rule 59 (statement -> f_checkTab funct NEWLINE f_resetTab .)
    DEF             reduce using rule 59 (statement -> f_checkTab funct NEWLINE f_resetTab .)
    $end            reduce using rule 59 (statement -> f_checkTab funct NEWLINE f_resetTab .)
    WHILE           reduce using rule 59 (statement -> f_checkTab funct NEWLINE f_resetTab .)
    ELSE            reduce using rule 59 (statement -> f_checkTab funct NEWLINE f_resetTab .)


state 259

    (64) cycle -> WHILE f_isCondition expression . COLON NEWLINE f_resetTab f_incTab block

    COLON           shift and go to state 268


state 260

    (62) condition -> IF f_isCondition expression . COLON NEWLINE f_resetTab f_incTab block
    (63) condition -> IF f_isCondition expression . COLON NEWLINE f_resetTab f_incTab block ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block

    COLON           shift and go to state 269


state 261

    (46) moreStatements -> TAB f_addTab moreTabs . statement moreStatements
    (54) statement -> . vars
    (55) statement -> . assign
    (56) statement -> . f_checkTab condition
    (57) statement -> . f_checkTab cycle
    (58) statement -> . f_checkTab doCycle
    (59) statement -> . f_checkTab funct NEWLINE f_resetTab
    (60) statement -> . f_checkTab RETURN expression f_return NEWLINE f_resetTab
    (16) vars -> . f_checkTab tipo idList NEWLINE f_resetTab vars
    (17) vars -> . empty
    (38) assign -> . f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual assign
    (39) assign -> . empty
    (53) f_checkTab -> .
    (3) empty -> .

  ! reduce/reduce conflict for WHILE resolved using rule 3 (empty -> .)
    RETURN          reduce using rule 53 (f_checkTab -> .)
    ID              reduce using rule 53 (f_checkTab -> .)
    IF              reduce using rule 53 (f_checkTab -> .)
    DO              reduce using rule 53 (f_checkTab -> .)
    BOOL            reduce using rule 53 (f_checkTab -> .)
    INT             reduce using rule 53 (f_checkTab -> .)
    FLOAT           reduce using rule 53 (f_checkTab -> .)
    STRING          reduce using rule 53 (f_checkTab -> .)
    IMAGE           reduce using rule 53 (f_checkTab -> .)
    TAB             reduce using rule 3 (empty -> .)
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)
    WHILE           reduce using rule 3 (empty -> .)
    ELSE            reduce using rule 3 (empty -> .)

  ! WHILE           [ reduce using rule 53 (f_checkTab -> .) ]

    vars                           shift and go to state 219
    f_checkTab                     shift and go to state 220
    empty                          shift and go to state 221
    statement                      shift and go to state 270
    assign                         shift and go to state 223

state 262

    (49) moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .

    TAB             reduce using rule 49 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    RETURN          reduce using rule 49 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    ID              reduce using rule 49 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    IF              reduce using rule 49 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    WHILE           reduce using rule 49 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    DO              reduce using rule 49 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    BOOL            reduce using rule 49 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    INT             reduce using rule 49 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    FLOAT           reduce using rule 49 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    STRING          reduce using rule 49 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    IMAGE           reduce using rule 49 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    DEF             reduce using rule 49 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    $end            reduce using rule 49 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    ELSE            reduce using rule 49 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)


state 263

    (31) functions -> DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions .

    $end            reduce using rule 31 (functions -> DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions .)


state 264

    (29) functions -> DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions .

    $end            reduce using rule 29 (functions -> DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions .)


state 265

    (27) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions .

    $end            reduce using rule 27 (functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions .)


state 266

    (65) doCycle -> DO f_pushDo COLON NEWLINE . f_resetTab f_incTab block WHILE f_isDoWhile f_isCondition expression NEWLINE f_resetTab
    (52) f_resetTab -> .

    TAB             reduce using rule 52 (f_resetTab -> .)
    WHILE           reduce using rule 52 (f_resetTab -> .)

    f_resetTab                     shift and go to state 271

state 267

    (60) statement -> f_checkTab RETURN expression f_return NEWLINE . f_resetTab
    (52) f_resetTab -> .

    TAB             reduce using rule 52 (f_resetTab -> .)
    DEF             reduce using rule 52 (f_resetTab -> .)
    $end            reduce using rule 52 (f_resetTab -> .)
    WHILE           reduce using rule 52 (f_resetTab -> .)
    ELSE            reduce using rule 52 (f_resetTab -> .)

    f_resetTab                     shift and go to state 272

state 268

    (64) cycle -> WHILE f_isCondition expression COLON . NEWLINE f_resetTab f_incTab block

    NEWLINE         shift and go to state 273


state 269

    (62) condition -> IF f_isCondition expression COLON . NEWLINE f_resetTab f_incTab block
    (63) condition -> IF f_isCondition expression COLON . NEWLINE f_resetTab f_incTab block ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block

    NEWLINE         shift and go to state 274


state 270

    (46) moreStatements -> TAB f_addTab moreTabs statement . moreStatements
    (45) moreStatements -> . empty
    (46) moreStatements -> . TAB f_addTab moreTabs statement moreStatements
    (3) empty -> .

  ! shift/reduce conflict for TAB resolved as shift
    TAB             shift and go to state 238
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)
    WHILE           reduce using rule 3 (empty -> .)
    ELSE            reduce using rule 3 (empty -> .)

  ! TAB             [ reduce using rule 3 (empty -> .) ]

    empty                          shift and go to state 239
    moreStatements                 shift and go to state 275

state 271

    (65) doCycle -> DO f_pushDo COLON NEWLINE f_resetTab . f_incTab block WHILE f_isDoWhile f_isCondition expression NEWLINE f_resetTab
    (50) f_incTab -> .

    TAB             reduce using rule 50 (f_incTab -> .)
    WHILE           reduce using rule 50 (f_incTab -> .)

    f_incTab                       shift and go to state 276

state 272

    (60) statement -> f_checkTab RETURN expression f_return NEWLINE f_resetTab .

    TAB             reduce using rule 60 (statement -> f_checkTab RETURN expression f_return NEWLINE f_resetTab .)
    DEF             reduce using rule 60 (statement -> f_checkTab RETURN expression f_return NEWLINE f_resetTab .)
    $end            reduce using rule 60 (statement -> f_checkTab RETURN expression f_return NEWLINE f_resetTab .)
    WHILE           reduce using rule 60 (statement -> f_checkTab RETURN expression f_return NEWLINE f_resetTab .)
    ELSE            reduce using rule 60 (statement -> f_checkTab RETURN expression f_return NEWLINE f_resetTab .)


state 273

    (64) cycle -> WHILE f_isCondition expression COLON NEWLINE . f_resetTab f_incTab block
    (52) f_resetTab -> .

    TAB             reduce using rule 52 (f_resetTab -> .)
    DEF             reduce using rule 52 (f_resetTab -> .)
    $end            reduce using rule 52 (f_resetTab -> .)
    WHILE           reduce using rule 52 (f_resetTab -> .)
    ELSE            reduce using rule 52 (f_resetTab -> .)

    f_resetTab                     shift and go to state 277

state 274

    (62) condition -> IF f_isCondition expression COLON NEWLINE . f_resetTab f_incTab block
    (63) condition -> IF f_isCondition expression COLON NEWLINE . f_resetTab f_incTab block ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block
    (52) f_resetTab -> .

    TAB             reduce using rule 52 (f_resetTab -> .)
    ELSE            reduce using rule 52 (f_resetTab -> .)
    DEF             reduce using rule 52 (f_resetTab -> .)
    $end            reduce using rule 52 (f_resetTab -> .)
    WHILE           reduce using rule 52 (f_resetTab -> .)

    f_resetTab                     shift and go to state 278

state 275

    (46) moreStatements -> TAB f_addTab moreTabs statement moreStatements .

    TAB             reduce using rule 46 (moreStatements -> TAB f_addTab moreTabs statement moreStatements .)
    DEF             reduce using rule 46 (moreStatements -> TAB f_addTab moreTabs statement moreStatements .)
    $end            reduce using rule 46 (moreStatements -> TAB f_addTab moreTabs statement moreStatements .)
    WHILE           reduce using rule 46 (moreStatements -> TAB f_addTab moreTabs statement moreStatements .)
    ELSE            reduce using rule 46 (moreStatements -> TAB f_addTab moreTabs statement moreStatements .)


state 276

    (65) doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab . block WHILE f_isDoWhile f_isCondition expression NEWLINE f_resetTab
    (43) block -> . empty
    (44) block -> . TAB f_addTab moreTabs statement moreStatements
    (3) empty -> .

    TAB             shift and go to state 189
    WHILE           reduce using rule 3 (empty -> .)

    empty                          shift and go to state 190
    block                          shift and go to state 279

state 277

    (64) cycle -> WHILE f_isCondition expression COLON NEWLINE f_resetTab . f_incTab block
    (50) f_incTab -> .

    TAB             reduce using rule 50 (f_incTab -> .)
    DEF             reduce using rule 50 (f_incTab -> .)
    $end            reduce using rule 50 (f_incTab -> .)
    WHILE           reduce using rule 50 (f_incTab -> .)
    ELSE            reduce using rule 50 (f_incTab -> .)

    f_incTab                       shift and go to state 280

state 278

    (62) condition -> IF f_isCondition expression COLON NEWLINE f_resetTab . f_incTab block
    (63) condition -> IF f_isCondition expression COLON NEWLINE f_resetTab . f_incTab block ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block
    (50) f_incTab -> .

    TAB             reduce using rule 50 (f_incTab -> .)
    ELSE            reduce using rule 50 (f_incTab -> .)
    DEF             reduce using rule 50 (f_incTab -> .)
    $end            reduce using rule 50 (f_incTab -> .)
    WHILE           reduce using rule 50 (f_incTab -> .)

    f_incTab                       shift and go to state 281

state 279

    (65) doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block . WHILE f_isDoWhile f_isCondition expression NEWLINE f_resetTab

    WHILE           shift and go to state 282


state 280

    (64) cycle -> WHILE f_isCondition expression COLON NEWLINE f_resetTab f_incTab . block
    (43) block -> . empty
    (44) block -> . TAB f_addTab moreTabs statement moreStatements
    (3) empty -> .

  ! shift/reduce conflict for TAB resolved as shift
    TAB             shift and go to state 189
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)
    WHILE           reduce using rule 3 (empty -> .)
    ELSE            reduce using rule 3 (empty -> .)

  ! TAB             [ reduce using rule 3 (empty -> .) ]

    block                          shift and go to state 283
    empty                          shift and go to state 190

state 281

    (62) condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab . block
    (63) condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab . block ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block
    (43) block -> . empty
    (44) block -> . TAB f_addTab moreTabs statement moreStatements
    (3) empty -> .

  ! shift/reduce conflict for TAB resolved as shift
    TAB             shift and go to state 189
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)
    WHILE           reduce using rule 3 (empty -> .)
    ELSE            reduce using rule 3 (empty -> .)

  ! TAB             [ reduce using rule 3 (empty -> .) ]

    empty                          shift and go to state 190
    block                          shift and go to state 284

state 282

    (65) doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block WHILE . f_isDoWhile f_isCondition expression NEWLINE f_resetTab
    (68) f_isDoWhile -> .

    LPAREN          reduce using rule 68 (f_isDoWhile -> .)
    ID              reduce using rule 68 (f_isDoWhile -> .)
    C_BOOL          reduce using rule 68 (f_isDoWhile -> .)
    C_INT           reduce using rule 68 (f_isDoWhile -> .)
    C_FLOAT         reduce using rule 68 (f_isDoWhile -> .)
    C_STRING        reduce using rule 68 (f_isDoWhile -> .)

    f_isDoWhile                    shift and go to state 285

state 283

    (64) cycle -> WHILE f_isCondition expression COLON NEWLINE f_resetTab f_incTab block .

    TAB             reduce using rule 64 (cycle -> WHILE f_isCondition expression COLON NEWLINE f_resetTab f_incTab block .)
    DEF             reduce using rule 64 (cycle -> WHILE f_isCondition expression COLON NEWLINE f_resetTab f_incTab block .)
    $end            reduce using rule 64 (cycle -> WHILE f_isCondition expression COLON NEWLINE f_resetTab f_incTab block .)
    WHILE           reduce using rule 64 (cycle -> WHILE f_isCondition expression COLON NEWLINE f_resetTab f_incTab block .)
    ELSE            reduce using rule 64 (cycle -> WHILE f_isCondition expression COLON NEWLINE f_resetTab f_incTab block .)


state 284

    (62) condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block .
    (63) condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block . ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block

  ! shift/reduce conflict for ELSE resolved as shift
    TAB             reduce using rule 62 (condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block .)
    DEF             reduce using rule 62 (condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block .)
    $end            reduce using rule 62 (condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block .)
    WHILE           reduce using rule 62 (condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block .)
    ELSE            shift and go to state 286

  ! ELSE            [ reduce using rule 62 (condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block .) ]


state 285

    (65) doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block WHILE f_isDoWhile . f_isCondition expression NEWLINE f_resetTab
    (69) f_isCondition -> .

    LPAREN          reduce using rule 69 (f_isCondition -> .)
    ID              reduce using rule 69 (f_isCondition -> .)
    C_BOOL          reduce using rule 69 (f_isCondition -> .)
    C_INT           reduce using rule 69 (f_isCondition -> .)
    C_FLOAT         reduce using rule 69 (f_isCondition -> .)
    C_STRING        reduce using rule 69 (f_isCondition -> .)

    f_isCondition                  shift and go to state 287

state 286

    (63) condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block ELSE . f_popIf COLON NEWLINE f_resetTab f_incTab block
    (66) f_popIf -> .

    COLON           reduce using rule 66 (f_popIf -> .)

    f_popIf                        shift and go to state 288

state 287

    (65) doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block WHILE f_isDoWhile f_isCondition . expression NEWLINE f_resetTab
    (76) expression -> . exp
    (77) expression -> . exp compareToken exp f_popComparation
    (85) exp -> . term moreTerms
    (90) term -> . factor moreFactors
    (95) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (96) factor -> . cvar
    (97) factor -> . funct
    (101) cvar -> . ID f_isID
    (102) cvar -> . C_BOOL f_isConst
    (103) cvar -> . C_INT f_isConst
    (104) cvar -> . C_FLOAT f_isConst
    (105) cvar -> . C_STRING f_isConst
    (70) funct -> . ID f_checkProc LPAREN RPAREN
    (71) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 84
    ID              shift and go to state 86
    C_BOOL          shift and go to state 82
    C_INT           shift and go to state 85
    C_FLOAT         shift and go to state 80
    C_STRING        shift and go to state 87

    funct                          shift and go to state 81
    cvar                           shift and go to state 79
    factor                         shift and go to state 83
    term                           shift and go to state 88
    exp                            shift and go to state 89
    expression                     shift and go to state 289

state 288

    (63) condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block ELSE f_popIf . COLON NEWLINE f_resetTab f_incTab block

    COLON           shift and go to state 290


state 289

    (65) doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block WHILE f_isDoWhile f_isCondition expression . NEWLINE f_resetTab

    NEWLINE         shift and go to state 291


state 290

    (63) condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block ELSE f_popIf COLON . NEWLINE f_resetTab f_incTab block

    NEWLINE         shift and go to state 292


state 291

    (65) doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block WHILE f_isDoWhile f_isCondition expression NEWLINE . f_resetTab
    (52) f_resetTab -> .

    TAB             reduce using rule 52 (f_resetTab -> .)
    DEF             reduce using rule 52 (f_resetTab -> .)
    $end            reduce using rule 52 (f_resetTab -> .)
    WHILE           reduce using rule 52 (f_resetTab -> .)
    ELSE            reduce using rule 52 (f_resetTab -> .)

    f_resetTab                     shift and go to state 293

state 292

    (63) condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block ELSE f_popIf COLON NEWLINE . f_resetTab f_incTab block
    (52) f_resetTab -> .

    TAB             reduce using rule 52 (f_resetTab -> .)
    DEF             reduce using rule 52 (f_resetTab -> .)
    $end            reduce using rule 52 (f_resetTab -> .)
    WHILE           reduce using rule 52 (f_resetTab -> .)
    ELSE            reduce using rule 52 (f_resetTab -> .)

    f_resetTab                     shift and go to state 294

state 293

    (65) doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block WHILE f_isDoWhile f_isCondition expression NEWLINE f_resetTab .

    TAB             reduce using rule 65 (doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block WHILE f_isDoWhile f_isCondition expression NEWLINE f_resetTab .)
    DEF             reduce using rule 65 (doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block WHILE f_isDoWhile f_isCondition expression NEWLINE f_resetTab .)
    $end            reduce using rule 65 (doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block WHILE f_isDoWhile f_isCondition expression NEWLINE f_resetTab .)
    WHILE           reduce using rule 65 (doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block WHILE f_isDoWhile f_isCondition expression NEWLINE f_resetTab .)
    ELSE            reduce using rule 65 (doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block WHILE f_isDoWhile f_isCondition expression NEWLINE f_resetTab .)


state 294

    (63) condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block ELSE f_popIf COLON NEWLINE f_resetTab . f_incTab block
    (50) f_incTab -> .

    TAB             reduce using rule 50 (f_incTab -> .)
    DEF             reduce using rule 50 (f_incTab -> .)
    $end            reduce using rule 50 (f_incTab -> .)
    WHILE           reduce using rule 50 (f_incTab -> .)
    ELSE            reduce using rule 50 (f_incTab -> .)

    f_incTab                       shift and go to state 295

state 295

    (63) condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block ELSE f_popIf COLON NEWLINE f_resetTab f_incTab . block
    (43) block -> . empty
    (44) block -> . TAB f_addTab moreTabs statement moreStatements
    (3) empty -> .

  ! shift/reduce conflict for TAB resolved as shift
    TAB             shift and go to state 189
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)
    WHILE           reduce using rule 3 (empty -> .)
    ELSE            reduce using rule 3 (empty -> .)

  ! TAB             [ reduce using rule 3 (empty -> .) ]

    empty                          shift and go to state 190
    block                          shift and go to state 296

state 296

    (63) condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block .

    TAB             reduce using rule 63 (condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block .)
    DEF             reduce using rule 63 (condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block .)
    $end            reduce using rule 63 (condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block .)
    WHILE           reduce using rule 63 (condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block .)
    ELSE            reduce using rule 63 (condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for TAB in state 199 resolved as shift
WARNING: shift/reduce conflict for TAB in state 222 resolved as shift
WARNING: shift/reduce conflict for TAB in state 224 resolved as shift
WARNING: shift/reduce conflict for TAB in state 251 resolved as shift
WARNING: shift/reduce conflict for TAB in state 252 resolved as shift
WARNING: shift/reduce conflict for TAB in state 270 resolved as shift
WARNING: shift/reduce conflict for TAB in state 280 resolved as shift
WARNING: shift/reduce conflict for TAB in state 281 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 284 resolved as shift
WARNING: shift/reduce conflict for TAB in state 295 resolved as shift
WARNING: reduce/reduce conflict in state 208 resolved using rule (empty -> <empty>)
WARNING: rejected rule (f_checkTab -> <empty>) in state 208
WARNING: reduce/reduce conflict in state 221 resolved using rule (vars -> empty)
WARNING: rejected rule (assign -> empty) in state 221
WARNING: reduce/reduce conflict in state 261 resolved using rule (empty -> <empty>)
WARNING: rejected rule (f_checkTab -> <empty>) in state 261
