Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    PERIOD
    AND
    NOT
    OR

Grammar

Rule 0     S' -> program
Rule 1     program -> programName hardware vars assign functions
Rule 2     programName -> PROGRAM ID NEWLINE
Rule 3     empty -> <empty>
Rule 4     hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration
Rule 5     camDeclaration -> empty
Rule 6     camDeclaration -> CAM WEBCAM COLON ID NEWLINE
Rule 7     camDeclaration -> CAM PICAM COLON ID NEWLINE
Rule 8     inputsDeclaration -> empty
Rule 9     inputsDeclaration -> INPUT f_saveType pinList NEWLINE
Rule 10    outputsDeclaration -> empty
Rule 11    outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE
Rule 12    pwmDeclaration -> empty
Rule 13    pwmDeclaration -> PWM f_saveType pinList NEWLINE
Rule 14    pinList -> C_INT COLON ID
Rule 15    pinList -> C_INT COLON ID COMMA pinList
Rule 16    vars -> tipo idList NEWLINE vars
Rule 17    vars -> empty
Rule 18    f_saveType -> <empty>
Rule 19    idList -> ID
Rule 20    idList -> ID COMMA idList
Rule 21    tipo -> BOOL f_saveType
Rule 22    tipo -> INT f_saveType
Rule 23    tipo -> FLOAT f_saveType
Rule 24    tipo -> STRING f_saveType
Rule 25    tipo -> IMAGE f_saveType
Rule 26    functions -> DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE block f_endModule functions
Rule 27    functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block f_endModule functions
Rule 28    functions -> DEF VOID ID f_saveModule LPAREN RPAREN COLON NEWLINE block f_endModule functions
Rule 29    functions -> DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block f_endModule functions
Rule 30    functions -> DEF VOID MAIN f_saveModule LPAREN RPAREN COLON NEWLINE block f_endModule functions
Rule 31    functions -> DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block f_endModule functions
Rule 32    functions -> empty
Rule 33    f_endModule -> <empty>
Rule 34    f_saveModule -> <empty>
Rule 35    parameterList -> empty
Rule 36    parameterList -> COMMA tipo ID f_addToParam parameterList
Rule 37    f_addToParam -> <empty>
Rule 38    assign -> ID f_checkID EQUAL expression NEWLINE f_generateEqual assign
Rule 39    assign -> empty
Rule 40    f_generateEqual -> <empty>
Rule 41    f_checkID -> <empty>
Rule 42    block -> empty
Rule 43    block -> TAB newline_tab statement moreStatements
Rule 44    moreStatements -> empty
Rule 45    moreStatements -> TAB newline_tab statement moreStatements
Rule 46    newline_tab -> empty
Rule 47    newline_tab -> NEWLINE TAB newline_tab
Rule 48    statement -> vars
Rule 49    statement -> assign
Rule 50    statement -> condition
Rule 51    statement -> cycle
Rule 52    statement -> doCycle
Rule 53    statement -> funct NEWLINE
Rule 54    statement -> RETURN expression f_return NEWLINE
Rule 55    f_return -> <empty>
Rule 56    condition -> IF f_isCondition expression COLON NEWLINE block
Rule 57    condition -> IF f_isCondition expression COLON NEWLINE block ELSE f_popIf COLON NEWLINE block
Rule 58    cycle -> WHILE f_isCondition expression COLON NEWLINE block
Rule 59    doCycle -> DO f_pushDo COLON NEWLINE block WHILE f_isDoWhile f_isCondition expression NEWLINE
Rule 60    f_popIf -> <empty>
Rule 61    f_pushDo -> <empty>
Rule 62    f_isDoWhile -> <empty>
Rule 63    f_isCondition -> <empty>
Rule 64    funct -> ID f_checkProc LPAREN RPAREN
Rule 65    funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN
Rule 66    f_checkProc -> <empty>
Rule 67    expressionList -> empty
Rule 68    expressionList -> COMMA expression f_genParam expressionList
Rule 69    f_genParam -> <empty>
Rule 70    expression -> exp
Rule 71    expression -> exp compareToken exp f_popComparation
Rule 72    f_popComparation -> <empty>
Rule 73    compareToken -> GREATER_THAN
Rule 74    compareToken -> LESS_THAN
Rule 75    compareToken -> LESS_EQUAL_THAN
Rule 76    compareToken -> GREATER_EQUAL_THAN
Rule 77    compareToken -> NOT_EQUAL_THAN
Rule 78    compareToken -> SAME_AS
Rule 79    exp -> term moreTerms
Rule 80    moreTerms -> empty
Rule 81    moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms
Rule 82    moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms
Rule 83    f_popTerm -> <empty>
Rule 84    term -> factor moreFactors
Rule 85    moreFactors -> empty
Rule 86    moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors
Rule 87    moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors
Rule 88    moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors
Rule 89    factor -> LPAREN f_pushOperator expression RPAREN f_popOperator
Rule 90    factor -> cvar
Rule 91    factor -> funct
Rule 92    f_pushOperator -> <empty>
Rule 93    f_popOperator -> <empty>
Rule 94    f_popFactor -> <empty>
Rule 95    cvar -> ID f_isID
Rule 96    cvar -> C_BOOL f_isConst
Rule 97    cvar -> C_INT f_isConst
Rule 98    cvar -> C_FLOAT f_isConst
Rule 99    cvar -> C_STRING f_isConst
Rule 100   f_isID -> <empty>
Rule 101   f_isConst -> <empty>

Terminals, with rules where they appear

AND                  : 
BOOL                 : 21
CAM                  : 6 7
COLON                : 6 7 14 15 26 27 28 29 30 31 56 57 57 58 59
COMMA                : 15 20 36 68
C_BOOL               : 96
C_FLOAT              : 98
C_INT                : 14 15 97
C_STRING             : 99
DEF                  : 26 27 28 29 30 31
DIVIDE               : 86
DO                   : 59
ELSE                 : 57
EQUAL                : 38
FLOAT                : 23
GREATER_EQUAL_THAN   : 76
GREATER_THAN         : 73
ID                   : 2 6 7 14 15 19 20 26 27 27 28 29 29 31 36 38 64 65 95
IF                   : 56 57
IMAGE                : 25
INPUT                : 9
INT                  : 22
LESS_EQUAL_THAN      : 75
LESS_THAN            : 74
LPAREN               : 26 27 28 29 30 31 64 65 89
MAIN                 : 30 31
MINUS                : 82
MOD                  : 88
NEWLINE              : 2 6 7 9 11 13 16 26 27 28 29 30 31 38 47 53 54 56 57 57 58 59 59
NOT                  : 
NOT_EQUAL_THAN       : 77
OR                   : 
OUTPUT               : 11
PERIOD               : 
PICAM                : 7
PLUS                 : 81
PROGRAM              : 2
PWM                  : 13
RETURN               : 54
RPAREN               : 26 27 28 29 30 31 64 65 89
SAME_AS              : 78
STRING               : 24
TAB                  : 43 45 47
TIMES                : 87
VOID                 : 28 29 30 31
WEBCAM               : 6
WHILE                : 58 59
error                : 

Nonterminals, with rules where they appear

assign               : 1 38 49
block                : 26 27 28 29 30 31 56 57 57 58 59
camDeclaration       : 4
compareToken         : 71
condition            : 50
cvar                 : 90
cycle                : 51
doCycle              : 52
empty                : 5 8 10 12 17 32 35 39 42 44 46 67 80 85
exp                  : 70 71 71
expression           : 38 54 56 57 58 59 65 68 89
expressionList       : 65 68
f_addToParam         : 27 29 31 36
f_checkID            : 38
f_checkProc          : 64 65
f_endModule          : 26 27 28 29 30 31
f_genParam           : 65 68
f_generateEqual      : 38
f_isCondition        : 56 57 58 59
f_isConst            : 96 97 98 99
f_isDoWhile          : 59
f_isID               : 95
f_popComparation     : 71
f_popFactor          : 86 87 88
f_popIf              : 57
f_popOperator        : 89
f_popTerm            : 81 82
f_pushDo             : 59
f_pushOperator       : 81 82 86 87 88 89
f_return             : 54
f_saveModule         : 26 27 28 29 30 31
f_saveType           : 9 11 13 21 22 23 24 25
factor               : 84 86 87 88
funct                : 53 91
functions            : 1 26 27 28 29 30 31
hardware             : 1
idList               : 16 20
inputsDeclaration    : 4
moreFactors          : 84 86 87 88
moreStatements       : 43 45
moreTerms            : 79 81 82
newline_tab          : 43 45 47
outputsDeclaration   : 4
parameterList        : 27 29 31 36
pinList              : 9 11 13 15
program              : 0
programName          : 1
pwmDeclaration       : 4
statement            : 43 45
term                 : 79 81 82
tipo                 : 16 26 27 27 29 31 36
vars                 : 1 16 48

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . programName hardware vars assign functions
    (2) programName -> . PROGRAM ID NEWLINE

    PROGRAM         shift and go to state 3

    program                        shift and go to state 1
    programName                    shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> programName . hardware vars assign functions
    (4) hardware -> . camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration
    (5) camDeclaration -> . empty
    (6) camDeclaration -> . CAM WEBCAM COLON ID NEWLINE
    (7) camDeclaration -> . CAM PICAM COLON ID NEWLINE
    (3) empty -> .

    CAM             shift and go to state 4
    INPUT           reduce using rule 3 (empty -> .)
    OUTPUT          reduce using rule 3 (empty -> .)
    PWM             reduce using rule 3 (empty -> .)
    BOOL            reduce using rule 3 (empty -> .)
    INT             reduce using rule 3 (empty -> .)
    FLOAT           reduce using rule 3 (empty -> .)
    STRING          reduce using rule 3 (empty -> .)
    IMAGE           reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)

    hardware                       shift and go to state 5
    camDeclaration                 shift and go to state 6
    empty                          shift and go to state 7

state 3

    (2) programName -> PROGRAM . ID NEWLINE

    ID              shift and go to state 8


state 4

    (6) camDeclaration -> CAM . WEBCAM COLON ID NEWLINE
    (7) camDeclaration -> CAM . PICAM COLON ID NEWLINE

    WEBCAM          shift and go to state 9
    PICAM           shift and go to state 10


state 5

    (1) program -> programName hardware . vars assign functions
    (16) vars -> . tipo idList NEWLINE vars
    (17) vars -> . empty
    (21) tipo -> . BOOL f_saveType
    (22) tipo -> . INT f_saveType
    (23) tipo -> . FLOAT f_saveType
    (24) tipo -> . STRING f_saveType
    (25) tipo -> . IMAGE f_saveType
    (3) empty -> .

    BOOL            shift and go to state 16
    INT             shift and go to state 14
    FLOAT           shift and go to state 11
    STRING          shift and go to state 17
    IMAGE           shift and go to state 15
    ID              reduce using rule 3 (empty -> .)
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)

    vars                           shift and go to state 12
    tipo                           shift and go to state 13
    empty                          shift and go to state 18

state 6

    (4) hardware -> camDeclaration . inputsDeclaration outputsDeclaration pwmDeclaration
    (8) inputsDeclaration -> . empty
    (9) inputsDeclaration -> . INPUT f_saveType pinList NEWLINE
    (3) empty -> .

    INPUT           shift and go to state 20
    OUTPUT          reduce using rule 3 (empty -> .)
    PWM             reduce using rule 3 (empty -> .)
    BOOL            reduce using rule 3 (empty -> .)
    INT             reduce using rule 3 (empty -> .)
    FLOAT           reduce using rule 3 (empty -> .)
    STRING          reduce using rule 3 (empty -> .)
    IMAGE           reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)

    inputsDeclaration              shift and go to state 19
    empty                          shift and go to state 21

state 7

    (5) camDeclaration -> empty .

    INPUT           reduce using rule 5 (camDeclaration -> empty .)
    OUTPUT          reduce using rule 5 (camDeclaration -> empty .)
    PWM             reduce using rule 5 (camDeclaration -> empty .)
    BOOL            reduce using rule 5 (camDeclaration -> empty .)
    INT             reduce using rule 5 (camDeclaration -> empty .)
    FLOAT           reduce using rule 5 (camDeclaration -> empty .)
    STRING          reduce using rule 5 (camDeclaration -> empty .)
    IMAGE           reduce using rule 5 (camDeclaration -> empty .)
    ID              reduce using rule 5 (camDeclaration -> empty .)
    DEF             reduce using rule 5 (camDeclaration -> empty .)
    $end            reduce using rule 5 (camDeclaration -> empty .)


state 8

    (2) programName -> PROGRAM ID . NEWLINE

    NEWLINE         shift and go to state 22


state 9

    (6) camDeclaration -> CAM WEBCAM . COLON ID NEWLINE

    COLON           shift and go to state 23


state 10

    (7) camDeclaration -> CAM PICAM . COLON ID NEWLINE

    COLON           shift and go to state 24


state 11

    (23) tipo -> FLOAT . f_saveType
    (18) f_saveType -> .

    ID              reduce using rule 18 (f_saveType -> .)

    f_saveType                     shift and go to state 25

state 12

    (1) program -> programName hardware vars . assign functions
    (38) assign -> . ID f_checkID EQUAL expression NEWLINE f_generateEqual assign
    (39) assign -> . empty
    (3) empty -> .

    ID              shift and go to state 27
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)

    assign                         shift and go to state 26
    empty                          shift and go to state 28

state 13

    (16) vars -> tipo . idList NEWLINE vars
    (19) idList -> . ID
    (20) idList -> . ID COMMA idList

    ID              shift and go to state 30

    idList                         shift and go to state 29

state 14

    (22) tipo -> INT . f_saveType
    (18) f_saveType -> .

    ID              reduce using rule 18 (f_saveType -> .)

    f_saveType                     shift and go to state 31

state 15

    (25) tipo -> IMAGE . f_saveType
    (18) f_saveType -> .

    ID              reduce using rule 18 (f_saveType -> .)

    f_saveType                     shift and go to state 32

state 16

    (21) tipo -> BOOL . f_saveType
    (18) f_saveType -> .

    ID              reduce using rule 18 (f_saveType -> .)

    f_saveType                     shift and go to state 33

state 17

    (24) tipo -> STRING . f_saveType
    (18) f_saveType -> .

    ID              reduce using rule 18 (f_saveType -> .)

    f_saveType                     shift and go to state 34

state 18

    (17) vars -> empty .

    ID              reduce using rule 17 (vars -> empty .)
    DEF             reduce using rule 17 (vars -> empty .)
    $end            reduce using rule 17 (vars -> empty .)
    TAB             reduce using rule 17 (vars -> empty .)
    WHILE           reduce using rule 17 (vars -> empty .)
    ELSE            reduce using rule 17 (vars -> empty .)


state 19

    (4) hardware -> camDeclaration inputsDeclaration . outputsDeclaration pwmDeclaration
    (10) outputsDeclaration -> . empty
    (11) outputsDeclaration -> . OUTPUT f_saveType pinList NEWLINE
    (3) empty -> .

    OUTPUT          shift and go to state 36
    PWM             reduce using rule 3 (empty -> .)
    BOOL            reduce using rule 3 (empty -> .)
    INT             reduce using rule 3 (empty -> .)
    FLOAT           reduce using rule 3 (empty -> .)
    STRING          reduce using rule 3 (empty -> .)
    IMAGE           reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)

    outputsDeclaration             shift and go to state 35
    empty                          shift and go to state 37

state 20

    (9) inputsDeclaration -> INPUT . f_saveType pinList NEWLINE
    (18) f_saveType -> .

    C_INT           reduce using rule 18 (f_saveType -> .)

    f_saveType                     shift and go to state 38

state 21

    (8) inputsDeclaration -> empty .

    OUTPUT          reduce using rule 8 (inputsDeclaration -> empty .)
    PWM             reduce using rule 8 (inputsDeclaration -> empty .)
    BOOL            reduce using rule 8 (inputsDeclaration -> empty .)
    INT             reduce using rule 8 (inputsDeclaration -> empty .)
    FLOAT           reduce using rule 8 (inputsDeclaration -> empty .)
    STRING          reduce using rule 8 (inputsDeclaration -> empty .)
    IMAGE           reduce using rule 8 (inputsDeclaration -> empty .)
    ID              reduce using rule 8 (inputsDeclaration -> empty .)
    DEF             reduce using rule 8 (inputsDeclaration -> empty .)
    $end            reduce using rule 8 (inputsDeclaration -> empty .)


state 22

    (2) programName -> PROGRAM ID NEWLINE .

    CAM             reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)
    BOOL            reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)
    INT             reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)
    FLOAT           reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)
    STRING          reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)
    IMAGE           reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)
    ID              reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)
    DEF             reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)
    INPUT           reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)
    OUTPUT          reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)
    PWM             reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)
    $end            reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)


state 23

    (6) camDeclaration -> CAM WEBCAM COLON . ID NEWLINE

    ID              shift and go to state 39


state 24

    (7) camDeclaration -> CAM PICAM COLON . ID NEWLINE

    ID              shift and go to state 40


state 25

    (23) tipo -> FLOAT f_saveType .

    ID              reduce using rule 23 (tipo -> FLOAT f_saveType .)


state 26

    (1) program -> programName hardware vars assign . functions
    (26) functions -> . DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE block f_endModule functions
    (27) functions -> . DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block f_endModule functions
    (28) functions -> . DEF VOID ID f_saveModule LPAREN RPAREN COLON NEWLINE block f_endModule functions
    (29) functions -> . DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block f_endModule functions
    (30) functions -> . DEF VOID MAIN f_saveModule LPAREN RPAREN COLON NEWLINE block f_endModule functions
    (31) functions -> . DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block f_endModule functions
    (32) functions -> . empty
    (3) empty -> .

    DEF             shift and go to state 43
    $end            reduce using rule 3 (empty -> .)

    functions                      shift and go to state 41
    empty                          shift and go to state 42

state 27

    (38) assign -> ID . f_checkID EQUAL expression NEWLINE f_generateEqual assign
    (41) f_checkID -> .

    EQUAL           reduce using rule 41 (f_checkID -> .)

    f_checkID                      shift and go to state 44

state 28

    (39) assign -> empty .

    DEF             reduce using rule 39 (assign -> empty .)
    $end            reduce using rule 39 (assign -> empty .)
    TAB             reduce using rule 39 (assign -> empty .)
    WHILE           reduce using rule 39 (assign -> empty .)
    ELSE            reduce using rule 39 (assign -> empty .)


state 29

    (16) vars -> tipo idList . NEWLINE vars

    NEWLINE         shift and go to state 45


state 30

    (19) idList -> ID .
    (20) idList -> ID . COMMA idList

    NEWLINE         reduce using rule 19 (idList -> ID .)
    COMMA           shift and go to state 46


state 31

    (22) tipo -> INT f_saveType .

    ID              reduce using rule 22 (tipo -> INT f_saveType .)


state 32

    (25) tipo -> IMAGE f_saveType .

    ID              reduce using rule 25 (tipo -> IMAGE f_saveType .)


state 33

    (21) tipo -> BOOL f_saveType .

    ID              reduce using rule 21 (tipo -> BOOL f_saveType .)


state 34

    (24) tipo -> STRING f_saveType .

    ID              reduce using rule 24 (tipo -> STRING f_saveType .)


state 35

    (4) hardware -> camDeclaration inputsDeclaration outputsDeclaration . pwmDeclaration
    (12) pwmDeclaration -> . empty
    (13) pwmDeclaration -> . PWM f_saveType pinList NEWLINE
    (3) empty -> .

    PWM             shift and go to state 48
    BOOL            reduce using rule 3 (empty -> .)
    INT             reduce using rule 3 (empty -> .)
    FLOAT           reduce using rule 3 (empty -> .)
    STRING          reduce using rule 3 (empty -> .)
    IMAGE           reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)

    pwmDeclaration                 shift and go to state 47
    empty                          shift and go to state 49

state 36

    (11) outputsDeclaration -> OUTPUT . f_saveType pinList NEWLINE
    (18) f_saveType -> .

    C_INT           reduce using rule 18 (f_saveType -> .)

    f_saveType                     shift and go to state 50

state 37

    (10) outputsDeclaration -> empty .

    PWM             reduce using rule 10 (outputsDeclaration -> empty .)
    BOOL            reduce using rule 10 (outputsDeclaration -> empty .)
    INT             reduce using rule 10 (outputsDeclaration -> empty .)
    FLOAT           reduce using rule 10 (outputsDeclaration -> empty .)
    STRING          reduce using rule 10 (outputsDeclaration -> empty .)
    IMAGE           reduce using rule 10 (outputsDeclaration -> empty .)
    ID              reduce using rule 10 (outputsDeclaration -> empty .)
    DEF             reduce using rule 10 (outputsDeclaration -> empty .)
    $end            reduce using rule 10 (outputsDeclaration -> empty .)


state 38

    (9) inputsDeclaration -> INPUT f_saveType . pinList NEWLINE
    (14) pinList -> . C_INT COLON ID
    (15) pinList -> . C_INT COLON ID COMMA pinList

    C_INT           shift and go to state 52

    pinList                        shift and go to state 51

state 39

    (6) camDeclaration -> CAM WEBCAM COLON ID . NEWLINE

    NEWLINE         shift and go to state 53


state 40

    (7) camDeclaration -> CAM PICAM COLON ID . NEWLINE

    NEWLINE         shift and go to state 54


state 41

    (1) program -> programName hardware vars assign functions .

    $end            reduce using rule 1 (program -> programName hardware vars assign functions .)


state 42

    (32) functions -> empty .

    $end            reduce using rule 32 (functions -> empty .)


state 43

    (26) functions -> DEF . tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE block f_endModule functions
    (27) functions -> DEF . tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block f_endModule functions
    (28) functions -> DEF . VOID ID f_saveModule LPAREN RPAREN COLON NEWLINE block f_endModule functions
    (29) functions -> DEF . VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block f_endModule functions
    (30) functions -> DEF . VOID MAIN f_saveModule LPAREN RPAREN COLON NEWLINE block f_endModule functions
    (31) functions -> DEF . VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block f_endModule functions
    (21) tipo -> . BOOL f_saveType
    (22) tipo -> . INT f_saveType
    (23) tipo -> . FLOAT f_saveType
    (24) tipo -> . STRING f_saveType
    (25) tipo -> . IMAGE f_saveType

    VOID            shift and go to state 56
    BOOL            shift and go to state 16
    INT             shift and go to state 14
    FLOAT           shift and go to state 11
    STRING          shift and go to state 17
    IMAGE           shift and go to state 15

    tipo                           shift and go to state 55

state 44

    (38) assign -> ID f_checkID . EQUAL expression NEWLINE f_generateEqual assign

    EQUAL           shift and go to state 57


state 45

    (16) vars -> tipo idList NEWLINE . vars
    (16) vars -> . tipo idList NEWLINE vars
    (17) vars -> . empty
    (21) tipo -> . BOOL f_saveType
    (22) tipo -> . INT f_saveType
    (23) tipo -> . FLOAT f_saveType
    (24) tipo -> . STRING f_saveType
    (25) tipo -> . IMAGE f_saveType
    (3) empty -> .

    BOOL            shift and go to state 16
    INT             shift and go to state 14
    FLOAT           shift and go to state 11
    STRING          shift and go to state 17
    IMAGE           shift and go to state 15
    ID              reduce using rule 3 (empty -> .)
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)
    TAB             reduce using rule 3 (empty -> .)
    WHILE           reduce using rule 3 (empty -> .)
    ELSE            reduce using rule 3 (empty -> .)

    vars                           shift and go to state 58
    empty                          shift and go to state 18
    tipo                           shift and go to state 13

state 46

    (20) idList -> ID COMMA . idList
    (19) idList -> . ID
    (20) idList -> . ID COMMA idList

    ID              shift and go to state 30

    idList                         shift and go to state 59

state 47

    (4) hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .

    BOOL            reduce using rule 4 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    INT             reduce using rule 4 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    FLOAT           reduce using rule 4 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    STRING          reduce using rule 4 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    IMAGE           reduce using rule 4 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    ID              reduce using rule 4 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    DEF             reduce using rule 4 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    $end            reduce using rule 4 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)


state 48

    (13) pwmDeclaration -> PWM . f_saveType pinList NEWLINE
    (18) f_saveType -> .

    C_INT           reduce using rule 18 (f_saveType -> .)

    f_saveType                     shift and go to state 60

state 49

    (12) pwmDeclaration -> empty .

    BOOL            reduce using rule 12 (pwmDeclaration -> empty .)
    INT             reduce using rule 12 (pwmDeclaration -> empty .)
    FLOAT           reduce using rule 12 (pwmDeclaration -> empty .)
    STRING          reduce using rule 12 (pwmDeclaration -> empty .)
    IMAGE           reduce using rule 12 (pwmDeclaration -> empty .)
    ID              reduce using rule 12 (pwmDeclaration -> empty .)
    DEF             reduce using rule 12 (pwmDeclaration -> empty .)
    $end            reduce using rule 12 (pwmDeclaration -> empty .)


state 50

    (11) outputsDeclaration -> OUTPUT f_saveType . pinList NEWLINE
    (14) pinList -> . C_INT COLON ID
    (15) pinList -> . C_INT COLON ID COMMA pinList

    C_INT           shift and go to state 52

    pinList                        shift and go to state 61

state 51

    (9) inputsDeclaration -> INPUT f_saveType pinList . NEWLINE

    NEWLINE         shift and go to state 62


state 52

    (14) pinList -> C_INT . COLON ID
    (15) pinList -> C_INT . COLON ID COMMA pinList

    COLON           shift and go to state 63


state 53

    (6) camDeclaration -> CAM WEBCAM COLON ID NEWLINE .

    INPUT           reduce using rule 6 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    OUTPUT          reduce using rule 6 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    PWM             reduce using rule 6 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    BOOL            reduce using rule 6 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    INT             reduce using rule 6 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    FLOAT           reduce using rule 6 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    STRING          reduce using rule 6 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    IMAGE           reduce using rule 6 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    ID              reduce using rule 6 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    DEF             reduce using rule 6 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    $end            reduce using rule 6 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)


state 54

    (7) camDeclaration -> CAM PICAM COLON ID NEWLINE .

    INPUT           reduce using rule 7 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    OUTPUT          reduce using rule 7 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    PWM             reduce using rule 7 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    BOOL            reduce using rule 7 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    INT             reduce using rule 7 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    FLOAT           reduce using rule 7 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    STRING          reduce using rule 7 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    IMAGE           reduce using rule 7 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    ID              reduce using rule 7 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    DEF             reduce using rule 7 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    $end            reduce using rule 7 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)


state 55

    (26) functions -> DEF tipo . ID f_saveModule LPAREN RPAREN COLON NEWLINE block f_endModule functions
    (27) functions -> DEF tipo . ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block f_endModule functions

    ID              shift and go to state 64


state 56

    (28) functions -> DEF VOID . ID f_saveModule LPAREN RPAREN COLON NEWLINE block f_endModule functions
    (29) functions -> DEF VOID . ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block f_endModule functions
    (30) functions -> DEF VOID . MAIN f_saveModule LPAREN RPAREN COLON NEWLINE block f_endModule functions
    (31) functions -> DEF VOID . MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block f_endModule functions

    ID              shift and go to state 66
    MAIN            shift and go to state 65


state 57

    (38) assign -> ID f_checkID EQUAL . expression NEWLINE f_generateEqual assign
    (70) expression -> . exp
    (71) expression -> . exp compareToken exp f_popComparation
    (79) exp -> . term moreTerms
    (84) term -> . factor moreFactors
    (89) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (90) factor -> . cvar
    (91) factor -> . funct
    (95) cvar -> . ID f_isID
    (96) cvar -> . C_BOOL f_isConst
    (97) cvar -> . C_INT f_isConst
    (98) cvar -> . C_FLOAT f_isConst
    (99) cvar -> . C_STRING f_isConst
    (64) funct -> . ID f_checkProc LPAREN RPAREN
    (65) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 72
    ID              shift and go to state 74
    C_BOOL          shift and go to state 70
    C_INT           shift and go to state 73
    C_FLOAT         shift and go to state 68
    C_STRING        shift and go to state 75

    term                           shift and go to state 76
    funct                          shift and go to state 69
    exp                            shift and go to state 77
    factor                         shift and go to state 71
    cvar                           shift and go to state 67
    expression                     shift and go to state 78

state 58

    (16) vars -> tipo idList NEWLINE vars .

    TAB             reduce using rule 16 (vars -> tipo idList NEWLINE vars .)
    DEF             reduce using rule 16 (vars -> tipo idList NEWLINE vars .)
    $end            reduce using rule 16 (vars -> tipo idList NEWLINE vars .)
    WHILE           reduce using rule 16 (vars -> tipo idList NEWLINE vars .)
    ELSE            reduce using rule 16 (vars -> tipo idList NEWLINE vars .)
    ID              reduce using rule 16 (vars -> tipo idList NEWLINE vars .)


state 59

    (20) idList -> ID COMMA idList .

    NEWLINE         reduce using rule 20 (idList -> ID COMMA idList .)


state 60

    (13) pwmDeclaration -> PWM f_saveType . pinList NEWLINE
    (14) pinList -> . C_INT COLON ID
    (15) pinList -> . C_INT COLON ID COMMA pinList

    C_INT           shift and go to state 52

    pinList                        shift and go to state 79

state 61

    (11) outputsDeclaration -> OUTPUT f_saveType pinList . NEWLINE

    NEWLINE         shift and go to state 80


state 62

    (9) inputsDeclaration -> INPUT f_saveType pinList NEWLINE .

    OUTPUT          reduce using rule 9 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    PWM             reduce using rule 9 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    BOOL            reduce using rule 9 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    INT             reduce using rule 9 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    FLOAT           reduce using rule 9 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    STRING          reduce using rule 9 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    IMAGE           reduce using rule 9 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    ID              reduce using rule 9 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    DEF             reduce using rule 9 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    $end            reduce using rule 9 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)


state 63

    (14) pinList -> C_INT COLON . ID
    (15) pinList -> C_INT COLON . ID COMMA pinList

    ID              shift and go to state 81


state 64

    (26) functions -> DEF tipo ID . f_saveModule LPAREN RPAREN COLON NEWLINE block f_endModule functions
    (27) functions -> DEF tipo ID . f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block f_endModule functions
    (34) f_saveModule -> .

    LPAREN          reduce using rule 34 (f_saveModule -> .)

    f_saveModule                   shift and go to state 82

state 65

    (30) functions -> DEF VOID MAIN . f_saveModule LPAREN RPAREN COLON NEWLINE block f_endModule functions
    (31) functions -> DEF VOID MAIN . f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block f_endModule functions
    (34) f_saveModule -> .

    LPAREN          reduce using rule 34 (f_saveModule -> .)

    f_saveModule                   shift and go to state 83

state 66

    (28) functions -> DEF VOID ID . f_saveModule LPAREN RPAREN COLON NEWLINE block f_endModule functions
    (29) functions -> DEF VOID ID . f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block f_endModule functions
    (34) f_saveModule -> .

    LPAREN          reduce using rule 34 (f_saveModule -> .)

    f_saveModule                   shift and go to state 84

state 67

    (90) factor -> cvar .

    DIVIDE          reduce using rule 90 (factor -> cvar .)
    TIMES           reduce using rule 90 (factor -> cvar .)
    MOD             reduce using rule 90 (factor -> cvar .)
    PLUS            reduce using rule 90 (factor -> cvar .)
    MINUS           reduce using rule 90 (factor -> cvar .)
    NEWLINE         reduce using rule 90 (factor -> cvar .)
    RPAREN          reduce using rule 90 (factor -> cvar .)
    COMMA           reduce using rule 90 (factor -> cvar .)
    COLON           reduce using rule 90 (factor -> cvar .)
    GREATER_THAN    reduce using rule 90 (factor -> cvar .)
    LESS_THAN       reduce using rule 90 (factor -> cvar .)
    LESS_EQUAL_THAN reduce using rule 90 (factor -> cvar .)
    GREATER_EQUAL_THAN reduce using rule 90 (factor -> cvar .)
    NOT_EQUAL_THAN  reduce using rule 90 (factor -> cvar .)
    SAME_AS         reduce using rule 90 (factor -> cvar .)


state 68

    (98) cvar -> C_FLOAT . f_isConst
    (101) f_isConst -> .

    DIVIDE          reduce using rule 101 (f_isConst -> .)
    TIMES           reduce using rule 101 (f_isConst -> .)
    MOD             reduce using rule 101 (f_isConst -> .)
    PLUS            reduce using rule 101 (f_isConst -> .)
    MINUS           reduce using rule 101 (f_isConst -> .)
    GREATER_THAN    reduce using rule 101 (f_isConst -> .)
    LESS_THAN       reduce using rule 101 (f_isConst -> .)
    LESS_EQUAL_THAN reduce using rule 101 (f_isConst -> .)
    GREATER_EQUAL_THAN reduce using rule 101 (f_isConst -> .)
    NOT_EQUAL_THAN  reduce using rule 101 (f_isConst -> .)
    SAME_AS         reduce using rule 101 (f_isConst -> .)
    NEWLINE         reduce using rule 101 (f_isConst -> .)
    RPAREN          reduce using rule 101 (f_isConst -> .)
    COMMA           reduce using rule 101 (f_isConst -> .)
    COLON           reduce using rule 101 (f_isConst -> .)

    f_isConst                      shift and go to state 85

state 69

    (91) factor -> funct .

    DIVIDE          reduce using rule 91 (factor -> funct .)
    TIMES           reduce using rule 91 (factor -> funct .)
    MOD             reduce using rule 91 (factor -> funct .)
    PLUS            reduce using rule 91 (factor -> funct .)
    MINUS           reduce using rule 91 (factor -> funct .)
    NEWLINE         reduce using rule 91 (factor -> funct .)
    RPAREN          reduce using rule 91 (factor -> funct .)
    COMMA           reduce using rule 91 (factor -> funct .)
    COLON           reduce using rule 91 (factor -> funct .)
    GREATER_THAN    reduce using rule 91 (factor -> funct .)
    LESS_THAN       reduce using rule 91 (factor -> funct .)
    LESS_EQUAL_THAN reduce using rule 91 (factor -> funct .)
    GREATER_EQUAL_THAN reduce using rule 91 (factor -> funct .)
    NOT_EQUAL_THAN  reduce using rule 91 (factor -> funct .)
    SAME_AS         reduce using rule 91 (factor -> funct .)


state 70

    (96) cvar -> C_BOOL . f_isConst
    (101) f_isConst -> .

    DIVIDE          reduce using rule 101 (f_isConst -> .)
    TIMES           reduce using rule 101 (f_isConst -> .)
    MOD             reduce using rule 101 (f_isConst -> .)
    PLUS            reduce using rule 101 (f_isConst -> .)
    MINUS           reduce using rule 101 (f_isConst -> .)
    GREATER_THAN    reduce using rule 101 (f_isConst -> .)
    LESS_THAN       reduce using rule 101 (f_isConst -> .)
    LESS_EQUAL_THAN reduce using rule 101 (f_isConst -> .)
    GREATER_EQUAL_THAN reduce using rule 101 (f_isConst -> .)
    NOT_EQUAL_THAN  reduce using rule 101 (f_isConst -> .)
    SAME_AS         reduce using rule 101 (f_isConst -> .)
    NEWLINE         reduce using rule 101 (f_isConst -> .)
    RPAREN          reduce using rule 101 (f_isConst -> .)
    COMMA           reduce using rule 101 (f_isConst -> .)
    COLON           reduce using rule 101 (f_isConst -> .)

    f_isConst                      shift and go to state 86

state 71

    (84) term -> factor . moreFactors
    (85) moreFactors -> . empty
    (86) moreFactors -> . DIVIDE f_pushOperator factor f_popFactor moreFactors
    (87) moreFactors -> . TIMES f_pushOperator factor f_popFactor moreFactors
    (88) moreFactors -> . MOD f_pushOperator factor f_popFactor moreFactors
    (3) empty -> .

    DIVIDE          shift and go to state 88
    TIMES           shift and go to state 89
    MOD             shift and go to state 91
    PLUS            reduce using rule 3 (empty -> .)
    MINUS           reduce using rule 3 (empty -> .)
    GREATER_THAN    reduce using rule 3 (empty -> .)
    LESS_THAN       reduce using rule 3 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 3 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 3 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 3 (empty -> .)
    SAME_AS         reduce using rule 3 (empty -> .)
    NEWLINE         reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    COLON           reduce using rule 3 (empty -> .)

    moreFactors                    shift and go to state 87
    empty                          shift and go to state 90

state 72

    (89) factor -> LPAREN . f_pushOperator expression RPAREN f_popOperator
    (92) f_pushOperator -> .

    LPAREN          reduce using rule 92 (f_pushOperator -> .)
    ID              reduce using rule 92 (f_pushOperator -> .)
    C_BOOL          reduce using rule 92 (f_pushOperator -> .)
    C_INT           reduce using rule 92 (f_pushOperator -> .)
    C_FLOAT         reduce using rule 92 (f_pushOperator -> .)
    C_STRING        reduce using rule 92 (f_pushOperator -> .)

    f_pushOperator                 shift and go to state 92

state 73

    (97) cvar -> C_INT . f_isConst
    (101) f_isConst -> .

    DIVIDE          reduce using rule 101 (f_isConst -> .)
    TIMES           reduce using rule 101 (f_isConst -> .)
    MOD             reduce using rule 101 (f_isConst -> .)
    PLUS            reduce using rule 101 (f_isConst -> .)
    MINUS           reduce using rule 101 (f_isConst -> .)
    GREATER_THAN    reduce using rule 101 (f_isConst -> .)
    LESS_THAN       reduce using rule 101 (f_isConst -> .)
    LESS_EQUAL_THAN reduce using rule 101 (f_isConst -> .)
    GREATER_EQUAL_THAN reduce using rule 101 (f_isConst -> .)
    NOT_EQUAL_THAN  reduce using rule 101 (f_isConst -> .)
    SAME_AS         reduce using rule 101 (f_isConst -> .)
    NEWLINE         reduce using rule 101 (f_isConst -> .)
    RPAREN          reduce using rule 101 (f_isConst -> .)
    COMMA           reduce using rule 101 (f_isConst -> .)
    COLON           reduce using rule 101 (f_isConst -> .)

    f_isConst                      shift and go to state 93

state 74

    (95) cvar -> ID . f_isID
    (64) funct -> ID . f_checkProc LPAREN RPAREN
    (65) funct -> ID . f_checkProc LPAREN expression f_genParam expressionList RPAREN
    (100) f_isID -> .
    (66) f_checkProc -> .

    DIVIDE          reduce using rule 100 (f_isID -> .)
    TIMES           reduce using rule 100 (f_isID -> .)
    MOD             reduce using rule 100 (f_isID -> .)
    PLUS            reduce using rule 100 (f_isID -> .)
    MINUS           reduce using rule 100 (f_isID -> .)
    GREATER_THAN    reduce using rule 100 (f_isID -> .)
    LESS_THAN       reduce using rule 100 (f_isID -> .)
    LESS_EQUAL_THAN reduce using rule 100 (f_isID -> .)
    GREATER_EQUAL_THAN reduce using rule 100 (f_isID -> .)
    NOT_EQUAL_THAN  reduce using rule 100 (f_isID -> .)
    SAME_AS         reduce using rule 100 (f_isID -> .)
    NEWLINE         reduce using rule 100 (f_isID -> .)
    RPAREN          reduce using rule 100 (f_isID -> .)
    COMMA           reduce using rule 100 (f_isID -> .)
    COLON           reduce using rule 100 (f_isID -> .)
    LPAREN          reduce using rule 66 (f_checkProc -> .)

    f_checkProc                    shift and go to state 94
    f_isID                         shift and go to state 95

state 75

    (99) cvar -> C_STRING . f_isConst
    (101) f_isConst -> .

    DIVIDE          reduce using rule 101 (f_isConst -> .)
    TIMES           reduce using rule 101 (f_isConst -> .)
    MOD             reduce using rule 101 (f_isConst -> .)
    PLUS            reduce using rule 101 (f_isConst -> .)
    MINUS           reduce using rule 101 (f_isConst -> .)
    GREATER_THAN    reduce using rule 101 (f_isConst -> .)
    LESS_THAN       reduce using rule 101 (f_isConst -> .)
    LESS_EQUAL_THAN reduce using rule 101 (f_isConst -> .)
    GREATER_EQUAL_THAN reduce using rule 101 (f_isConst -> .)
    NOT_EQUAL_THAN  reduce using rule 101 (f_isConst -> .)
    SAME_AS         reduce using rule 101 (f_isConst -> .)
    NEWLINE         reduce using rule 101 (f_isConst -> .)
    RPAREN          reduce using rule 101 (f_isConst -> .)
    COMMA           reduce using rule 101 (f_isConst -> .)
    COLON           reduce using rule 101 (f_isConst -> .)

    f_isConst                      shift and go to state 96

state 76

    (79) exp -> term . moreTerms
    (80) moreTerms -> . empty
    (81) moreTerms -> . PLUS f_pushOperator term f_popTerm moreTerms
    (82) moreTerms -> . MINUS f_pushOperator term f_popTerm moreTerms
    (3) empty -> .

    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    GREATER_THAN    reduce using rule 3 (empty -> .)
    LESS_THAN       reduce using rule 3 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 3 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 3 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 3 (empty -> .)
    SAME_AS         reduce using rule 3 (empty -> .)
    NEWLINE         reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    COLON           reduce using rule 3 (empty -> .)

    moreTerms                      shift and go to state 97
    empty                          shift and go to state 100

state 77

    (70) expression -> exp .
    (71) expression -> exp . compareToken exp f_popComparation
    (73) compareToken -> . GREATER_THAN
    (74) compareToken -> . LESS_THAN
    (75) compareToken -> . LESS_EQUAL_THAN
    (76) compareToken -> . GREATER_EQUAL_THAN
    (77) compareToken -> . NOT_EQUAL_THAN
    (78) compareToken -> . SAME_AS

    COLON           reduce using rule 70 (expression -> exp .)
    RPAREN          reduce using rule 70 (expression -> exp .)
    NEWLINE         reduce using rule 70 (expression -> exp .)
    COMMA           reduce using rule 70 (expression -> exp .)
    GREATER_THAN    shift and go to state 106
    LESS_THAN       shift and go to state 107
    LESS_EQUAL_THAN shift and go to state 103
    GREATER_EQUAL_THAN shift and go to state 102
    NOT_EQUAL_THAN  shift and go to state 105
    SAME_AS         shift and go to state 104

    compareToken                   shift and go to state 101

state 78

    (38) assign -> ID f_checkID EQUAL expression . NEWLINE f_generateEqual assign

    NEWLINE         shift and go to state 108


state 79

    (13) pwmDeclaration -> PWM f_saveType pinList . NEWLINE

    NEWLINE         shift and go to state 109


state 80

    (11) outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .

    PWM             reduce using rule 11 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    BOOL            reduce using rule 11 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    INT             reduce using rule 11 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    FLOAT           reduce using rule 11 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    STRING          reduce using rule 11 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    IMAGE           reduce using rule 11 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    ID              reduce using rule 11 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    DEF             reduce using rule 11 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    $end            reduce using rule 11 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)


state 81

    (14) pinList -> C_INT COLON ID .
    (15) pinList -> C_INT COLON ID . COMMA pinList

    NEWLINE         reduce using rule 14 (pinList -> C_INT COLON ID .)
    COMMA           shift and go to state 110


state 82

    (26) functions -> DEF tipo ID f_saveModule . LPAREN RPAREN COLON NEWLINE block f_endModule functions
    (27) functions -> DEF tipo ID f_saveModule . LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block f_endModule functions

    LPAREN          shift and go to state 111


state 83

    (30) functions -> DEF VOID MAIN f_saveModule . LPAREN RPAREN COLON NEWLINE block f_endModule functions
    (31) functions -> DEF VOID MAIN f_saveModule . LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block f_endModule functions

    LPAREN          shift and go to state 112


state 84

    (28) functions -> DEF VOID ID f_saveModule . LPAREN RPAREN COLON NEWLINE block f_endModule functions
    (29) functions -> DEF VOID ID f_saveModule . LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block f_endModule functions

    LPAREN          shift and go to state 113


state 85

    (98) cvar -> C_FLOAT f_isConst .

    DIVIDE          reduce using rule 98 (cvar -> C_FLOAT f_isConst .)
    TIMES           reduce using rule 98 (cvar -> C_FLOAT f_isConst .)
    MOD             reduce using rule 98 (cvar -> C_FLOAT f_isConst .)
    PLUS            reduce using rule 98 (cvar -> C_FLOAT f_isConst .)
    MINUS           reduce using rule 98 (cvar -> C_FLOAT f_isConst .)
    GREATER_THAN    reduce using rule 98 (cvar -> C_FLOAT f_isConst .)
    LESS_THAN       reduce using rule 98 (cvar -> C_FLOAT f_isConst .)
    LESS_EQUAL_THAN reduce using rule 98 (cvar -> C_FLOAT f_isConst .)
    GREATER_EQUAL_THAN reduce using rule 98 (cvar -> C_FLOAT f_isConst .)
    NOT_EQUAL_THAN  reduce using rule 98 (cvar -> C_FLOAT f_isConst .)
    SAME_AS         reduce using rule 98 (cvar -> C_FLOAT f_isConst .)
    COMMA           reduce using rule 98 (cvar -> C_FLOAT f_isConst .)
    RPAREN          reduce using rule 98 (cvar -> C_FLOAT f_isConst .)
    NEWLINE         reduce using rule 98 (cvar -> C_FLOAT f_isConst .)
    COLON           reduce using rule 98 (cvar -> C_FLOAT f_isConst .)


state 86

    (96) cvar -> C_BOOL f_isConst .

    DIVIDE          reduce using rule 96 (cvar -> C_BOOL f_isConst .)
    TIMES           reduce using rule 96 (cvar -> C_BOOL f_isConst .)
    MOD             reduce using rule 96 (cvar -> C_BOOL f_isConst .)
    PLUS            reduce using rule 96 (cvar -> C_BOOL f_isConst .)
    MINUS           reduce using rule 96 (cvar -> C_BOOL f_isConst .)
    GREATER_THAN    reduce using rule 96 (cvar -> C_BOOL f_isConst .)
    LESS_THAN       reduce using rule 96 (cvar -> C_BOOL f_isConst .)
    LESS_EQUAL_THAN reduce using rule 96 (cvar -> C_BOOL f_isConst .)
    GREATER_EQUAL_THAN reduce using rule 96 (cvar -> C_BOOL f_isConst .)
    NOT_EQUAL_THAN  reduce using rule 96 (cvar -> C_BOOL f_isConst .)
    SAME_AS         reduce using rule 96 (cvar -> C_BOOL f_isConst .)
    COMMA           reduce using rule 96 (cvar -> C_BOOL f_isConst .)
    RPAREN          reduce using rule 96 (cvar -> C_BOOL f_isConst .)
    NEWLINE         reduce using rule 96 (cvar -> C_BOOL f_isConst .)
    COLON           reduce using rule 96 (cvar -> C_BOOL f_isConst .)


state 87

    (84) term -> factor moreFactors .

    PLUS            reduce using rule 84 (term -> factor moreFactors .)
    MINUS           reduce using rule 84 (term -> factor moreFactors .)
    NEWLINE         reduce using rule 84 (term -> factor moreFactors .)
    RPAREN          reduce using rule 84 (term -> factor moreFactors .)
    COMMA           reduce using rule 84 (term -> factor moreFactors .)
    COLON           reduce using rule 84 (term -> factor moreFactors .)
    GREATER_THAN    reduce using rule 84 (term -> factor moreFactors .)
    LESS_THAN       reduce using rule 84 (term -> factor moreFactors .)
    LESS_EQUAL_THAN reduce using rule 84 (term -> factor moreFactors .)
    GREATER_EQUAL_THAN reduce using rule 84 (term -> factor moreFactors .)
    NOT_EQUAL_THAN  reduce using rule 84 (term -> factor moreFactors .)
    SAME_AS         reduce using rule 84 (term -> factor moreFactors .)


state 88

    (86) moreFactors -> DIVIDE . f_pushOperator factor f_popFactor moreFactors
    (92) f_pushOperator -> .

    LPAREN          reduce using rule 92 (f_pushOperator -> .)
    ID              reduce using rule 92 (f_pushOperator -> .)
    C_BOOL          reduce using rule 92 (f_pushOperator -> .)
    C_INT           reduce using rule 92 (f_pushOperator -> .)
    C_FLOAT         reduce using rule 92 (f_pushOperator -> .)
    C_STRING        reduce using rule 92 (f_pushOperator -> .)

    f_pushOperator                 shift and go to state 114

state 89

    (87) moreFactors -> TIMES . f_pushOperator factor f_popFactor moreFactors
    (92) f_pushOperator -> .

    LPAREN          reduce using rule 92 (f_pushOperator -> .)
    ID              reduce using rule 92 (f_pushOperator -> .)
    C_BOOL          reduce using rule 92 (f_pushOperator -> .)
    C_INT           reduce using rule 92 (f_pushOperator -> .)
    C_FLOAT         reduce using rule 92 (f_pushOperator -> .)
    C_STRING        reduce using rule 92 (f_pushOperator -> .)

    f_pushOperator                 shift and go to state 115

state 90

    (85) moreFactors -> empty .

    PLUS            reduce using rule 85 (moreFactors -> empty .)
    MINUS           reduce using rule 85 (moreFactors -> empty .)
    GREATER_THAN    reduce using rule 85 (moreFactors -> empty .)
    LESS_THAN       reduce using rule 85 (moreFactors -> empty .)
    LESS_EQUAL_THAN reduce using rule 85 (moreFactors -> empty .)
    GREATER_EQUAL_THAN reduce using rule 85 (moreFactors -> empty .)
    NOT_EQUAL_THAN  reduce using rule 85 (moreFactors -> empty .)
    SAME_AS         reduce using rule 85 (moreFactors -> empty .)
    NEWLINE         reduce using rule 85 (moreFactors -> empty .)
    RPAREN          reduce using rule 85 (moreFactors -> empty .)
    COMMA           reduce using rule 85 (moreFactors -> empty .)
    COLON           reduce using rule 85 (moreFactors -> empty .)


state 91

    (88) moreFactors -> MOD . f_pushOperator factor f_popFactor moreFactors
    (92) f_pushOperator -> .

    LPAREN          reduce using rule 92 (f_pushOperator -> .)
    ID              reduce using rule 92 (f_pushOperator -> .)
    C_BOOL          reduce using rule 92 (f_pushOperator -> .)
    C_INT           reduce using rule 92 (f_pushOperator -> .)
    C_FLOAT         reduce using rule 92 (f_pushOperator -> .)
    C_STRING        reduce using rule 92 (f_pushOperator -> .)

    f_pushOperator                 shift and go to state 116

state 92

    (89) factor -> LPAREN f_pushOperator . expression RPAREN f_popOperator
    (70) expression -> . exp
    (71) expression -> . exp compareToken exp f_popComparation
    (79) exp -> . term moreTerms
    (84) term -> . factor moreFactors
    (89) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (90) factor -> . cvar
    (91) factor -> . funct
    (95) cvar -> . ID f_isID
    (96) cvar -> . C_BOOL f_isConst
    (97) cvar -> . C_INT f_isConst
    (98) cvar -> . C_FLOAT f_isConst
    (99) cvar -> . C_STRING f_isConst
    (64) funct -> . ID f_checkProc LPAREN RPAREN
    (65) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 72
    ID              shift and go to state 74
    C_BOOL          shift and go to state 70
    C_INT           shift and go to state 73
    C_FLOAT         shift and go to state 68
    C_STRING        shift and go to state 75

    term                           shift and go to state 76
    funct                          shift and go to state 69
    exp                            shift and go to state 77
    factor                         shift and go to state 71
    cvar                           shift and go to state 67
    expression                     shift and go to state 117

state 93

    (97) cvar -> C_INT f_isConst .

    DIVIDE          reduce using rule 97 (cvar -> C_INT f_isConst .)
    TIMES           reduce using rule 97 (cvar -> C_INT f_isConst .)
    MOD             reduce using rule 97 (cvar -> C_INT f_isConst .)
    PLUS            reduce using rule 97 (cvar -> C_INT f_isConst .)
    MINUS           reduce using rule 97 (cvar -> C_INT f_isConst .)
    GREATER_THAN    reduce using rule 97 (cvar -> C_INT f_isConst .)
    LESS_THAN       reduce using rule 97 (cvar -> C_INT f_isConst .)
    LESS_EQUAL_THAN reduce using rule 97 (cvar -> C_INT f_isConst .)
    GREATER_EQUAL_THAN reduce using rule 97 (cvar -> C_INT f_isConst .)
    NOT_EQUAL_THAN  reduce using rule 97 (cvar -> C_INT f_isConst .)
    SAME_AS         reduce using rule 97 (cvar -> C_INT f_isConst .)
    COMMA           reduce using rule 97 (cvar -> C_INT f_isConst .)
    RPAREN          reduce using rule 97 (cvar -> C_INT f_isConst .)
    NEWLINE         reduce using rule 97 (cvar -> C_INT f_isConst .)
    COLON           reduce using rule 97 (cvar -> C_INT f_isConst .)


state 94

    (64) funct -> ID f_checkProc . LPAREN RPAREN
    (65) funct -> ID f_checkProc . LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 118


state 95

    (95) cvar -> ID f_isID .

    DIVIDE          reduce using rule 95 (cvar -> ID f_isID .)
    TIMES           reduce using rule 95 (cvar -> ID f_isID .)
    MOD             reduce using rule 95 (cvar -> ID f_isID .)
    PLUS            reduce using rule 95 (cvar -> ID f_isID .)
    MINUS           reduce using rule 95 (cvar -> ID f_isID .)
    GREATER_THAN    reduce using rule 95 (cvar -> ID f_isID .)
    LESS_THAN       reduce using rule 95 (cvar -> ID f_isID .)
    LESS_EQUAL_THAN reduce using rule 95 (cvar -> ID f_isID .)
    GREATER_EQUAL_THAN reduce using rule 95 (cvar -> ID f_isID .)
    NOT_EQUAL_THAN  reduce using rule 95 (cvar -> ID f_isID .)
    SAME_AS         reduce using rule 95 (cvar -> ID f_isID .)
    COMMA           reduce using rule 95 (cvar -> ID f_isID .)
    RPAREN          reduce using rule 95 (cvar -> ID f_isID .)
    NEWLINE         reduce using rule 95 (cvar -> ID f_isID .)
    COLON           reduce using rule 95 (cvar -> ID f_isID .)


state 96

    (99) cvar -> C_STRING f_isConst .

    DIVIDE          reduce using rule 99 (cvar -> C_STRING f_isConst .)
    TIMES           reduce using rule 99 (cvar -> C_STRING f_isConst .)
    MOD             reduce using rule 99 (cvar -> C_STRING f_isConst .)
    PLUS            reduce using rule 99 (cvar -> C_STRING f_isConst .)
    MINUS           reduce using rule 99 (cvar -> C_STRING f_isConst .)
    GREATER_THAN    reduce using rule 99 (cvar -> C_STRING f_isConst .)
    LESS_THAN       reduce using rule 99 (cvar -> C_STRING f_isConst .)
    LESS_EQUAL_THAN reduce using rule 99 (cvar -> C_STRING f_isConst .)
    GREATER_EQUAL_THAN reduce using rule 99 (cvar -> C_STRING f_isConst .)
    NOT_EQUAL_THAN  reduce using rule 99 (cvar -> C_STRING f_isConst .)
    SAME_AS         reduce using rule 99 (cvar -> C_STRING f_isConst .)
    COMMA           reduce using rule 99 (cvar -> C_STRING f_isConst .)
    RPAREN          reduce using rule 99 (cvar -> C_STRING f_isConst .)
    NEWLINE         reduce using rule 99 (cvar -> C_STRING f_isConst .)
    COLON           reduce using rule 99 (cvar -> C_STRING f_isConst .)


state 97

    (79) exp -> term moreTerms .

    GREATER_THAN    reduce using rule 79 (exp -> term moreTerms .)
    LESS_THAN       reduce using rule 79 (exp -> term moreTerms .)
    LESS_EQUAL_THAN reduce using rule 79 (exp -> term moreTerms .)
    GREATER_EQUAL_THAN reduce using rule 79 (exp -> term moreTerms .)
    NOT_EQUAL_THAN  reduce using rule 79 (exp -> term moreTerms .)
    SAME_AS         reduce using rule 79 (exp -> term moreTerms .)
    NEWLINE         reduce using rule 79 (exp -> term moreTerms .)
    COLON           reduce using rule 79 (exp -> term moreTerms .)
    RPAREN          reduce using rule 79 (exp -> term moreTerms .)
    COMMA           reduce using rule 79 (exp -> term moreTerms .)


state 98

    (81) moreTerms -> PLUS . f_pushOperator term f_popTerm moreTerms
    (92) f_pushOperator -> .

    LPAREN          reduce using rule 92 (f_pushOperator -> .)
    ID              reduce using rule 92 (f_pushOperator -> .)
    C_BOOL          reduce using rule 92 (f_pushOperator -> .)
    C_INT           reduce using rule 92 (f_pushOperator -> .)
    C_FLOAT         reduce using rule 92 (f_pushOperator -> .)
    C_STRING        reduce using rule 92 (f_pushOperator -> .)

    f_pushOperator                 shift and go to state 119

state 99

    (82) moreTerms -> MINUS . f_pushOperator term f_popTerm moreTerms
    (92) f_pushOperator -> .

    LPAREN          reduce using rule 92 (f_pushOperator -> .)
    ID              reduce using rule 92 (f_pushOperator -> .)
    C_BOOL          reduce using rule 92 (f_pushOperator -> .)
    C_INT           reduce using rule 92 (f_pushOperator -> .)
    C_FLOAT         reduce using rule 92 (f_pushOperator -> .)
    C_STRING        reduce using rule 92 (f_pushOperator -> .)

    f_pushOperator                 shift and go to state 120

state 100

    (80) moreTerms -> empty .

    GREATER_THAN    reduce using rule 80 (moreTerms -> empty .)
    LESS_THAN       reduce using rule 80 (moreTerms -> empty .)
    LESS_EQUAL_THAN reduce using rule 80 (moreTerms -> empty .)
    GREATER_EQUAL_THAN reduce using rule 80 (moreTerms -> empty .)
    NOT_EQUAL_THAN  reduce using rule 80 (moreTerms -> empty .)
    SAME_AS         reduce using rule 80 (moreTerms -> empty .)
    NEWLINE         reduce using rule 80 (moreTerms -> empty .)
    RPAREN          reduce using rule 80 (moreTerms -> empty .)
    COMMA           reduce using rule 80 (moreTerms -> empty .)
    COLON           reduce using rule 80 (moreTerms -> empty .)


state 101

    (71) expression -> exp compareToken . exp f_popComparation
    (79) exp -> . term moreTerms
    (84) term -> . factor moreFactors
    (89) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (90) factor -> . cvar
    (91) factor -> . funct
    (95) cvar -> . ID f_isID
    (96) cvar -> . C_BOOL f_isConst
    (97) cvar -> . C_INT f_isConst
    (98) cvar -> . C_FLOAT f_isConst
    (99) cvar -> . C_STRING f_isConst
    (64) funct -> . ID f_checkProc LPAREN RPAREN
    (65) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 72
    ID              shift and go to state 74
    C_BOOL          shift and go to state 70
    C_INT           shift and go to state 73
    C_FLOAT         shift and go to state 68
    C_STRING        shift and go to state 75

    term                           shift and go to state 76
    funct                          shift and go to state 69
    exp                            shift and go to state 121
    factor                         shift and go to state 71
    cvar                           shift and go to state 67

state 102

    (76) compareToken -> GREATER_EQUAL_THAN .

    LPAREN          reduce using rule 76 (compareToken -> GREATER_EQUAL_THAN .)
    ID              reduce using rule 76 (compareToken -> GREATER_EQUAL_THAN .)
    C_BOOL          reduce using rule 76 (compareToken -> GREATER_EQUAL_THAN .)
    C_INT           reduce using rule 76 (compareToken -> GREATER_EQUAL_THAN .)
    C_FLOAT         reduce using rule 76 (compareToken -> GREATER_EQUAL_THAN .)
    C_STRING        reduce using rule 76 (compareToken -> GREATER_EQUAL_THAN .)


state 103

    (75) compareToken -> LESS_EQUAL_THAN .

    LPAREN          reduce using rule 75 (compareToken -> LESS_EQUAL_THAN .)
    ID              reduce using rule 75 (compareToken -> LESS_EQUAL_THAN .)
    C_BOOL          reduce using rule 75 (compareToken -> LESS_EQUAL_THAN .)
    C_INT           reduce using rule 75 (compareToken -> LESS_EQUAL_THAN .)
    C_FLOAT         reduce using rule 75 (compareToken -> LESS_EQUAL_THAN .)
    C_STRING        reduce using rule 75 (compareToken -> LESS_EQUAL_THAN .)


state 104

    (78) compareToken -> SAME_AS .

    LPAREN          reduce using rule 78 (compareToken -> SAME_AS .)
    ID              reduce using rule 78 (compareToken -> SAME_AS .)
    C_BOOL          reduce using rule 78 (compareToken -> SAME_AS .)
    C_INT           reduce using rule 78 (compareToken -> SAME_AS .)
    C_FLOAT         reduce using rule 78 (compareToken -> SAME_AS .)
    C_STRING        reduce using rule 78 (compareToken -> SAME_AS .)


state 105

    (77) compareToken -> NOT_EQUAL_THAN .

    LPAREN          reduce using rule 77 (compareToken -> NOT_EQUAL_THAN .)
    ID              reduce using rule 77 (compareToken -> NOT_EQUAL_THAN .)
    C_BOOL          reduce using rule 77 (compareToken -> NOT_EQUAL_THAN .)
    C_INT           reduce using rule 77 (compareToken -> NOT_EQUAL_THAN .)
    C_FLOAT         reduce using rule 77 (compareToken -> NOT_EQUAL_THAN .)
    C_STRING        reduce using rule 77 (compareToken -> NOT_EQUAL_THAN .)


state 106

    (73) compareToken -> GREATER_THAN .

    LPAREN          reduce using rule 73 (compareToken -> GREATER_THAN .)
    ID              reduce using rule 73 (compareToken -> GREATER_THAN .)
    C_BOOL          reduce using rule 73 (compareToken -> GREATER_THAN .)
    C_INT           reduce using rule 73 (compareToken -> GREATER_THAN .)
    C_FLOAT         reduce using rule 73 (compareToken -> GREATER_THAN .)
    C_STRING        reduce using rule 73 (compareToken -> GREATER_THAN .)


state 107

    (74) compareToken -> LESS_THAN .

    LPAREN          reduce using rule 74 (compareToken -> LESS_THAN .)
    ID              reduce using rule 74 (compareToken -> LESS_THAN .)
    C_BOOL          reduce using rule 74 (compareToken -> LESS_THAN .)
    C_INT           reduce using rule 74 (compareToken -> LESS_THAN .)
    C_FLOAT         reduce using rule 74 (compareToken -> LESS_THAN .)
    C_STRING        reduce using rule 74 (compareToken -> LESS_THAN .)


state 108

    (38) assign -> ID f_checkID EQUAL expression NEWLINE . f_generateEqual assign
    (40) f_generateEqual -> .

    ID              reduce using rule 40 (f_generateEqual -> .)
    DEF             reduce using rule 40 (f_generateEqual -> .)
    $end            reduce using rule 40 (f_generateEqual -> .)
    TAB             reduce using rule 40 (f_generateEqual -> .)
    WHILE           reduce using rule 40 (f_generateEqual -> .)
    ELSE            reduce using rule 40 (f_generateEqual -> .)

    f_generateEqual                shift and go to state 122

state 109

    (13) pwmDeclaration -> PWM f_saveType pinList NEWLINE .

    BOOL            reduce using rule 13 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)
    INT             reduce using rule 13 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)
    FLOAT           reduce using rule 13 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)
    STRING          reduce using rule 13 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)
    IMAGE           reduce using rule 13 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)
    ID              reduce using rule 13 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)
    DEF             reduce using rule 13 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)
    $end            reduce using rule 13 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)


state 110

    (15) pinList -> C_INT COLON ID COMMA . pinList
    (14) pinList -> . C_INT COLON ID
    (15) pinList -> . C_INT COLON ID COMMA pinList

    C_INT           shift and go to state 52

    pinList                        shift and go to state 123

state 111

    (26) functions -> DEF tipo ID f_saveModule LPAREN . RPAREN COLON NEWLINE block f_endModule functions
    (27) functions -> DEF tipo ID f_saveModule LPAREN . tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block f_endModule functions
    (21) tipo -> . BOOL f_saveType
    (22) tipo -> . INT f_saveType
    (23) tipo -> . FLOAT f_saveType
    (24) tipo -> . STRING f_saveType
    (25) tipo -> . IMAGE f_saveType

    RPAREN          shift and go to state 124
    BOOL            shift and go to state 16
    INT             shift and go to state 14
    FLOAT           shift and go to state 11
    STRING          shift and go to state 17
    IMAGE           shift and go to state 15

    tipo                           shift and go to state 125

state 112

    (30) functions -> DEF VOID MAIN f_saveModule LPAREN . RPAREN COLON NEWLINE block f_endModule functions
    (31) functions -> DEF VOID MAIN f_saveModule LPAREN . tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block f_endModule functions
    (21) tipo -> . BOOL f_saveType
    (22) tipo -> . INT f_saveType
    (23) tipo -> . FLOAT f_saveType
    (24) tipo -> . STRING f_saveType
    (25) tipo -> . IMAGE f_saveType

    RPAREN          shift and go to state 126
    BOOL            shift and go to state 16
    INT             shift and go to state 14
    FLOAT           shift and go to state 11
    STRING          shift and go to state 17
    IMAGE           shift and go to state 15

    tipo                           shift and go to state 127

state 113

    (28) functions -> DEF VOID ID f_saveModule LPAREN . RPAREN COLON NEWLINE block f_endModule functions
    (29) functions -> DEF VOID ID f_saveModule LPAREN . tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block f_endModule functions
    (21) tipo -> . BOOL f_saveType
    (22) tipo -> . INT f_saveType
    (23) tipo -> . FLOAT f_saveType
    (24) tipo -> . STRING f_saveType
    (25) tipo -> . IMAGE f_saveType

    RPAREN          shift and go to state 128
    BOOL            shift and go to state 16
    INT             shift and go to state 14
    FLOAT           shift and go to state 11
    STRING          shift and go to state 17
    IMAGE           shift and go to state 15

    tipo                           shift and go to state 129

state 114

    (86) moreFactors -> DIVIDE f_pushOperator . factor f_popFactor moreFactors
    (89) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (90) factor -> . cvar
    (91) factor -> . funct
    (95) cvar -> . ID f_isID
    (96) cvar -> . C_BOOL f_isConst
    (97) cvar -> . C_INT f_isConst
    (98) cvar -> . C_FLOAT f_isConst
    (99) cvar -> . C_STRING f_isConst
    (64) funct -> . ID f_checkProc LPAREN RPAREN
    (65) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 72
    ID              shift and go to state 74
    C_BOOL          shift and go to state 70
    C_INT           shift and go to state 73
    C_FLOAT         shift and go to state 68
    C_STRING        shift and go to state 75

    funct                          shift and go to state 69
    cvar                           shift and go to state 67
    factor                         shift and go to state 130

state 115

    (87) moreFactors -> TIMES f_pushOperator . factor f_popFactor moreFactors
    (89) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (90) factor -> . cvar
    (91) factor -> . funct
    (95) cvar -> . ID f_isID
    (96) cvar -> . C_BOOL f_isConst
    (97) cvar -> . C_INT f_isConst
    (98) cvar -> . C_FLOAT f_isConst
    (99) cvar -> . C_STRING f_isConst
    (64) funct -> . ID f_checkProc LPAREN RPAREN
    (65) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 72
    ID              shift and go to state 74
    C_BOOL          shift and go to state 70
    C_INT           shift and go to state 73
    C_FLOAT         shift and go to state 68
    C_STRING        shift and go to state 75

    funct                          shift and go to state 69
    cvar                           shift and go to state 67
    factor                         shift and go to state 131

state 116

    (88) moreFactors -> MOD f_pushOperator . factor f_popFactor moreFactors
    (89) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (90) factor -> . cvar
    (91) factor -> . funct
    (95) cvar -> . ID f_isID
    (96) cvar -> . C_BOOL f_isConst
    (97) cvar -> . C_INT f_isConst
    (98) cvar -> . C_FLOAT f_isConst
    (99) cvar -> . C_STRING f_isConst
    (64) funct -> . ID f_checkProc LPAREN RPAREN
    (65) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 72
    ID              shift and go to state 74
    C_BOOL          shift and go to state 70
    C_INT           shift and go to state 73
    C_FLOAT         shift and go to state 68
    C_STRING        shift and go to state 75

    funct                          shift and go to state 69
    cvar                           shift and go to state 67
    factor                         shift and go to state 132

state 117

    (89) factor -> LPAREN f_pushOperator expression . RPAREN f_popOperator

    RPAREN          shift and go to state 133


state 118

    (64) funct -> ID f_checkProc LPAREN . RPAREN
    (65) funct -> ID f_checkProc LPAREN . expression f_genParam expressionList RPAREN
    (70) expression -> . exp
    (71) expression -> . exp compareToken exp f_popComparation
    (79) exp -> . term moreTerms
    (84) term -> . factor moreFactors
    (89) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (90) factor -> . cvar
    (91) factor -> . funct
    (95) cvar -> . ID f_isID
    (96) cvar -> . C_BOOL f_isConst
    (97) cvar -> . C_INT f_isConst
    (98) cvar -> . C_FLOAT f_isConst
    (99) cvar -> . C_STRING f_isConst
    (64) funct -> . ID f_checkProc LPAREN RPAREN
    (65) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    RPAREN          shift and go to state 134
    LPAREN          shift and go to state 72
    ID              shift and go to state 74
    C_BOOL          shift and go to state 70
    C_INT           shift and go to state 73
    C_FLOAT         shift and go to state 68
    C_STRING        shift and go to state 75

    term                           shift and go to state 76
    funct                          shift and go to state 69
    exp                            shift and go to state 77
    factor                         shift and go to state 71
    cvar                           shift and go to state 67
    expression                     shift and go to state 135

state 119

    (81) moreTerms -> PLUS f_pushOperator . term f_popTerm moreTerms
    (84) term -> . factor moreFactors
    (89) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (90) factor -> . cvar
    (91) factor -> . funct
    (95) cvar -> . ID f_isID
    (96) cvar -> . C_BOOL f_isConst
    (97) cvar -> . C_INT f_isConst
    (98) cvar -> . C_FLOAT f_isConst
    (99) cvar -> . C_STRING f_isConst
    (64) funct -> . ID f_checkProc LPAREN RPAREN
    (65) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 72
    ID              shift and go to state 74
    C_BOOL          shift and go to state 70
    C_INT           shift and go to state 73
    C_FLOAT         shift and go to state 68
    C_STRING        shift and go to state 75

    term                           shift and go to state 136
    funct                          shift and go to state 69
    factor                         shift and go to state 71
    cvar                           shift and go to state 67

state 120

    (82) moreTerms -> MINUS f_pushOperator . term f_popTerm moreTerms
    (84) term -> . factor moreFactors
    (89) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (90) factor -> . cvar
    (91) factor -> . funct
    (95) cvar -> . ID f_isID
    (96) cvar -> . C_BOOL f_isConst
    (97) cvar -> . C_INT f_isConst
    (98) cvar -> . C_FLOAT f_isConst
    (99) cvar -> . C_STRING f_isConst
    (64) funct -> . ID f_checkProc LPAREN RPAREN
    (65) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 72
    ID              shift and go to state 74
    C_BOOL          shift and go to state 70
    C_INT           shift and go to state 73
    C_FLOAT         shift and go to state 68
    C_STRING        shift and go to state 75

    term                           shift and go to state 137
    funct                          shift and go to state 69
    factor                         shift and go to state 71
    cvar                           shift and go to state 67

state 121

    (71) expression -> exp compareToken exp . f_popComparation
    (72) f_popComparation -> .

    NEWLINE         reduce using rule 72 (f_popComparation -> .)
    RPAREN          reduce using rule 72 (f_popComparation -> .)
    COMMA           reduce using rule 72 (f_popComparation -> .)
    COLON           reduce using rule 72 (f_popComparation -> .)

    f_popComparation               shift and go to state 138

state 122

    (38) assign -> ID f_checkID EQUAL expression NEWLINE f_generateEqual . assign
    (38) assign -> . ID f_checkID EQUAL expression NEWLINE f_generateEqual assign
    (39) assign -> . empty
    (3) empty -> .

    ID              shift and go to state 27
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)
    TAB             reduce using rule 3 (empty -> .)
    WHILE           reduce using rule 3 (empty -> .)
    ELSE            reduce using rule 3 (empty -> .)

    assign                         shift and go to state 139
    empty                          shift and go to state 28

state 123

    (15) pinList -> C_INT COLON ID COMMA pinList .

    NEWLINE         reduce using rule 15 (pinList -> C_INT COLON ID COMMA pinList .)


state 124

    (26) functions -> DEF tipo ID f_saveModule LPAREN RPAREN . COLON NEWLINE block f_endModule functions

    COLON           shift and go to state 140


state 125

    (27) functions -> DEF tipo ID f_saveModule LPAREN tipo . ID f_addToParam parameterList RPAREN COLON NEWLINE block f_endModule functions

    ID              shift and go to state 141


state 126

    (30) functions -> DEF VOID MAIN f_saveModule LPAREN RPAREN . COLON NEWLINE block f_endModule functions

    COLON           shift and go to state 142


state 127

    (31) functions -> DEF VOID MAIN f_saveModule LPAREN tipo . ID f_addToParam parameterList RPAREN COLON NEWLINE block f_endModule functions

    ID              shift and go to state 143


state 128

    (28) functions -> DEF VOID ID f_saveModule LPAREN RPAREN . COLON NEWLINE block f_endModule functions

    COLON           shift and go to state 144


state 129

    (29) functions -> DEF VOID ID f_saveModule LPAREN tipo . ID f_addToParam parameterList RPAREN COLON NEWLINE block f_endModule functions

    ID              shift and go to state 145


state 130

    (86) moreFactors -> DIVIDE f_pushOperator factor . f_popFactor moreFactors
    (94) f_popFactor -> .

    DIVIDE          reduce using rule 94 (f_popFactor -> .)
    TIMES           reduce using rule 94 (f_popFactor -> .)
    MOD             reduce using rule 94 (f_popFactor -> .)
    PLUS            reduce using rule 94 (f_popFactor -> .)
    MINUS           reduce using rule 94 (f_popFactor -> .)
    GREATER_THAN    reduce using rule 94 (f_popFactor -> .)
    LESS_THAN       reduce using rule 94 (f_popFactor -> .)
    LESS_EQUAL_THAN reduce using rule 94 (f_popFactor -> .)
    GREATER_EQUAL_THAN reduce using rule 94 (f_popFactor -> .)
    NOT_EQUAL_THAN  reduce using rule 94 (f_popFactor -> .)
    SAME_AS         reduce using rule 94 (f_popFactor -> .)
    NEWLINE         reduce using rule 94 (f_popFactor -> .)
    RPAREN          reduce using rule 94 (f_popFactor -> .)
    COMMA           reduce using rule 94 (f_popFactor -> .)
    COLON           reduce using rule 94 (f_popFactor -> .)

    f_popFactor                    shift and go to state 146

state 131

    (87) moreFactors -> TIMES f_pushOperator factor . f_popFactor moreFactors
    (94) f_popFactor -> .

    DIVIDE          reduce using rule 94 (f_popFactor -> .)
    TIMES           reduce using rule 94 (f_popFactor -> .)
    MOD             reduce using rule 94 (f_popFactor -> .)
    PLUS            reduce using rule 94 (f_popFactor -> .)
    MINUS           reduce using rule 94 (f_popFactor -> .)
    GREATER_THAN    reduce using rule 94 (f_popFactor -> .)
    LESS_THAN       reduce using rule 94 (f_popFactor -> .)
    LESS_EQUAL_THAN reduce using rule 94 (f_popFactor -> .)
    GREATER_EQUAL_THAN reduce using rule 94 (f_popFactor -> .)
    NOT_EQUAL_THAN  reduce using rule 94 (f_popFactor -> .)
    SAME_AS         reduce using rule 94 (f_popFactor -> .)
    NEWLINE         reduce using rule 94 (f_popFactor -> .)
    RPAREN          reduce using rule 94 (f_popFactor -> .)
    COMMA           reduce using rule 94 (f_popFactor -> .)
    COLON           reduce using rule 94 (f_popFactor -> .)

    f_popFactor                    shift and go to state 147

state 132

    (88) moreFactors -> MOD f_pushOperator factor . f_popFactor moreFactors
    (94) f_popFactor -> .

    DIVIDE          reduce using rule 94 (f_popFactor -> .)
    TIMES           reduce using rule 94 (f_popFactor -> .)
    MOD             reduce using rule 94 (f_popFactor -> .)
    PLUS            reduce using rule 94 (f_popFactor -> .)
    MINUS           reduce using rule 94 (f_popFactor -> .)
    GREATER_THAN    reduce using rule 94 (f_popFactor -> .)
    LESS_THAN       reduce using rule 94 (f_popFactor -> .)
    LESS_EQUAL_THAN reduce using rule 94 (f_popFactor -> .)
    GREATER_EQUAL_THAN reduce using rule 94 (f_popFactor -> .)
    NOT_EQUAL_THAN  reduce using rule 94 (f_popFactor -> .)
    SAME_AS         reduce using rule 94 (f_popFactor -> .)
    NEWLINE         reduce using rule 94 (f_popFactor -> .)
    RPAREN          reduce using rule 94 (f_popFactor -> .)
    COMMA           reduce using rule 94 (f_popFactor -> .)
    COLON           reduce using rule 94 (f_popFactor -> .)

    f_popFactor                    shift and go to state 148

state 133

    (89) factor -> LPAREN f_pushOperator expression RPAREN . f_popOperator
    (93) f_popOperator -> .

    DIVIDE          reduce using rule 93 (f_popOperator -> .)
    TIMES           reduce using rule 93 (f_popOperator -> .)
    MOD             reduce using rule 93 (f_popOperator -> .)
    PLUS            reduce using rule 93 (f_popOperator -> .)
    MINUS           reduce using rule 93 (f_popOperator -> .)
    GREATER_THAN    reduce using rule 93 (f_popOperator -> .)
    LESS_THAN       reduce using rule 93 (f_popOperator -> .)
    LESS_EQUAL_THAN reduce using rule 93 (f_popOperator -> .)
    GREATER_EQUAL_THAN reduce using rule 93 (f_popOperator -> .)
    NOT_EQUAL_THAN  reduce using rule 93 (f_popOperator -> .)
    SAME_AS         reduce using rule 93 (f_popOperator -> .)
    NEWLINE         reduce using rule 93 (f_popOperator -> .)
    RPAREN          reduce using rule 93 (f_popOperator -> .)
    COMMA           reduce using rule 93 (f_popOperator -> .)
    COLON           reduce using rule 93 (f_popOperator -> .)

    f_popOperator                  shift and go to state 149

state 134

    (64) funct -> ID f_checkProc LPAREN RPAREN .

    DIVIDE          reduce using rule 64 (funct -> ID f_checkProc LPAREN RPAREN .)
    TIMES           reduce using rule 64 (funct -> ID f_checkProc LPAREN RPAREN .)
    MOD             reduce using rule 64 (funct -> ID f_checkProc LPAREN RPAREN .)
    PLUS            reduce using rule 64 (funct -> ID f_checkProc LPAREN RPAREN .)
    MINUS           reduce using rule 64 (funct -> ID f_checkProc LPAREN RPAREN .)
    GREATER_THAN    reduce using rule 64 (funct -> ID f_checkProc LPAREN RPAREN .)
    LESS_THAN       reduce using rule 64 (funct -> ID f_checkProc LPAREN RPAREN .)
    LESS_EQUAL_THAN reduce using rule 64 (funct -> ID f_checkProc LPAREN RPAREN .)
    GREATER_EQUAL_THAN reduce using rule 64 (funct -> ID f_checkProc LPAREN RPAREN .)
    NOT_EQUAL_THAN  reduce using rule 64 (funct -> ID f_checkProc LPAREN RPAREN .)
    SAME_AS         reduce using rule 64 (funct -> ID f_checkProc LPAREN RPAREN .)
    NEWLINE         reduce using rule 64 (funct -> ID f_checkProc LPAREN RPAREN .)
    RPAREN          reduce using rule 64 (funct -> ID f_checkProc LPAREN RPAREN .)
    COMMA           reduce using rule 64 (funct -> ID f_checkProc LPAREN RPAREN .)
    COLON           reduce using rule 64 (funct -> ID f_checkProc LPAREN RPAREN .)


state 135

    (65) funct -> ID f_checkProc LPAREN expression . f_genParam expressionList RPAREN
    (69) f_genParam -> .

    COMMA           reduce using rule 69 (f_genParam -> .)
    RPAREN          reduce using rule 69 (f_genParam -> .)

    f_genParam                     shift and go to state 150

state 136

    (81) moreTerms -> PLUS f_pushOperator term . f_popTerm moreTerms
    (83) f_popTerm -> .

    PLUS            reduce using rule 83 (f_popTerm -> .)
    MINUS           reduce using rule 83 (f_popTerm -> .)
    GREATER_THAN    reduce using rule 83 (f_popTerm -> .)
    LESS_THAN       reduce using rule 83 (f_popTerm -> .)
    LESS_EQUAL_THAN reduce using rule 83 (f_popTerm -> .)
    GREATER_EQUAL_THAN reduce using rule 83 (f_popTerm -> .)
    NOT_EQUAL_THAN  reduce using rule 83 (f_popTerm -> .)
    SAME_AS         reduce using rule 83 (f_popTerm -> .)
    NEWLINE         reduce using rule 83 (f_popTerm -> .)
    RPAREN          reduce using rule 83 (f_popTerm -> .)
    COMMA           reduce using rule 83 (f_popTerm -> .)
    COLON           reduce using rule 83 (f_popTerm -> .)

    f_popTerm                      shift and go to state 151

state 137

    (82) moreTerms -> MINUS f_pushOperator term . f_popTerm moreTerms
    (83) f_popTerm -> .

    PLUS            reduce using rule 83 (f_popTerm -> .)
    MINUS           reduce using rule 83 (f_popTerm -> .)
    GREATER_THAN    reduce using rule 83 (f_popTerm -> .)
    LESS_THAN       reduce using rule 83 (f_popTerm -> .)
    LESS_EQUAL_THAN reduce using rule 83 (f_popTerm -> .)
    GREATER_EQUAL_THAN reduce using rule 83 (f_popTerm -> .)
    NOT_EQUAL_THAN  reduce using rule 83 (f_popTerm -> .)
    SAME_AS         reduce using rule 83 (f_popTerm -> .)
    NEWLINE         reduce using rule 83 (f_popTerm -> .)
    RPAREN          reduce using rule 83 (f_popTerm -> .)
    COMMA           reduce using rule 83 (f_popTerm -> .)
    COLON           reduce using rule 83 (f_popTerm -> .)

    f_popTerm                      shift and go to state 152

state 138

    (71) expression -> exp compareToken exp f_popComparation .

    COLON           reduce using rule 71 (expression -> exp compareToken exp f_popComparation .)
    RPAREN          reduce using rule 71 (expression -> exp compareToken exp f_popComparation .)
    NEWLINE         reduce using rule 71 (expression -> exp compareToken exp f_popComparation .)
    COMMA           reduce using rule 71 (expression -> exp compareToken exp f_popComparation .)


state 139

    (38) assign -> ID f_checkID EQUAL expression NEWLINE f_generateEqual assign .

    TAB             reduce using rule 38 (assign -> ID f_checkID EQUAL expression NEWLINE f_generateEqual assign .)
    DEF             reduce using rule 38 (assign -> ID f_checkID EQUAL expression NEWLINE f_generateEqual assign .)
    $end            reduce using rule 38 (assign -> ID f_checkID EQUAL expression NEWLINE f_generateEqual assign .)
    WHILE           reduce using rule 38 (assign -> ID f_checkID EQUAL expression NEWLINE f_generateEqual assign .)
    ELSE            reduce using rule 38 (assign -> ID f_checkID EQUAL expression NEWLINE f_generateEqual assign .)


state 140

    (26) functions -> DEF tipo ID f_saveModule LPAREN RPAREN COLON . NEWLINE block f_endModule functions

    NEWLINE         shift and go to state 153


state 141

    (27) functions -> DEF tipo ID f_saveModule LPAREN tipo ID . f_addToParam parameterList RPAREN COLON NEWLINE block f_endModule functions
    (37) f_addToParam -> .

    COMMA           reduce using rule 37 (f_addToParam -> .)
    RPAREN          reduce using rule 37 (f_addToParam -> .)

    f_addToParam                   shift and go to state 154

state 142

    (30) functions -> DEF VOID MAIN f_saveModule LPAREN RPAREN COLON . NEWLINE block f_endModule functions

    NEWLINE         shift and go to state 155


state 143

    (31) functions -> DEF VOID MAIN f_saveModule LPAREN tipo ID . f_addToParam parameterList RPAREN COLON NEWLINE block f_endModule functions
    (37) f_addToParam -> .

    COMMA           reduce using rule 37 (f_addToParam -> .)
    RPAREN          reduce using rule 37 (f_addToParam -> .)

    f_addToParam                   shift and go to state 156

state 144

    (28) functions -> DEF VOID ID f_saveModule LPAREN RPAREN COLON . NEWLINE block f_endModule functions

    NEWLINE         shift and go to state 157


state 145

    (29) functions -> DEF VOID ID f_saveModule LPAREN tipo ID . f_addToParam parameterList RPAREN COLON NEWLINE block f_endModule functions
    (37) f_addToParam -> .

    COMMA           reduce using rule 37 (f_addToParam -> .)
    RPAREN          reduce using rule 37 (f_addToParam -> .)

    f_addToParam                   shift and go to state 158

state 146

    (86) moreFactors -> DIVIDE f_pushOperator factor f_popFactor . moreFactors
    (85) moreFactors -> . empty
    (86) moreFactors -> . DIVIDE f_pushOperator factor f_popFactor moreFactors
    (87) moreFactors -> . TIMES f_pushOperator factor f_popFactor moreFactors
    (88) moreFactors -> . MOD f_pushOperator factor f_popFactor moreFactors
    (3) empty -> .

    DIVIDE          shift and go to state 88
    TIMES           shift and go to state 89
    MOD             shift and go to state 91
    PLUS            reduce using rule 3 (empty -> .)
    MINUS           reduce using rule 3 (empty -> .)
    GREATER_THAN    reduce using rule 3 (empty -> .)
    LESS_THAN       reduce using rule 3 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 3 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 3 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 3 (empty -> .)
    SAME_AS         reduce using rule 3 (empty -> .)
    NEWLINE         reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    COLON           reduce using rule 3 (empty -> .)

    moreFactors                    shift and go to state 159
    empty                          shift and go to state 90

state 147

    (87) moreFactors -> TIMES f_pushOperator factor f_popFactor . moreFactors
    (85) moreFactors -> . empty
    (86) moreFactors -> . DIVIDE f_pushOperator factor f_popFactor moreFactors
    (87) moreFactors -> . TIMES f_pushOperator factor f_popFactor moreFactors
    (88) moreFactors -> . MOD f_pushOperator factor f_popFactor moreFactors
    (3) empty -> .

    DIVIDE          shift and go to state 88
    TIMES           shift and go to state 89
    MOD             shift and go to state 91
    PLUS            reduce using rule 3 (empty -> .)
    MINUS           reduce using rule 3 (empty -> .)
    GREATER_THAN    reduce using rule 3 (empty -> .)
    LESS_THAN       reduce using rule 3 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 3 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 3 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 3 (empty -> .)
    SAME_AS         reduce using rule 3 (empty -> .)
    NEWLINE         reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    COLON           reduce using rule 3 (empty -> .)

    moreFactors                    shift and go to state 160
    empty                          shift and go to state 90

state 148

    (88) moreFactors -> MOD f_pushOperator factor f_popFactor . moreFactors
    (85) moreFactors -> . empty
    (86) moreFactors -> . DIVIDE f_pushOperator factor f_popFactor moreFactors
    (87) moreFactors -> . TIMES f_pushOperator factor f_popFactor moreFactors
    (88) moreFactors -> . MOD f_pushOperator factor f_popFactor moreFactors
    (3) empty -> .

    DIVIDE          shift and go to state 88
    TIMES           shift and go to state 89
    MOD             shift and go to state 91
    PLUS            reduce using rule 3 (empty -> .)
    MINUS           reduce using rule 3 (empty -> .)
    GREATER_THAN    reduce using rule 3 (empty -> .)
    LESS_THAN       reduce using rule 3 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 3 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 3 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 3 (empty -> .)
    SAME_AS         reduce using rule 3 (empty -> .)
    NEWLINE         reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    COLON           reduce using rule 3 (empty -> .)

    moreFactors                    shift and go to state 161
    empty                          shift and go to state 90

state 149

    (89) factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .

    DIVIDE          reduce using rule 89 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    TIMES           reduce using rule 89 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    MOD             reduce using rule 89 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    PLUS            reduce using rule 89 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    MINUS           reduce using rule 89 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    NEWLINE         reduce using rule 89 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    RPAREN          reduce using rule 89 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    COMMA           reduce using rule 89 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    COLON           reduce using rule 89 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    GREATER_THAN    reduce using rule 89 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    LESS_THAN       reduce using rule 89 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    LESS_EQUAL_THAN reduce using rule 89 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    GREATER_EQUAL_THAN reduce using rule 89 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    NOT_EQUAL_THAN  reduce using rule 89 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    SAME_AS         reduce using rule 89 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)


state 150

    (65) funct -> ID f_checkProc LPAREN expression f_genParam . expressionList RPAREN
    (67) expressionList -> . empty
    (68) expressionList -> . COMMA expression f_genParam expressionList
    (3) empty -> .

    COMMA           shift and go to state 163
    RPAREN          reduce using rule 3 (empty -> .)

    empty                          shift and go to state 164
    expressionList                 shift and go to state 162

state 151

    (81) moreTerms -> PLUS f_pushOperator term f_popTerm . moreTerms
    (80) moreTerms -> . empty
    (81) moreTerms -> . PLUS f_pushOperator term f_popTerm moreTerms
    (82) moreTerms -> . MINUS f_pushOperator term f_popTerm moreTerms
    (3) empty -> .

    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    GREATER_THAN    reduce using rule 3 (empty -> .)
    LESS_THAN       reduce using rule 3 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 3 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 3 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 3 (empty -> .)
    SAME_AS         reduce using rule 3 (empty -> .)
    NEWLINE         reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    COLON           reduce using rule 3 (empty -> .)

    moreTerms                      shift and go to state 165
    empty                          shift and go to state 100

state 152

    (82) moreTerms -> MINUS f_pushOperator term f_popTerm . moreTerms
    (80) moreTerms -> . empty
    (81) moreTerms -> . PLUS f_pushOperator term f_popTerm moreTerms
    (82) moreTerms -> . MINUS f_pushOperator term f_popTerm moreTerms
    (3) empty -> .

    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    GREATER_THAN    reduce using rule 3 (empty -> .)
    LESS_THAN       reduce using rule 3 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 3 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 3 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 3 (empty -> .)
    SAME_AS         reduce using rule 3 (empty -> .)
    NEWLINE         reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    COLON           reduce using rule 3 (empty -> .)

    moreTerms                      shift and go to state 166
    empty                          shift and go to state 100

state 153

    (26) functions -> DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE . block f_endModule functions
    (42) block -> . empty
    (43) block -> . TAB newline_tab statement moreStatements
    (3) empty -> .

    TAB             shift and go to state 169
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)

    empty                          shift and go to state 167
    block                          shift and go to state 168

state 154

    (27) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam . parameterList RPAREN COLON NEWLINE block f_endModule functions
    (35) parameterList -> . empty
    (36) parameterList -> . COMMA tipo ID f_addToParam parameterList
    (3) empty -> .

    COMMA           shift and go to state 172
    RPAREN          reduce using rule 3 (empty -> .)

    parameterList                  shift and go to state 170
    empty                          shift and go to state 171

state 155

    (30) functions -> DEF VOID MAIN f_saveModule LPAREN RPAREN COLON NEWLINE . block f_endModule functions
    (42) block -> . empty
    (43) block -> . TAB newline_tab statement moreStatements
    (3) empty -> .

    TAB             shift and go to state 169
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)

    block                          shift and go to state 173
    empty                          shift and go to state 167

state 156

    (31) functions -> DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam . parameterList RPAREN COLON NEWLINE block f_endModule functions
    (35) parameterList -> . empty
    (36) parameterList -> . COMMA tipo ID f_addToParam parameterList
    (3) empty -> .

    COMMA           shift and go to state 172
    RPAREN          reduce using rule 3 (empty -> .)

    parameterList                  shift and go to state 174
    empty                          shift and go to state 171

state 157

    (28) functions -> DEF VOID ID f_saveModule LPAREN RPAREN COLON NEWLINE . block f_endModule functions
    (42) block -> . empty
    (43) block -> . TAB newline_tab statement moreStatements
    (3) empty -> .

    TAB             shift and go to state 169
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)

    block                          shift and go to state 175
    empty                          shift and go to state 167

state 158

    (29) functions -> DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam . parameterList RPAREN COLON NEWLINE block f_endModule functions
    (35) parameterList -> . empty
    (36) parameterList -> . COMMA tipo ID f_addToParam parameterList
    (3) empty -> .

    COMMA           shift and go to state 172
    RPAREN          reduce using rule 3 (empty -> .)

    parameterList                  shift and go to state 176
    empty                          shift and go to state 171

state 159

    (86) moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .

    PLUS            reduce using rule 86 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    MINUS           reduce using rule 86 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    GREATER_THAN    reduce using rule 86 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    LESS_THAN       reduce using rule 86 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    LESS_EQUAL_THAN reduce using rule 86 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    GREATER_EQUAL_THAN reduce using rule 86 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    NOT_EQUAL_THAN  reduce using rule 86 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    SAME_AS         reduce using rule 86 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    NEWLINE         reduce using rule 86 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    RPAREN          reduce using rule 86 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    COMMA           reduce using rule 86 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    COLON           reduce using rule 86 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)


state 160

    (87) moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .

    PLUS            reduce using rule 87 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    MINUS           reduce using rule 87 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    GREATER_THAN    reduce using rule 87 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    LESS_THAN       reduce using rule 87 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    LESS_EQUAL_THAN reduce using rule 87 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    GREATER_EQUAL_THAN reduce using rule 87 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    NOT_EQUAL_THAN  reduce using rule 87 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    SAME_AS         reduce using rule 87 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    NEWLINE         reduce using rule 87 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    RPAREN          reduce using rule 87 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    COMMA           reduce using rule 87 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    COLON           reduce using rule 87 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)


state 161

    (88) moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .

    PLUS            reduce using rule 88 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    MINUS           reduce using rule 88 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    GREATER_THAN    reduce using rule 88 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    LESS_THAN       reduce using rule 88 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    LESS_EQUAL_THAN reduce using rule 88 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    GREATER_EQUAL_THAN reduce using rule 88 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    NOT_EQUAL_THAN  reduce using rule 88 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    SAME_AS         reduce using rule 88 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    NEWLINE         reduce using rule 88 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    RPAREN          reduce using rule 88 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    COMMA           reduce using rule 88 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    COLON           reduce using rule 88 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)


state 162

    (65) funct -> ID f_checkProc LPAREN expression f_genParam expressionList . RPAREN

    RPAREN          shift and go to state 177


state 163

    (68) expressionList -> COMMA . expression f_genParam expressionList
    (70) expression -> . exp
    (71) expression -> . exp compareToken exp f_popComparation
    (79) exp -> . term moreTerms
    (84) term -> . factor moreFactors
    (89) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (90) factor -> . cvar
    (91) factor -> . funct
    (95) cvar -> . ID f_isID
    (96) cvar -> . C_BOOL f_isConst
    (97) cvar -> . C_INT f_isConst
    (98) cvar -> . C_FLOAT f_isConst
    (99) cvar -> . C_STRING f_isConst
    (64) funct -> . ID f_checkProc LPAREN RPAREN
    (65) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 72
    ID              shift and go to state 74
    C_BOOL          shift and go to state 70
    C_INT           shift and go to state 73
    C_FLOAT         shift and go to state 68
    C_STRING        shift and go to state 75

    term                           shift and go to state 76
    funct                          shift and go to state 69
    exp                            shift and go to state 77
    factor                         shift and go to state 71
    cvar                           shift and go to state 67
    expression                     shift and go to state 178

state 164

    (67) expressionList -> empty .

    RPAREN          reduce using rule 67 (expressionList -> empty .)


state 165

    (81) moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .

    GREATER_THAN    reduce using rule 81 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    LESS_THAN       reduce using rule 81 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    LESS_EQUAL_THAN reduce using rule 81 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    GREATER_EQUAL_THAN reduce using rule 81 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    NOT_EQUAL_THAN  reduce using rule 81 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    SAME_AS         reduce using rule 81 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    NEWLINE         reduce using rule 81 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    RPAREN          reduce using rule 81 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    COMMA           reduce using rule 81 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    COLON           reduce using rule 81 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)


state 166

    (82) moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .

    GREATER_THAN    reduce using rule 82 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    LESS_THAN       reduce using rule 82 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    LESS_EQUAL_THAN reduce using rule 82 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    GREATER_EQUAL_THAN reduce using rule 82 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    NOT_EQUAL_THAN  reduce using rule 82 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    SAME_AS         reduce using rule 82 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    NEWLINE         reduce using rule 82 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    RPAREN          reduce using rule 82 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    COMMA           reduce using rule 82 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    COLON           reduce using rule 82 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)


state 167

    (42) block -> empty .

    DEF             reduce using rule 42 (block -> empty .)
    $end            reduce using rule 42 (block -> empty .)
    TAB             reduce using rule 42 (block -> empty .)
    WHILE           reduce using rule 42 (block -> empty .)
    ELSE            reduce using rule 42 (block -> empty .)


state 168

    (26) functions -> DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE block . f_endModule functions
    (33) f_endModule -> .

    DEF             reduce using rule 33 (f_endModule -> .)
    $end            reduce using rule 33 (f_endModule -> .)

    f_endModule                    shift and go to state 179

state 169

    (43) block -> TAB . newline_tab statement moreStatements
    (46) newline_tab -> . empty
    (47) newline_tab -> . NEWLINE TAB newline_tab
    (3) empty -> .

    NEWLINE         shift and go to state 181
    RETURN          reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)
    IF              reduce using rule 3 (empty -> .)
    WHILE           reduce using rule 3 (empty -> .)
    DO              reduce using rule 3 (empty -> .)
    BOOL            reduce using rule 3 (empty -> .)
    INT             reduce using rule 3 (empty -> .)
    FLOAT           reduce using rule 3 (empty -> .)
    STRING          reduce using rule 3 (empty -> .)
    IMAGE           reduce using rule 3 (empty -> .)
    TAB             reduce using rule 3 (empty -> .)
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)
    ELSE            reduce using rule 3 (empty -> .)

    newline_tab                    shift and go to state 180
    empty                          shift and go to state 182

state 170

    (27) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList . RPAREN COLON NEWLINE block f_endModule functions

    RPAREN          shift and go to state 183


state 171

    (35) parameterList -> empty .

    RPAREN          reduce using rule 35 (parameterList -> empty .)


state 172

    (36) parameterList -> COMMA . tipo ID f_addToParam parameterList
    (21) tipo -> . BOOL f_saveType
    (22) tipo -> . INT f_saveType
    (23) tipo -> . FLOAT f_saveType
    (24) tipo -> . STRING f_saveType
    (25) tipo -> . IMAGE f_saveType

    BOOL            shift and go to state 16
    INT             shift and go to state 14
    FLOAT           shift and go to state 11
    STRING          shift and go to state 17
    IMAGE           shift and go to state 15

    tipo                           shift and go to state 184

state 173

    (30) functions -> DEF VOID MAIN f_saveModule LPAREN RPAREN COLON NEWLINE block . f_endModule functions
    (33) f_endModule -> .

    DEF             reduce using rule 33 (f_endModule -> .)
    $end            reduce using rule 33 (f_endModule -> .)

    f_endModule                    shift and go to state 185

state 174

    (31) functions -> DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList . RPAREN COLON NEWLINE block f_endModule functions

    RPAREN          shift and go to state 186


state 175

    (28) functions -> DEF VOID ID f_saveModule LPAREN RPAREN COLON NEWLINE block . f_endModule functions
    (33) f_endModule -> .

    DEF             reduce using rule 33 (f_endModule -> .)
    $end            reduce using rule 33 (f_endModule -> .)

    f_endModule                    shift and go to state 187

state 176

    (29) functions -> DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList . RPAREN COLON NEWLINE block f_endModule functions

    RPAREN          shift and go to state 188


state 177

    (65) funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .

    DIVIDE          reduce using rule 65 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    TIMES           reduce using rule 65 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    MOD             reduce using rule 65 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    PLUS            reduce using rule 65 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    MINUS           reduce using rule 65 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    GREATER_THAN    reduce using rule 65 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    LESS_THAN       reduce using rule 65 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    LESS_EQUAL_THAN reduce using rule 65 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    GREATER_EQUAL_THAN reduce using rule 65 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    NOT_EQUAL_THAN  reduce using rule 65 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    SAME_AS         reduce using rule 65 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    NEWLINE         reduce using rule 65 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    RPAREN          reduce using rule 65 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    COMMA           reduce using rule 65 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    COLON           reduce using rule 65 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)


state 178

    (68) expressionList -> COMMA expression . f_genParam expressionList
    (69) f_genParam -> .

    COMMA           reduce using rule 69 (f_genParam -> .)
    RPAREN          reduce using rule 69 (f_genParam -> .)

    f_genParam                     shift and go to state 189

state 179

    (26) functions -> DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE block f_endModule . functions
    (26) functions -> . DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE block f_endModule functions
    (27) functions -> . DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block f_endModule functions
    (28) functions -> . DEF VOID ID f_saveModule LPAREN RPAREN COLON NEWLINE block f_endModule functions
    (29) functions -> . DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block f_endModule functions
    (30) functions -> . DEF VOID MAIN f_saveModule LPAREN RPAREN COLON NEWLINE block f_endModule functions
    (31) functions -> . DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block f_endModule functions
    (32) functions -> . empty
    (3) empty -> .

    DEF             shift and go to state 43
    $end            reduce using rule 3 (empty -> .)

    functions                      shift and go to state 190
    empty                          shift and go to state 42

state 180

    (43) block -> TAB newline_tab . statement moreStatements
    (48) statement -> . vars
    (49) statement -> . assign
    (50) statement -> . condition
    (51) statement -> . cycle
    (52) statement -> . doCycle
    (53) statement -> . funct NEWLINE
    (54) statement -> . RETURN expression f_return NEWLINE
    (16) vars -> . tipo idList NEWLINE vars
    (17) vars -> . empty
    (38) assign -> . ID f_checkID EQUAL expression NEWLINE f_generateEqual assign
    (39) assign -> . empty
    (56) condition -> . IF f_isCondition expression COLON NEWLINE block
    (57) condition -> . IF f_isCondition expression COLON NEWLINE block ELSE f_popIf COLON NEWLINE block
    (58) cycle -> . WHILE f_isCondition expression COLON NEWLINE block
    (59) doCycle -> . DO f_pushDo COLON NEWLINE block WHILE f_isDoWhile f_isCondition expression NEWLINE
    (64) funct -> . ID f_checkProc LPAREN RPAREN
    (65) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN
    (21) tipo -> . BOOL f_saveType
    (22) tipo -> . INT f_saveType
    (23) tipo -> . FLOAT f_saveType
    (24) tipo -> . STRING f_saveType
    (25) tipo -> . IMAGE f_saveType
    (3) empty -> .

  ! shift/reduce conflict for WHILE resolved as shift
    RETURN          shift and go to state 192
    ID              shift and go to state 200
    IF              shift and go to state 202
    WHILE           shift and go to state 195
    DO              shift and go to state 191
    BOOL            shift and go to state 16
    INT             shift and go to state 14
    FLOAT           shift and go to state 11
    STRING          shift and go to state 17
    IMAGE           shift and go to state 15
    TAB             reduce using rule 3 (empty -> .)
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)
    ELSE            reduce using rule 3 (empty -> .)

  ! WHILE           [ reduce using rule 3 (empty -> .) ]

    vars                           shift and go to state 193
    funct                          shift and go to state 194
    tipo                           shift and go to state 13
    doCycle                        shift and go to state 196
    statement                      shift and go to state 199
    empty                          shift and go to state 198
    condition                      shift and go to state 201
    cycle                          shift and go to state 197
    assign                         shift and go to state 203

state 181

    (47) newline_tab -> NEWLINE . TAB newline_tab

    TAB             shift and go to state 204


state 182

    (46) newline_tab -> empty .

    RETURN          reduce using rule 46 (newline_tab -> empty .)
    ID              reduce using rule 46 (newline_tab -> empty .)
    IF              reduce using rule 46 (newline_tab -> empty .)
    WHILE           reduce using rule 46 (newline_tab -> empty .)
    DO              reduce using rule 46 (newline_tab -> empty .)
    BOOL            reduce using rule 46 (newline_tab -> empty .)
    INT             reduce using rule 46 (newline_tab -> empty .)
    FLOAT           reduce using rule 46 (newline_tab -> empty .)
    STRING          reduce using rule 46 (newline_tab -> empty .)
    IMAGE           reduce using rule 46 (newline_tab -> empty .)
    TAB             reduce using rule 46 (newline_tab -> empty .)
    DEF             reduce using rule 46 (newline_tab -> empty .)
    $end            reduce using rule 46 (newline_tab -> empty .)
    ELSE            reduce using rule 46 (newline_tab -> empty .)


state 183

    (27) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN . COLON NEWLINE block f_endModule functions

    COLON           shift and go to state 205


state 184

    (36) parameterList -> COMMA tipo . ID f_addToParam parameterList

    ID              shift and go to state 206


state 185

    (30) functions -> DEF VOID MAIN f_saveModule LPAREN RPAREN COLON NEWLINE block f_endModule . functions
    (26) functions -> . DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE block f_endModule functions
    (27) functions -> . DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block f_endModule functions
    (28) functions -> . DEF VOID ID f_saveModule LPAREN RPAREN COLON NEWLINE block f_endModule functions
    (29) functions -> . DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block f_endModule functions
    (30) functions -> . DEF VOID MAIN f_saveModule LPAREN RPAREN COLON NEWLINE block f_endModule functions
    (31) functions -> . DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block f_endModule functions
    (32) functions -> . empty
    (3) empty -> .

    DEF             shift and go to state 43
    $end            reduce using rule 3 (empty -> .)

    functions                      shift and go to state 207
    empty                          shift and go to state 42

state 186

    (31) functions -> DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN . COLON NEWLINE block f_endModule functions

    COLON           shift and go to state 208


state 187

    (28) functions -> DEF VOID ID f_saveModule LPAREN RPAREN COLON NEWLINE block f_endModule . functions
    (26) functions -> . DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE block f_endModule functions
    (27) functions -> . DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block f_endModule functions
    (28) functions -> . DEF VOID ID f_saveModule LPAREN RPAREN COLON NEWLINE block f_endModule functions
    (29) functions -> . DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block f_endModule functions
    (30) functions -> . DEF VOID MAIN f_saveModule LPAREN RPAREN COLON NEWLINE block f_endModule functions
    (31) functions -> . DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block f_endModule functions
    (32) functions -> . empty
    (3) empty -> .

    DEF             shift and go to state 43
    $end            reduce using rule 3 (empty -> .)

    functions                      shift and go to state 209
    empty                          shift and go to state 42

state 188

    (29) functions -> DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN . COLON NEWLINE block f_endModule functions

    COLON           shift and go to state 210


state 189

    (68) expressionList -> COMMA expression f_genParam . expressionList
    (67) expressionList -> . empty
    (68) expressionList -> . COMMA expression f_genParam expressionList
    (3) empty -> .

    COMMA           shift and go to state 163
    RPAREN          reduce using rule 3 (empty -> .)

    expressionList                 shift and go to state 211
    empty                          shift and go to state 164

state 190

    (26) functions -> DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE block f_endModule functions .

    $end            reduce using rule 26 (functions -> DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE block f_endModule functions .)


state 191

    (59) doCycle -> DO . f_pushDo COLON NEWLINE block WHILE f_isDoWhile f_isCondition expression NEWLINE
    (61) f_pushDo -> .

    COLON           reduce using rule 61 (f_pushDo -> .)

    f_pushDo                       shift and go to state 212

state 192

    (54) statement -> RETURN . expression f_return NEWLINE
    (70) expression -> . exp
    (71) expression -> . exp compareToken exp f_popComparation
    (79) exp -> . term moreTerms
    (84) term -> . factor moreFactors
    (89) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (90) factor -> . cvar
    (91) factor -> . funct
    (95) cvar -> . ID f_isID
    (96) cvar -> . C_BOOL f_isConst
    (97) cvar -> . C_INT f_isConst
    (98) cvar -> . C_FLOAT f_isConst
    (99) cvar -> . C_STRING f_isConst
    (64) funct -> . ID f_checkProc LPAREN RPAREN
    (65) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 72
    ID              shift and go to state 74
    C_BOOL          shift and go to state 70
    C_INT           shift and go to state 73
    C_FLOAT         shift and go to state 68
    C_STRING        shift and go to state 75

    term                           shift and go to state 76
    funct                          shift and go to state 69
    exp                            shift and go to state 77
    factor                         shift and go to state 71
    cvar                           shift and go to state 67
    expression                     shift and go to state 213

state 193

    (48) statement -> vars .

    TAB             reduce using rule 48 (statement -> vars .)
    DEF             reduce using rule 48 (statement -> vars .)
    $end            reduce using rule 48 (statement -> vars .)
    WHILE           reduce using rule 48 (statement -> vars .)
    ELSE            reduce using rule 48 (statement -> vars .)


state 194

    (53) statement -> funct . NEWLINE

    NEWLINE         shift and go to state 214


state 195

    (58) cycle -> WHILE . f_isCondition expression COLON NEWLINE block
    (63) f_isCondition -> .

    LPAREN          reduce using rule 63 (f_isCondition -> .)
    ID              reduce using rule 63 (f_isCondition -> .)
    C_BOOL          reduce using rule 63 (f_isCondition -> .)
    C_INT           reduce using rule 63 (f_isCondition -> .)
    C_FLOAT         reduce using rule 63 (f_isCondition -> .)
    C_STRING        reduce using rule 63 (f_isCondition -> .)

    f_isCondition                  shift and go to state 215

state 196

    (52) statement -> doCycle .

    TAB             reduce using rule 52 (statement -> doCycle .)
    DEF             reduce using rule 52 (statement -> doCycle .)
    $end            reduce using rule 52 (statement -> doCycle .)
    WHILE           reduce using rule 52 (statement -> doCycle .)
    ELSE            reduce using rule 52 (statement -> doCycle .)


state 197

    (51) statement -> cycle .

    TAB             reduce using rule 51 (statement -> cycle .)
    DEF             reduce using rule 51 (statement -> cycle .)
    $end            reduce using rule 51 (statement -> cycle .)
    WHILE           reduce using rule 51 (statement -> cycle .)
    ELSE            reduce using rule 51 (statement -> cycle .)


state 198

    (17) vars -> empty .
    (39) assign -> empty .

  ! reduce/reduce conflict for TAB resolved using rule 17 (vars -> empty .)
  ! reduce/reduce conflict for DEF resolved using rule 17 (vars -> empty .)
  ! reduce/reduce conflict for $end resolved using rule 17 (vars -> empty .)
  ! reduce/reduce conflict for WHILE resolved using rule 17 (vars -> empty .)
  ! reduce/reduce conflict for ELSE resolved using rule 17 (vars -> empty .)
    TAB             reduce using rule 17 (vars -> empty .)
    DEF             reduce using rule 17 (vars -> empty .)
    $end            reduce using rule 17 (vars -> empty .)
    WHILE           reduce using rule 17 (vars -> empty .)
    ELSE            reduce using rule 17 (vars -> empty .)

  ! TAB             [ reduce using rule 39 (assign -> empty .) ]
  ! DEF             [ reduce using rule 39 (assign -> empty .) ]
  ! $end            [ reduce using rule 39 (assign -> empty .) ]
  ! WHILE           [ reduce using rule 39 (assign -> empty .) ]
  ! ELSE            [ reduce using rule 39 (assign -> empty .) ]


state 199

    (43) block -> TAB newline_tab statement . moreStatements
    (44) moreStatements -> . empty
    (45) moreStatements -> . TAB newline_tab statement moreStatements
    (3) empty -> .

  ! shift/reduce conflict for TAB resolved as shift
    TAB             shift and go to state 217
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)
    WHILE           reduce using rule 3 (empty -> .)
    ELSE            reduce using rule 3 (empty -> .)

  ! TAB             [ reduce using rule 3 (empty -> .) ]

    empty                          shift and go to state 216
    moreStatements                 shift and go to state 218

state 200

    (38) assign -> ID . f_checkID EQUAL expression NEWLINE f_generateEqual assign
    (64) funct -> ID . f_checkProc LPAREN RPAREN
    (65) funct -> ID . f_checkProc LPAREN expression f_genParam expressionList RPAREN
    (41) f_checkID -> .
    (66) f_checkProc -> .

    EQUAL           reduce using rule 41 (f_checkID -> .)
    LPAREN          reduce using rule 66 (f_checkProc -> .)

    f_checkProc                    shift and go to state 94
    f_checkID                      shift and go to state 44

state 201

    (50) statement -> condition .

    TAB             reduce using rule 50 (statement -> condition .)
    DEF             reduce using rule 50 (statement -> condition .)
    $end            reduce using rule 50 (statement -> condition .)
    WHILE           reduce using rule 50 (statement -> condition .)
    ELSE            reduce using rule 50 (statement -> condition .)


state 202

    (56) condition -> IF . f_isCondition expression COLON NEWLINE block
    (57) condition -> IF . f_isCondition expression COLON NEWLINE block ELSE f_popIf COLON NEWLINE block
    (63) f_isCondition -> .

    LPAREN          reduce using rule 63 (f_isCondition -> .)
    ID              reduce using rule 63 (f_isCondition -> .)
    C_BOOL          reduce using rule 63 (f_isCondition -> .)
    C_INT           reduce using rule 63 (f_isCondition -> .)
    C_FLOAT         reduce using rule 63 (f_isCondition -> .)
    C_STRING        reduce using rule 63 (f_isCondition -> .)

    f_isCondition                  shift and go to state 219

state 203

    (49) statement -> assign .

    TAB             reduce using rule 49 (statement -> assign .)
    DEF             reduce using rule 49 (statement -> assign .)
    $end            reduce using rule 49 (statement -> assign .)
    WHILE           reduce using rule 49 (statement -> assign .)
    ELSE            reduce using rule 49 (statement -> assign .)


state 204

    (47) newline_tab -> NEWLINE TAB . newline_tab
    (46) newline_tab -> . empty
    (47) newline_tab -> . NEWLINE TAB newline_tab
    (3) empty -> .

    NEWLINE         shift and go to state 181
    RETURN          reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)
    IF              reduce using rule 3 (empty -> .)
    WHILE           reduce using rule 3 (empty -> .)
    DO              reduce using rule 3 (empty -> .)
    BOOL            reduce using rule 3 (empty -> .)
    INT             reduce using rule 3 (empty -> .)
    FLOAT           reduce using rule 3 (empty -> .)
    STRING          reduce using rule 3 (empty -> .)
    IMAGE           reduce using rule 3 (empty -> .)
    TAB             reduce using rule 3 (empty -> .)
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)
    ELSE            reduce using rule 3 (empty -> .)

    newline_tab                    shift and go to state 220
    empty                          shift and go to state 182

state 205

    (27) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON . NEWLINE block f_endModule functions

    NEWLINE         shift and go to state 221


state 206

    (36) parameterList -> COMMA tipo ID . f_addToParam parameterList
    (37) f_addToParam -> .

    COMMA           reduce using rule 37 (f_addToParam -> .)
    RPAREN          reduce using rule 37 (f_addToParam -> .)

    f_addToParam                   shift and go to state 222

state 207

    (30) functions -> DEF VOID MAIN f_saveModule LPAREN RPAREN COLON NEWLINE block f_endModule functions .

    $end            reduce using rule 30 (functions -> DEF VOID MAIN f_saveModule LPAREN RPAREN COLON NEWLINE block f_endModule functions .)


state 208

    (31) functions -> DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON . NEWLINE block f_endModule functions

    NEWLINE         shift and go to state 223


state 209

    (28) functions -> DEF VOID ID f_saveModule LPAREN RPAREN COLON NEWLINE block f_endModule functions .

    $end            reduce using rule 28 (functions -> DEF VOID ID f_saveModule LPAREN RPAREN COLON NEWLINE block f_endModule functions .)


state 210

    (29) functions -> DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON . NEWLINE block f_endModule functions

    NEWLINE         shift and go to state 224


state 211

    (68) expressionList -> COMMA expression f_genParam expressionList .

    RPAREN          reduce using rule 68 (expressionList -> COMMA expression f_genParam expressionList .)


state 212

    (59) doCycle -> DO f_pushDo . COLON NEWLINE block WHILE f_isDoWhile f_isCondition expression NEWLINE

    COLON           shift and go to state 225


state 213

    (54) statement -> RETURN expression . f_return NEWLINE
    (55) f_return -> .

    NEWLINE         reduce using rule 55 (f_return -> .)

    f_return                       shift and go to state 226

state 214

    (53) statement -> funct NEWLINE .

    TAB             reduce using rule 53 (statement -> funct NEWLINE .)
    DEF             reduce using rule 53 (statement -> funct NEWLINE .)
    $end            reduce using rule 53 (statement -> funct NEWLINE .)
    WHILE           reduce using rule 53 (statement -> funct NEWLINE .)
    ELSE            reduce using rule 53 (statement -> funct NEWLINE .)


state 215

    (58) cycle -> WHILE f_isCondition . expression COLON NEWLINE block
    (70) expression -> . exp
    (71) expression -> . exp compareToken exp f_popComparation
    (79) exp -> . term moreTerms
    (84) term -> . factor moreFactors
    (89) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (90) factor -> . cvar
    (91) factor -> . funct
    (95) cvar -> . ID f_isID
    (96) cvar -> . C_BOOL f_isConst
    (97) cvar -> . C_INT f_isConst
    (98) cvar -> . C_FLOAT f_isConst
    (99) cvar -> . C_STRING f_isConst
    (64) funct -> . ID f_checkProc LPAREN RPAREN
    (65) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 72
    ID              shift and go to state 74
    C_BOOL          shift and go to state 70
    C_INT           shift and go to state 73
    C_FLOAT         shift and go to state 68
    C_STRING        shift and go to state 75

    term                           shift and go to state 76
    funct                          shift and go to state 69
    exp                            shift and go to state 77
    factor                         shift and go to state 71
    cvar                           shift and go to state 67
    expression                     shift and go to state 227

state 216

    (44) moreStatements -> empty .

    TAB             reduce using rule 44 (moreStatements -> empty .)
    DEF             reduce using rule 44 (moreStatements -> empty .)
    $end            reduce using rule 44 (moreStatements -> empty .)
    WHILE           reduce using rule 44 (moreStatements -> empty .)
    ELSE            reduce using rule 44 (moreStatements -> empty .)


state 217

    (45) moreStatements -> TAB . newline_tab statement moreStatements
    (46) newline_tab -> . empty
    (47) newline_tab -> . NEWLINE TAB newline_tab
    (3) empty -> .

    NEWLINE         shift and go to state 181
    RETURN          reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)
    IF              reduce using rule 3 (empty -> .)
    WHILE           reduce using rule 3 (empty -> .)
    DO              reduce using rule 3 (empty -> .)
    BOOL            reduce using rule 3 (empty -> .)
    INT             reduce using rule 3 (empty -> .)
    FLOAT           reduce using rule 3 (empty -> .)
    STRING          reduce using rule 3 (empty -> .)
    IMAGE           reduce using rule 3 (empty -> .)
    TAB             reduce using rule 3 (empty -> .)
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)
    ELSE            reduce using rule 3 (empty -> .)

    newline_tab                    shift and go to state 228
    empty                          shift and go to state 182

state 218

    (43) block -> TAB newline_tab statement moreStatements .

    DEF             reduce using rule 43 (block -> TAB newline_tab statement moreStatements .)
    $end            reduce using rule 43 (block -> TAB newline_tab statement moreStatements .)
    TAB             reduce using rule 43 (block -> TAB newline_tab statement moreStatements .)
    WHILE           reduce using rule 43 (block -> TAB newline_tab statement moreStatements .)
    ELSE            reduce using rule 43 (block -> TAB newline_tab statement moreStatements .)


state 219

    (56) condition -> IF f_isCondition . expression COLON NEWLINE block
    (57) condition -> IF f_isCondition . expression COLON NEWLINE block ELSE f_popIf COLON NEWLINE block
    (70) expression -> . exp
    (71) expression -> . exp compareToken exp f_popComparation
    (79) exp -> . term moreTerms
    (84) term -> . factor moreFactors
    (89) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (90) factor -> . cvar
    (91) factor -> . funct
    (95) cvar -> . ID f_isID
    (96) cvar -> . C_BOOL f_isConst
    (97) cvar -> . C_INT f_isConst
    (98) cvar -> . C_FLOAT f_isConst
    (99) cvar -> . C_STRING f_isConst
    (64) funct -> . ID f_checkProc LPAREN RPAREN
    (65) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 72
    ID              shift and go to state 74
    C_BOOL          shift and go to state 70
    C_INT           shift and go to state 73
    C_FLOAT         shift and go to state 68
    C_STRING        shift and go to state 75

    term                           shift and go to state 76
    funct                          shift and go to state 69
    exp                            shift and go to state 77
    factor                         shift and go to state 71
    cvar                           shift and go to state 67
    expression                     shift and go to state 229

state 220

    (47) newline_tab -> NEWLINE TAB newline_tab .

    RETURN          reduce using rule 47 (newline_tab -> NEWLINE TAB newline_tab .)
    ID              reduce using rule 47 (newline_tab -> NEWLINE TAB newline_tab .)
    IF              reduce using rule 47 (newline_tab -> NEWLINE TAB newline_tab .)
    WHILE           reduce using rule 47 (newline_tab -> NEWLINE TAB newline_tab .)
    DO              reduce using rule 47 (newline_tab -> NEWLINE TAB newline_tab .)
    BOOL            reduce using rule 47 (newline_tab -> NEWLINE TAB newline_tab .)
    INT             reduce using rule 47 (newline_tab -> NEWLINE TAB newline_tab .)
    FLOAT           reduce using rule 47 (newline_tab -> NEWLINE TAB newline_tab .)
    STRING          reduce using rule 47 (newline_tab -> NEWLINE TAB newline_tab .)
    IMAGE           reduce using rule 47 (newline_tab -> NEWLINE TAB newline_tab .)
    TAB             reduce using rule 47 (newline_tab -> NEWLINE TAB newline_tab .)
    DEF             reduce using rule 47 (newline_tab -> NEWLINE TAB newline_tab .)
    $end            reduce using rule 47 (newline_tab -> NEWLINE TAB newline_tab .)
    ELSE            reduce using rule 47 (newline_tab -> NEWLINE TAB newline_tab .)


state 221

    (27) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE . block f_endModule functions
    (42) block -> . empty
    (43) block -> . TAB newline_tab statement moreStatements
    (3) empty -> .

    TAB             shift and go to state 169
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)

    empty                          shift and go to state 167
    block                          shift and go to state 230

state 222

    (36) parameterList -> COMMA tipo ID f_addToParam . parameterList
    (35) parameterList -> . empty
    (36) parameterList -> . COMMA tipo ID f_addToParam parameterList
    (3) empty -> .

    COMMA           shift and go to state 172
    RPAREN          reduce using rule 3 (empty -> .)

    parameterList                  shift and go to state 231
    empty                          shift and go to state 171

state 223

    (31) functions -> DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE . block f_endModule functions
    (42) block -> . empty
    (43) block -> . TAB newline_tab statement moreStatements
    (3) empty -> .

    TAB             shift and go to state 169
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)

    empty                          shift and go to state 167
    block                          shift and go to state 232

state 224

    (29) functions -> DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE . block f_endModule functions
    (42) block -> . empty
    (43) block -> . TAB newline_tab statement moreStatements
    (3) empty -> .

    TAB             shift and go to state 169
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)

    empty                          shift and go to state 167
    block                          shift and go to state 233

state 225

    (59) doCycle -> DO f_pushDo COLON . NEWLINE block WHILE f_isDoWhile f_isCondition expression NEWLINE

    NEWLINE         shift and go to state 234


state 226

    (54) statement -> RETURN expression f_return . NEWLINE

    NEWLINE         shift and go to state 235


state 227

    (58) cycle -> WHILE f_isCondition expression . COLON NEWLINE block

    COLON           shift and go to state 236


state 228

    (45) moreStatements -> TAB newline_tab . statement moreStatements
    (48) statement -> . vars
    (49) statement -> . assign
    (50) statement -> . condition
    (51) statement -> . cycle
    (52) statement -> . doCycle
    (53) statement -> . funct NEWLINE
    (54) statement -> . RETURN expression f_return NEWLINE
    (16) vars -> . tipo idList NEWLINE vars
    (17) vars -> . empty
    (38) assign -> . ID f_checkID EQUAL expression NEWLINE f_generateEqual assign
    (39) assign -> . empty
    (56) condition -> . IF f_isCondition expression COLON NEWLINE block
    (57) condition -> . IF f_isCondition expression COLON NEWLINE block ELSE f_popIf COLON NEWLINE block
    (58) cycle -> . WHILE f_isCondition expression COLON NEWLINE block
    (59) doCycle -> . DO f_pushDo COLON NEWLINE block WHILE f_isDoWhile f_isCondition expression NEWLINE
    (64) funct -> . ID f_checkProc LPAREN RPAREN
    (65) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN
    (21) tipo -> . BOOL f_saveType
    (22) tipo -> . INT f_saveType
    (23) tipo -> . FLOAT f_saveType
    (24) tipo -> . STRING f_saveType
    (25) tipo -> . IMAGE f_saveType
    (3) empty -> .

  ! shift/reduce conflict for WHILE resolved as shift
    RETURN          shift and go to state 192
    ID              shift and go to state 200
    IF              shift and go to state 202
    WHILE           shift and go to state 195
    DO              shift and go to state 191
    BOOL            shift and go to state 16
    INT             shift and go to state 14
    FLOAT           shift and go to state 11
    STRING          shift and go to state 17
    IMAGE           shift and go to state 15
    TAB             reduce using rule 3 (empty -> .)
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)
    ELSE            reduce using rule 3 (empty -> .)

  ! WHILE           [ reduce using rule 3 (empty -> .) ]

    vars                           shift and go to state 193
    funct                          shift and go to state 194
    tipo                           shift and go to state 13
    doCycle                        shift and go to state 196
    statement                      shift and go to state 237
    empty                          shift and go to state 198
    condition                      shift and go to state 201
    cycle                          shift and go to state 197
    assign                         shift and go to state 203

state 229

    (56) condition -> IF f_isCondition expression . COLON NEWLINE block
    (57) condition -> IF f_isCondition expression . COLON NEWLINE block ELSE f_popIf COLON NEWLINE block

    COLON           shift and go to state 238


state 230

    (27) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block . f_endModule functions
    (33) f_endModule -> .

    DEF             reduce using rule 33 (f_endModule -> .)
    $end            reduce using rule 33 (f_endModule -> .)

    f_endModule                    shift and go to state 239

state 231

    (36) parameterList -> COMMA tipo ID f_addToParam parameterList .

    RPAREN          reduce using rule 36 (parameterList -> COMMA tipo ID f_addToParam parameterList .)


state 232

    (31) functions -> DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block . f_endModule functions
    (33) f_endModule -> .

    DEF             reduce using rule 33 (f_endModule -> .)
    $end            reduce using rule 33 (f_endModule -> .)

    f_endModule                    shift and go to state 240

state 233

    (29) functions -> DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block . f_endModule functions
    (33) f_endModule -> .

    DEF             reduce using rule 33 (f_endModule -> .)
    $end            reduce using rule 33 (f_endModule -> .)

    f_endModule                    shift and go to state 241

state 234

    (59) doCycle -> DO f_pushDo COLON NEWLINE . block WHILE f_isDoWhile f_isCondition expression NEWLINE
    (42) block -> . empty
    (43) block -> . TAB newline_tab statement moreStatements
    (3) empty -> .

    TAB             shift and go to state 169
    WHILE           reduce using rule 3 (empty -> .)

    block                          shift and go to state 242
    empty                          shift and go to state 167

state 235

    (54) statement -> RETURN expression f_return NEWLINE .

    TAB             reduce using rule 54 (statement -> RETURN expression f_return NEWLINE .)
    DEF             reduce using rule 54 (statement -> RETURN expression f_return NEWLINE .)
    $end            reduce using rule 54 (statement -> RETURN expression f_return NEWLINE .)
    WHILE           reduce using rule 54 (statement -> RETURN expression f_return NEWLINE .)
    ELSE            reduce using rule 54 (statement -> RETURN expression f_return NEWLINE .)


state 236

    (58) cycle -> WHILE f_isCondition expression COLON . NEWLINE block

    NEWLINE         shift and go to state 243


state 237

    (45) moreStatements -> TAB newline_tab statement . moreStatements
    (44) moreStatements -> . empty
    (45) moreStatements -> . TAB newline_tab statement moreStatements
    (3) empty -> .

  ! shift/reduce conflict for TAB resolved as shift
    TAB             shift and go to state 217
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)
    WHILE           reduce using rule 3 (empty -> .)
    ELSE            reduce using rule 3 (empty -> .)

  ! TAB             [ reduce using rule 3 (empty -> .) ]

    empty                          shift and go to state 216
    moreStatements                 shift and go to state 244

state 238

    (56) condition -> IF f_isCondition expression COLON . NEWLINE block
    (57) condition -> IF f_isCondition expression COLON . NEWLINE block ELSE f_popIf COLON NEWLINE block

    NEWLINE         shift and go to state 245


state 239

    (27) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block f_endModule . functions
    (26) functions -> . DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE block f_endModule functions
    (27) functions -> . DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block f_endModule functions
    (28) functions -> . DEF VOID ID f_saveModule LPAREN RPAREN COLON NEWLINE block f_endModule functions
    (29) functions -> . DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block f_endModule functions
    (30) functions -> . DEF VOID MAIN f_saveModule LPAREN RPAREN COLON NEWLINE block f_endModule functions
    (31) functions -> . DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block f_endModule functions
    (32) functions -> . empty
    (3) empty -> .

    DEF             shift and go to state 43
    $end            reduce using rule 3 (empty -> .)

    functions                      shift and go to state 246
    empty                          shift and go to state 42

state 240

    (31) functions -> DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block f_endModule . functions
    (26) functions -> . DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE block f_endModule functions
    (27) functions -> . DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block f_endModule functions
    (28) functions -> . DEF VOID ID f_saveModule LPAREN RPAREN COLON NEWLINE block f_endModule functions
    (29) functions -> . DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block f_endModule functions
    (30) functions -> . DEF VOID MAIN f_saveModule LPAREN RPAREN COLON NEWLINE block f_endModule functions
    (31) functions -> . DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block f_endModule functions
    (32) functions -> . empty
    (3) empty -> .

    DEF             shift and go to state 43
    $end            reduce using rule 3 (empty -> .)

    functions                      shift and go to state 247
    empty                          shift and go to state 42

state 241

    (29) functions -> DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block f_endModule . functions
    (26) functions -> . DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE block f_endModule functions
    (27) functions -> . DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block f_endModule functions
    (28) functions -> . DEF VOID ID f_saveModule LPAREN RPAREN COLON NEWLINE block f_endModule functions
    (29) functions -> . DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block f_endModule functions
    (30) functions -> . DEF VOID MAIN f_saveModule LPAREN RPAREN COLON NEWLINE block f_endModule functions
    (31) functions -> . DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block f_endModule functions
    (32) functions -> . empty
    (3) empty -> .

    DEF             shift and go to state 43
    $end            reduce using rule 3 (empty -> .)

    functions                      shift and go to state 248
    empty                          shift and go to state 42

state 242

    (59) doCycle -> DO f_pushDo COLON NEWLINE block . WHILE f_isDoWhile f_isCondition expression NEWLINE

    WHILE           shift and go to state 249


state 243

    (58) cycle -> WHILE f_isCondition expression COLON NEWLINE . block
    (42) block -> . empty
    (43) block -> . TAB newline_tab statement moreStatements
    (3) empty -> .

  ! shift/reduce conflict for TAB resolved as shift
    TAB             shift and go to state 169
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)
    WHILE           reduce using rule 3 (empty -> .)
    ELSE            reduce using rule 3 (empty -> .)

  ! TAB             [ reduce using rule 3 (empty -> .) ]

    block                          shift and go to state 250
    empty                          shift and go to state 167

state 244

    (45) moreStatements -> TAB newline_tab statement moreStatements .

    TAB             reduce using rule 45 (moreStatements -> TAB newline_tab statement moreStatements .)
    DEF             reduce using rule 45 (moreStatements -> TAB newline_tab statement moreStatements .)
    $end            reduce using rule 45 (moreStatements -> TAB newline_tab statement moreStatements .)
    WHILE           reduce using rule 45 (moreStatements -> TAB newline_tab statement moreStatements .)
    ELSE            reduce using rule 45 (moreStatements -> TAB newline_tab statement moreStatements .)


state 245

    (56) condition -> IF f_isCondition expression COLON NEWLINE . block
    (57) condition -> IF f_isCondition expression COLON NEWLINE . block ELSE f_popIf COLON NEWLINE block
    (42) block -> . empty
    (43) block -> . TAB newline_tab statement moreStatements
    (3) empty -> .

  ! shift/reduce conflict for TAB resolved as shift
    TAB             shift and go to state 169
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)
    WHILE           reduce using rule 3 (empty -> .)
    ELSE            reduce using rule 3 (empty -> .)

  ! TAB             [ reduce using rule 3 (empty -> .) ]

    block                          shift and go to state 251
    empty                          shift and go to state 167

state 246

    (27) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block f_endModule functions .

    $end            reduce using rule 27 (functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block f_endModule functions .)


state 247

    (31) functions -> DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block f_endModule functions .

    $end            reduce using rule 31 (functions -> DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block f_endModule functions .)


state 248

    (29) functions -> DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block f_endModule functions .

    $end            reduce using rule 29 (functions -> DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block f_endModule functions .)


state 249

    (59) doCycle -> DO f_pushDo COLON NEWLINE block WHILE . f_isDoWhile f_isCondition expression NEWLINE
    (62) f_isDoWhile -> .

    LPAREN          reduce using rule 62 (f_isDoWhile -> .)
    ID              reduce using rule 62 (f_isDoWhile -> .)
    C_BOOL          reduce using rule 62 (f_isDoWhile -> .)
    C_INT           reduce using rule 62 (f_isDoWhile -> .)
    C_FLOAT         reduce using rule 62 (f_isDoWhile -> .)
    C_STRING        reduce using rule 62 (f_isDoWhile -> .)

    f_isDoWhile                    shift and go to state 252

state 250

    (58) cycle -> WHILE f_isCondition expression COLON NEWLINE block .

    TAB             reduce using rule 58 (cycle -> WHILE f_isCondition expression COLON NEWLINE block .)
    DEF             reduce using rule 58 (cycle -> WHILE f_isCondition expression COLON NEWLINE block .)
    $end            reduce using rule 58 (cycle -> WHILE f_isCondition expression COLON NEWLINE block .)
    WHILE           reduce using rule 58 (cycle -> WHILE f_isCondition expression COLON NEWLINE block .)
    ELSE            reduce using rule 58 (cycle -> WHILE f_isCondition expression COLON NEWLINE block .)


state 251

    (56) condition -> IF f_isCondition expression COLON NEWLINE block .
    (57) condition -> IF f_isCondition expression COLON NEWLINE block . ELSE f_popIf COLON NEWLINE block

  ! shift/reduce conflict for ELSE resolved as shift
    TAB             reduce using rule 56 (condition -> IF f_isCondition expression COLON NEWLINE block .)
    DEF             reduce using rule 56 (condition -> IF f_isCondition expression COLON NEWLINE block .)
    $end            reduce using rule 56 (condition -> IF f_isCondition expression COLON NEWLINE block .)
    WHILE           reduce using rule 56 (condition -> IF f_isCondition expression COLON NEWLINE block .)
    ELSE            shift and go to state 253

  ! ELSE            [ reduce using rule 56 (condition -> IF f_isCondition expression COLON NEWLINE block .) ]


state 252

    (59) doCycle -> DO f_pushDo COLON NEWLINE block WHILE f_isDoWhile . f_isCondition expression NEWLINE
    (63) f_isCondition -> .

    LPAREN          reduce using rule 63 (f_isCondition -> .)
    ID              reduce using rule 63 (f_isCondition -> .)
    C_BOOL          reduce using rule 63 (f_isCondition -> .)
    C_INT           reduce using rule 63 (f_isCondition -> .)
    C_FLOAT         reduce using rule 63 (f_isCondition -> .)
    C_STRING        reduce using rule 63 (f_isCondition -> .)

    f_isCondition                  shift and go to state 254

state 253

    (57) condition -> IF f_isCondition expression COLON NEWLINE block ELSE . f_popIf COLON NEWLINE block
    (60) f_popIf -> .

    COLON           reduce using rule 60 (f_popIf -> .)

    f_popIf                        shift and go to state 255

state 254

    (59) doCycle -> DO f_pushDo COLON NEWLINE block WHILE f_isDoWhile f_isCondition . expression NEWLINE
    (70) expression -> . exp
    (71) expression -> . exp compareToken exp f_popComparation
    (79) exp -> . term moreTerms
    (84) term -> . factor moreFactors
    (89) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (90) factor -> . cvar
    (91) factor -> . funct
    (95) cvar -> . ID f_isID
    (96) cvar -> . C_BOOL f_isConst
    (97) cvar -> . C_INT f_isConst
    (98) cvar -> . C_FLOAT f_isConst
    (99) cvar -> . C_STRING f_isConst
    (64) funct -> . ID f_checkProc LPAREN RPAREN
    (65) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 72
    ID              shift and go to state 74
    C_BOOL          shift and go to state 70
    C_INT           shift and go to state 73
    C_FLOAT         shift and go to state 68
    C_STRING        shift and go to state 75

    funct                          shift and go to state 69
    term                           shift and go to state 76
    exp                            shift and go to state 77
    factor                         shift and go to state 71
    cvar                           shift and go to state 67
    expression                     shift and go to state 256

state 255

    (57) condition -> IF f_isCondition expression COLON NEWLINE block ELSE f_popIf . COLON NEWLINE block

    COLON           shift and go to state 257


state 256

    (59) doCycle -> DO f_pushDo COLON NEWLINE block WHILE f_isDoWhile f_isCondition expression . NEWLINE

    NEWLINE         shift and go to state 258


state 257

    (57) condition -> IF f_isCondition expression COLON NEWLINE block ELSE f_popIf COLON . NEWLINE block

    NEWLINE         shift and go to state 259


state 258

    (59) doCycle -> DO f_pushDo COLON NEWLINE block WHILE f_isDoWhile f_isCondition expression NEWLINE .

    TAB             reduce using rule 59 (doCycle -> DO f_pushDo COLON NEWLINE block WHILE f_isDoWhile f_isCondition expression NEWLINE .)
    DEF             reduce using rule 59 (doCycle -> DO f_pushDo COLON NEWLINE block WHILE f_isDoWhile f_isCondition expression NEWLINE .)
    $end            reduce using rule 59 (doCycle -> DO f_pushDo COLON NEWLINE block WHILE f_isDoWhile f_isCondition expression NEWLINE .)
    WHILE           reduce using rule 59 (doCycle -> DO f_pushDo COLON NEWLINE block WHILE f_isDoWhile f_isCondition expression NEWLINE .)
    ELSE            reduce using rule 59 (doCycle -> DO f_pushDo COLON NEWLINE block WHILE f_isDoWhile f_isCondition expression NEWLINE .)


state 259

    (57) condition -> IF f_isCondition expression COLON NEWLINE block ELSE f_popIf COLON NEWLINE . block
    (42) block -> . empty
    (43) block -> . TAB newline_tab statement moreStatements
    (3) empty -> .

  ! shift/reduce conflict for TAB resolved as shift
    TAB             shift and go to state 169
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)
    WHILE           reduce using rule 3 (empty -> .)
    ELSE            reduce using rule 3 (empty -> .)

  ! TAB             [ reduce using rule 3 (empty -> .) ]

    block                          shift and go to state 260
    empty                          shift and go to state 167

state 260

    (57) condition -> IF f_isCondition expression COLON NEWLINE block ELSE f_popIf COLON NEWLINE block .

    TAB             reduce using rule 57 (condition -> IF f_isCondition expression COLON NEWLINE block ELSE f_popIf COLON NEWLINE block .)
    DEF             reduce using rule 57 (condition -> IF f_isCondition expression COLON NEWLINE block ELSE f_popIf COLON NEWLINE block .)
    $end            reduce using rule 57 (condition -> IF f_isCondition expression COLON NEWLINE block ELSE f_popIf COLON NEWLINE block .)
    WHILE           reduce using rule 57 (condition -> IF f_isCondition expression COLON NEWLINE block ELSE f_popIf COLON NEWLINE block .)
    ELSE            reduce using rule 57 (condition -> IF f_isCondition expression COLON NEWLINE block ELSE f_popIf COLON NEWLINE block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for WHILE in state 180 resolved as shift
WARNING: shift/reduce conflict for TAB in state 199 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 228 resolved as shift
WARNING: shift/reduce conflict for TAB in state 237 resolved as shift
WARNING: shift/reduce conflict for TAB in state 243 resolved as shift
WARNING: shift/reduce conflict for TAB in state 245 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 251 resolved as shift
WARNING: shift/reduce conflict for TAB in state 259 resolved as shift
WARNING: reduce/reduce conflict in state 198 resolved using rule (vars -> empty)
WARNING: rejected rule (assign -> empty) in state 198
