Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    PERIOD
    AND
    NOT
    OR

Grammar

Rule 0     S' -> program
Rule 1     program -> programName hardware vars assign functions
Rule 2     programName -> PROGRAM ID NEWLINE
Rule 3     empty -> <empty>
Rule 4     hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration
Rule 5     camDeclaration -> empty
Rule 6     camDeclaration -> CAM WEBCAM COLON ID NEWLINE
Rule 7     camDeclaration -> CAM PICAM COLON ID NEWLINE
Rule 8     inputsDeclaration -> empty
Rule 9     inputsDeclaration -> INPUT f_saveType pinList NEWLINE
Rule 10    outputsDeclaration -> empty
Rule 11    outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE
Rule 12    pwmDeclaration -> empty
Rule 13    pwmDeclaration -> PWM f_saveType pinList NEWLINE
Rule 14    pinList -> C_INT COLON ID
Rule 15    pinList -> C_INT COLON ID COMMA pinList
Rule 16    vars -> f_checkTab tipo idList NEWLINE f_resetTab moreVars
Rule 17    moreVars -> f_checkTab tipo idList NEWLINE f_resetTab moreVars
Rule 18    moreVars -> empty
Rule 19    f_saveType -> <empty>
Rule 20    idList -> ID
Rule 21    idList -> ID COMMA idList
Rule 22    tipo -> BOOL f_saveType
Rule 23    tipo -> INT f_saveType
Rule 24    tipo -> FLOAT f_saveType
Rule 25    tipo -> STRING f_saveType
Rule 26    tipo -> IMAGE f_saveType
Rule 27    functions -> DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
Rule 28    functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
Rule 29    functions -> DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
Rule 30    functions -> DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
Rule 31    functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
Rule 32    functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
Rule 33    functions -> empty
Rule 34    f_setVoid -> <empty>
Rule 35    f_endModule -> <empty>
Rule 36    f_saveModule -> <empty>
Rule 37    parameterList -> empty
Rule 38    parameterList -> COMMA tipo ID f_addToParam parameterList
Rule 39    f_addToParam -> <empty>
Rule 40    assign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign
Rule 41    moreAssign -> empty
Rule 42    moreAssign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign
Rule 43    f_isAssign -> <empty>
Rule 44    f_generateEqual -> <empty>
Rule 45    f_checkID -> <empty>
Rule 46    moreStatements -> empty
Rule 47    moreStatements -> TAB f_addTab moreTabs statement moreStatements
Rule 48    block -> TAB f_addTab moreTabs statement moreStatements
Rule 49    moreTabs -> empty
Rule 50    moreTabs -> TAB f_addTab moreTabs
Rule 51    moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs
Rule 52    f_incTab -> <empty>
Rule 53    f_addTab -> <empty>
Rule 54    f_resetTab -> <empty>
Rule 55    f_checkTab -> <empty>
Rule 56    statement -> vars
Rule 57    statement -> assign
Rule 58    statement -> f_checkTab condition
Rule 59    statement -> f_checkTab doCycle
Rule 60    statement -> cycle
Rule 61    statement -> f_checkTab funct NEWLINE f_resetTab
Rule 62    statement -> f_checkTab RETURN f_isReturn expression f_return NEWLINE f_resetTab
Rule 63    statement -> empty
Rule 64    f_isReturn -> <empty>
Rule 65    f_return -> <empty>
Rule 66    cycle -> f_checkTab WHILE f_isCondition expression COLON NEWLINE f_resetTab f_incTab block
Rule 67    condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block
Rule 68    condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block
Rule 69    f_decTab -> <empty>
Rule 70    doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block LOOP f_isDoWhile f_isCondition expression NEWLINE f_resetTab
Rule 71    f_popIf -> <empty>
Rule 72    f_pushDo -> <empty>
Rule 73    f_isDoWhile -> <empty>
Rule 74    f_isCondition -> <empty>
Rule 75    funct -> ID f_checkProc LPAREN RPAREN
Rule 76    funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN
Rule 77    f_checkProc -> <empty>
Rule 78    expressionList -> empty
Rule 79    expressionList -> COMMA expression f_genParam expressionList
Rule 80    f_genParam -> <empty>
Rule 81    expression -> exp
Rule 82    expression -> exp compareToken exp f_popComparation
Rule 83    f_popComparation -> <empty>
Rule 84    compareToken -> GREATER_THAN
Rule 85    compareToken -> LESS_THAN
Rule 86    compareToken -> LESS_EQUAL_THAN
Rule 87    compareToken -> GREATER_EQUAL_THAN
Rule 88    compareToken -> NOT_EQUAL_THAN
Rule 89    compareToken -> SAME_AS
Rule 90    exp -> term moreTerms
Rule 91    moreTerms -> empty
Rule 92    moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms
Rule 93    moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms
Rule 94    f_popTerm -> <empty>
Rule 95    term -> factor moreFactors
Rule 96    moreFactors -> empty
Rule 97    moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors
Rule 98    moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors
Rule 99    moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors
Rule 100   factor -> LPAREN f_pushOperator expression RPAREN f_popOperator
Rule 101   factor -> cvar
Rule 102   factor -> funct
Rule 103   f_pushOperator -> <empty>
Rule 104   f_popOperator -> <empty>
Rule 105   f_popFactor -> <empty>
Rule 106   cvar -> ID f_isID
Rule 107   cvar -> C_BOOL f_isConst
Rule 108   cvar -> C_INT f_isConst
Rule 109   cvar -> C_FLOAT f_isConst
Rule 110   cvar -> C_STRING f_isConst
Rule 111   f_isID -> <empty>
Rule 112   f_isConst -> <empty>

Terminals, with rules where they appear

AND                  : 
BOOL                 : 22
CAM                  : 6 7
COLON                : 6 7 14 15 27 28 29 30 31 32 66 67 68 68 70
COMMA                : 15 21 38 79
C_BOOL               : 107
C_FLOAT              : 109
C_INT                : 14 15 108
C_STRING             : 110
DEF                  : 27 28 29 30 31 32
DIVIDE               : 97
DO                   : 70
ELSE                 : 68
EQUAL                : 40 42
FLOAT                : 24
GREATER_EQUAL_THAN   : 87
GREATER_THAN         : 84
ID                   : 2 6 7 14 15 20 21 27 28 28 29 30 30 32 38 40 42 75 76 106
IF                   : 67 68
IMAGE                : 26
INPUT                : 9
INT                  : 23
LESS_EQUAL_THAN      : 86
LESS_THAN            : 85
LOOP                 : 70
LPAREN               : 27 28 29 30 31 32 75 76 100
MAIN                 : 31 32
MINUS                : 93
MOD                  : 99
NEWLINE              : 2 6 7 9 11 13 16 17 27 28 29 30 31 32 40 42 51 61 62 66 67 68 68 70 70
NOT                  : 
NOT_EQUAL_THAN       : 88
OR                   : 
OUTPUT               : 11
PERIOD               : 
PICAM                : 7
PLUS                 : 92
PROGRAM              : 2
PWM                  : 13
RETURN               : 62
RPAREN               : 27 28 29 30 31 32 75 76 100
SAME_AS              : 89
STRING               : 25
TAB                  : 47 48 50 51
TIMES                : 98
VOID                 : 29 30 31 32
WEBCAM               : 6
WHILE                : 66
error                : 

Nonterminals, with rules where they appear

assign               : 1 57
block                : 27 28 29 30 31 32 66 67 68 68 70
camDeclaration       : 4
compareToken         : 82
condition            : 58
cvar                 : 101
cycle                : 60
doCycle              : 59
empty                : 5 8 10 12 18 33 37 41 46 49 63 78 91 96
exp                  : 81 82 82
expression           : 40 42 62 66 67 68 70 76 79 100
expressionList       : 76 79
f_addTab             : 47 48 50 51
f_addToParam         : 28 30 32 38
f_checkID            : 40 42
f_checkProc          : 75 76
f_checkTab           : 16 17 40 42 58 59 61 62 66
f_decTab             : 
f_endModule          : 27 28 29 30 31 32
f_genParam           : 76 79
f_generateEqual      : 40 42
f_incTab             : 27 28 29 30 31 32 66 67 68 68 70
f_isAssign           : 40 42
f_isCondition        : 66 67 68 70
f_isConst            : 107 108 109 110
f_isDoWhile          : 70
f_isID               : 106
f_isReturn           : 62
f_popComparation     : 82
f_popFactor          : 97 98 99
f_popIf              : 68
f_popOperator        : 100
f_popTerm            : 92 93
f_pushDo             : 70
f_pushOperator       : 92 93 97 98 99 100
f_resetTab           : 16 17 27 28 29 30 31 32 40 42 51 61 62 66 67 68 68 70 70
f_return             : 62
f_saveModule         : 27 28 29 30 31 32
f_saveType           : 9 11 13 22 23 24 25 26
f_setVoid            : 29 30 31 32
factor               : 95 97 98 99
funct                : 61 102
functions            : 1 27 28 29 30 31 32
hardware             : 1
idList               : 16 17 21
inputsDeclaration    : 4
moreAssign           : 40 42
moreFactors          : 95 97 98 99
moreStatements       : 47 48
moreTabs             : 47 48 50 51
moreTerms            : 90 92 93
moreVars             : 16 17
outputsDeclaration   : 4
parameterList        : 28 30 32 38
pinList              : 9 11 13 15
program              : 0
programName          : 1
pwmDeclaration       : 4
statement            : 47 48
term                 : 90 92 93
tipo                 : 16 17 27 28 28 30 32 38
vars                 : 1 56

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . programName hardware vars assign functions
    (2) programName -> . PROGRAM ID NEWLINE

    PROGRAM         shift and go to state 3

    program                        shift and go to state 1
    programName                    shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> programName . hardware vars assign functions
    (4) hardware -> . camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration
    (5) camDeclaration -> . empty
    (6) camDeclaration -> . CAM WEBCAM COLON ID NEWLINE
    (7) camDeclaration -> . CAM PICAM COLON ID NEWLINE
    (3) empty -> .

    CAM             shift and go to state 4
    INPUT           reduce using rule 3 (empty -> .)
    OUTPUT          reduce using rule 3 (empty -> .)
    PWM             reduce using rule 3 (empty -> .)
    BOOL            reduce using rule 3 (empty -> .)
    INT             reduce using rule 3 (empty -> .)
    FLOAT           reduce using rule 3 (empty -> .)
    STRING          reduce using rule 3 (empty -> .)
    IMAGE           reduce using rule 3 (empty -> .)

    hardware                       shift and go to state 5
    camDeclaration                 shift and go to state 6
    empty                          shift and go to state 7

state 3

    (2) programName -> PROGRAM . ID NEWLINE

    ID              shift and go to state 8


state 4

    (6) camDeclaration -> CAM . WEBCAM COLON ID NEWLINE
    (7) camDeclaration -> CAM . PICAM COLON ID NEWLINE

    WEBCAM          shift and go to state 9
    PICAM           shift and go to state 10


state 5

    (1) program -> programName hardware . vars assign functions
    (16) vars -> . f_checkTab tipo idList NEWLINE f_resetTab moreVars
    (55) f_checkTab -> .

    BOOL            reduce using rule 55 (f_checkTab -> .)
    INT             reduce using rule 55 (f_checkTab -> .)
    FLOAT           reduce using rule 55 (f_checkTab -> .)
    STRING          reduce using rule 55 (f_checkTab -> .)
    IMAGE           reduce using rule 55 (f_checkTab -> .)

    vars                           shift and go to state 11
    f_checkTab                     shift and go to state 12

state 6

    (4) hardware -> camDeclaration . inputsDeclaration outputsDeclaration pwmDeclaration
    (8) inputsDeclaration -> . empty
    (9) inputsDeclaration -> . INPUT f_saveType pinList NEWLINE
    (3) empty -> .

    INPUT           shift and go to state 14
    OUTPUT          reduce using rule 3 (empty -> .)
    PWM             reduce using rule 3 (empty -> .)
    BOOL            reduce using rule 3 (empty -> .)
    INT             reduce using rule 3 (empty -> .)
    FLOAT           reduce using rule 3 (empty -> .)
    STRING          reduce using rule 3 (empty -> .)
    IMAGE           reduce using rule 3 (empty -> .)

    inputsDeclaration              shift and go to state 13
    empty                          shift and go to state 15

state 7

    (5) camDeclaration -> empty .

    INPUT           reduce using rule 5 (camDeclaration -> empty .)
    OUTPUT          reduce using rule 5 (camDeclaration -> empty .)
    PWM             reduce using rule 5 (camDeclaration -> empty .)
    BOOL            reduce using rule 5 (camDeclaration -> empty .)
    INT             reduce using rule 5 (camDeclaration -> empty .)
    FLOAT           reduce using rule 5 (camDeclaration -> empty .)
    STRING          reduce using rule 5 (camDeclaration -> empty .)
    IMAGE           reduce using rule 5 (camDeclaration -> empty .)


state 8

    (2) programName -> PROGRAM ID . NEWLINE

    NEWLINE         shift and go to state 16


state 9

    (6) camDeclaration -> CAM WEBCAM . COLON ID NEWLINE

    COLON           shift and go to state 17


state 10

    (7) camDeclaration -> CAM PICAM . COLON ID NEWLINE

    COLON           shift and go to state 18


state 11

    (1) program -> programName hardware vars . assign functions
    (40) assign -> . f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign
    (55) f_checkTab -> .

    ID              reduce using rule 55 (f_checkTab -> .)

    f_checkTab                     shift and go to state 19
    assign                         shift and go to state 20

state 12

    (16) vars -> f_checkTab . tipo idList NEWLINE f_resetTab moreVars
    (22) tipo -> . BOOL f_saveType
    (23) tipo -> . INT f_saveType
    (24) tipo -> . FLOAT f_saveType
    (25) tipo -> . STRING f_saveType
    (26) tipo -> . IMAGE f_saveType

    BOOL            shift and go to state 24
    INT             shift and go to state 23
    FLOAT           shift and go to state 21
    STRING          shift and go to state 26
    IMAGE           shift and go to state 25

    tipo                           shift and go to state 22

state 13

    (4) hardware -> camDeclaration inputsDeclaration . outputsDeclaration pwmDeclaration
    (10) outputsDeclaration -> . empty
    (11) outputsDeclaration -> . OUTPUT f_saveType pinList NEWLINE
    (3) empty -> .

    OUTPUT          shift and go to state 28
    PWM             reduce using rule 3 (empty -> .)
    BOOL            reduce using rule 3 (empty -> .)
    INT             reduce using rule 3 (empty -> .)
    FLOAT           reduce using rule 3 (empty -> .)
    STRING          reduce using rule 3 (empty -> .)
    IMAGE           reduce using rule 3 (empty -> .)

    outputsDeclaration             shift and go to state 27
    empty                          shift and go to state 29

state 14

    (9) inputsDeclaration -> INPUT . f_saveType pinList NEWLINE
    (19) f_saveType -> .

    C_INT           reduce using rule 19 (f_saveType -> .)

    f_saveType                     shift and go to state 30

state 15

    (8) inputsDeclaration -> empty .

    OUTPUT          reduce using rule 8 (inputsDeclaration -> empty .)
    PWM             reduce using rule 8 (inputsDeclaration -> empty .)
    BOOL            reduce using rule 8 (inputsDeclaration -> empty .)
    INT             reduce using rule 8 (inputsDeclaration -> empty .)
    FLOAT           reduce using rule 8 (inputsDeclaration -> empty .)
    STRING          reduce using rule 8 (inputsDeclaration -> empty .)
    IMAGE           reduce using rule 8 (inputsDeclaration -> empty .)


state 16

    (2) programName -> PROGRAM ID NEWLINE .

    CAM             reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)
    BOOL            reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)
    INT             reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)
    FLOAT           reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)
    STRING          reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)
    IMAGE           reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)
    INPUT           reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)
    OUTPUT          reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)
    PWM             reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)


state 17

    (6) camDeclaration -> CAM WEBCAM COLON . ID NEWLINE

    ID              shift and go to state 31


state 18

    (7) camDeclaration -> CAM PICAM COLON . ID NEWLINE

    ID              shift and go to state 32


state 19

    (40) assign -> f_checkTab . ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign

    ID              shift and go to state 33


state 20

    (1) program -> programName hardware vars assign . functions
    (27) functions -> . DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (28) functions -> . DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (29) functions -> . DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (30) functions -> . DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (31) functions -> . DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (32) functions -> . DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (33) functions -> . empty
    (3) empty -> .

    DEF             shift and go to state 34
    $end            reduce using rule 3 (empty -> .)

    functions                      shift and go to state 35
    empty                          shift and go to state 36

state 21

    (24) tipo -> FLOAT . f_saveType
    (19) f_saveType -> .

    ID              reduce using rule 19 (f_saveType -> .)

    f_saveType                     shift and go to state 37

state 22

    (16) vars -> f_checkTab tipo . idList NEWLINE f_resetTab moreVars
    (20) idList -> . ID
    (21) idList -> . ID COMMA idList

    ID              shift and go to state 39

    idList                         shift and go to state 38

state 23

    (23) tipo -> INT . f_saveType
    (19) f_saveType -> .

    ID              reduce using rule 19 (f_saveType -> .)

    f_saveType                     shift and go to state 40

state 24

    (22) tipo -> BOOL . f_saveType
    (19) f_saveType -> .

    ID              reduce using rule 19 (f_saveType -> .)

    f_saveType                     shift and go to state 41

state 25

    (26) tipo -> IMAGE . f_saveType
    (19) f_saveType -> .

    ID              reduce using rule 19 (f_saveType -> .)

    f_saveType                     shift and go to state 42

state 26

    (25) tipo -> STRING . f_saveType
    (19) f_saveType -> .

    ID              reduce using rule 19 (f_saveType -> .)

    f_saveType                     shift and go to state 43

state 27

    (4) hardware -> camDeclaration inputsDeclaration outputsDeclaration . pwmDeclaration
    (12) pwmDeclaration -> . empty
    (13) pwmDeclaration -> . PWM f_saveType pinList NEWLINE
    (3) empty -> .

    PWM             shift and go to state 45
    BOOL            reduce using rule 3 (empty -> .)
    INT             reduce using rule 3 (empty -> .)
    FLOAT           reduce using rule 3 (empty -> .)
    STRING          reduce using rule 3 (empty -> .)
    IMAGE           reduce using rule 3 (empty -> .)

    pwmDeclaration                 shift and go to state 44
    empty                          shift and go to state 46

state 28

    (11) outputsDeclaration -> OUTPUT . f_saveType pinList NEWLINE
    (19) f_saveType -> .

    C_INT           reduce using rule 19 (f_saveType -> .)

    f_saveType                     shift and go to state 47

state 29

    (10) outputsDeclaration -> empty .

    PWM             reduce using rule 10 (outputsDeclaration -> empty .)
    BOOL            reduce using rule 10 (outputsDeclaration -> empty .)
    INT             reduce using rule 10 (outputsDeclaration -> empty .)
    FLOAT           reduce using rule 10 (outputsDeclaration -> empty .)
    STRING          reduce using rule 10 (outputsDeclaration -> empty .)
    IMAGE           reduce using rule 10 (outputsDeclaration -> empty .)


state 30

    (9) inputsDeclaration -> INPUT f_saveType . pinList NEWLINE
    (14) pinList -> . C_INT COLON ID
    (15) pinList -> . C_INT COLON ID COMMA pinList

    C_INT           shift and go to state 49

    pinList                        shift and go to state 48

state 31

    (6) camDeclaration -> CAM WEBCAM COLON ID . NEWLINE

    NEWLINE         shift and go to state 50


state 32

    (7) camDeclaration -> CAM PICAM COLON ID . NEWLINE

    NEWLINE         shift and go to state 51


state 33

    (40) assign -> f_checkTab ID . f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign
    (45) f_checkID -> .

    EQUAL           reduce using rule 45 (f_checkID -> .)

    f_checkID                      shift and go to state 52

state 34

    (27) functions -> DEF . tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (28) functions -> DEF . tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (29) functions -> DEF . VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (30) functions -> DEF . VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (31) functions -> DEF . VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (32) functions -> DEF . VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (22) tipo -> . BOOL f_saveType
    (23) tipo -> . INT f_saveType
    (24) tipo -> . FLOAT f_saveType
    (25) tipo -> . STRING f_saveType
    (26) tipo -> . IMAGE f_saveType

    VOID            shift and go to state 53
    BOOL            shift and go to state 24
    INT             shift and go to state 23
    FLOAT           shift and go to state 21
    STRING          shift and go to state 26
    IMAGE           shift and go to state 25

    tipo                           shift and go to state 54

state 35

    (1) program -> programName hardware vars assign functions .

    $end            reduce using rule 1 (program -> programName hardware vars assign functions .)


state 36

    (33) functions -> empty .

    $end            reduce using rule 33 (functions -> empty .)


state 37

    (24) tipo -> FLOAT f_saveType .

    ID              reduce using rule 24 (tipo -> FLOAT f_saveType .)


state 38

    (16) vars -> f_checkTab tipo idList . NEWLINE f_resetTab moreVars

    NEWLINE         shift and go to state 55


state 39

    (20) idList -> ID .
    (21) idList -> ID . COMMA idList

    NEWLINE         reduce using rule 20 (idList -> ID .)
    COMMA           shift and go to state 56


state 40

    (23) tipo -> INT f_saveType .

    ID              reduce using rule 23 (tipo -> INT f_saveType .)


state 41

    (22) tipo -> BOOL f_saveType .

    ID              reduce using rule 22 (tipo -> BOOL f_saveType .)


state 42

    (26) tipo -> IMAGE f_saveType .

    ID              reduce using rule 26 (tipo -> IMAGE f_saveType .)


state 43

    (25) tipo -> STRING f_saveType .

    ID              reduce using rule 25 (tipo -> STRING f_saveType .)


state 44

    (4) hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .

    BOOL            reduce using rule 4 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    INT             reduce using rule 4 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    FLOAT           reduce using rule 4 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    STRING          reduce using rule 4 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    IMAGE           reduce using rule 4 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)


state 45

    (13) pwmDeclaration -> PWM . f_saveType pinList NEWLINE
    (19) f_saveType -> .

    C_INT           reduce using rule 19 (f_saveType -> .)

    f_saveType                     shift and go to state 57

state 46

    (12) pwmDeclaration -> empty .

    BOOL            reduce using rule 12 (pwmDeclaration -> empty .)
    INT             reduce using rule 12 (pwmDeclaration -> empty .)
    FLOAT           reduce using rule 12 (pwmDeclaration -> empty .)
    STRING          reduce using rule 12 (pwmDeclaration -> empty .)
    IMAGE           reduce using rule 12 (pwmDeclaration -> empty .)


state 47

    (11) outputsDeclaration -> OUTPUT f_saveType . pinList NEWLINE
    (14) pinList -> . C_INT COLON ID
    (15) pinList -> . C_INT COLON ID COMMA pinList

    C_INT           shift and go to state 49

    pinList                        shift and go to state 58

state 48

    (9) inputsDeclaration -> INPUT f_saveType pinList . NEWLINE

    NEWLINE         shift and go to state 59


state 49

    (14) pinList -> C_INT . COLON ID
    (15) pinList -> C_INT . COLON ID COMMA pinList

    COLON           shift and go to state 60


state 50

    (6) camDeclaration -> CAM WEBCAM COLON ID NEWLINE .

    INPUT           reduce using rule 6 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    OUTPUT          reduce using rule 6 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    PWM             reduce using rule 6 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    BOOL            reduce using rule 6 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    INT             reduce using rule 6 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    FLOAT           reduce using rule 6 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    STRING          reduce using rule 6 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    IMAGE           reduce using rule 6 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)


state 51

    (7) camDeclaration -> CAM PICAM COLON ID NEWLINE .

    INPUT           reduce using rule 7 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    OUTPUT          reduce using rule 7 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    PWM             reduce using rule 7 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    BOOL            reduce using rule 7 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    INT             reduce using rule 7 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    FLOAT           reduce using rule 7 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    STRING          reduce using rule 7 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    IMAGE           reduce using rule 7 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)


state 52

    (40) assign -> f_checkTab ID f_checkID . EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign

    EQUAL           shift and go to state 61


state 53

    (29) functions -> DEF VOID . f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (30) functions -> DEF VOID . f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (31) functions -> DEF VOID . f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (32) functions -> DEF VOID . f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (34) f_setVoid -> .

    ID              reduce using rule 34 (f_setVoid -> .)
    MAIN            reduce using rule 34 (f_setVoid -> .)

    f_setVoid                      shift and go to state 62

state 54

    (27) functions -> DEF tipo . ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (28) functions -> DEF tipo . ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    ID              shift and go to state 63


state 55

    (16) vars -> f_checkTab tipo idList NEWLINE . f_resetTab moreVars
    (54) f_resetTab -> .

    BOOL            reduce using rule 54 (f_resetTab -> .)
    INT             reduce using rule 54 (f_resetTab -> .)
    FLOAT           reduce using rule 54 (f_resetTab -> .)
    STRING          reduce using rule 54 (f_resetTab -> .)
    IMAGE           reduce using rule 54 (f_resetTab -> .)
    ID              reduce using rule 54 (f_resetTab -> .)
    TAB             reduce using rule 54 (f_resetTab -> .)
    DEF             reduce using rule 54 (f_resetTab -> .)
    $end            reduce using rule 54 (f_resetTab -> .)
    LOOP            reduce using rule 54 (f_resetTab -> .)
    ELSE            reduce using rule 54 (f_resetTab -> .)

    f_resetTab                     shift and go to state 64

state 56

    (21) idList -> ID COMMA . idList
    (20) idList -> . ID
    (21) idList -> . ID COMMA idList

    ID              shift and go to state 39

    idList                         shift and go to state 65

state 57

    (13) pwmDeclaration -> PWM f_saveType . pinList NEWLINE
    (14) pinList -> . C_INT COLON ID
    (15) pinList -> . C_INT COLON ID COMMA pinList

    C_INT           shift and go to state 49

    pinList                        shift and go to state 66

state 58

    (11) outputsDeclaration -> OUTPUT f_saveType pinList . NEWLINE

    NEWLINE         shift and go to state 67


state 59

    (9) inputsDeclaration -> INPUT f_saveType pinList NEWLINE .

    OUTPUT          reduce using rule 9 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    PWM             reduce using rule 9 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    BOOL            reduce using rule 9 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    INT             reduce using rule 9 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    FLOAT           reduce using rule 9 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    STRING          reduce using rule 9 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    IMAGE           reduce using rule 9 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)


state 60

    (14) pinList -> C_INT COLON . ID
    (15) pinList -> C_INT COLON . ID COMMA pinList

    ID              shift and go to state 68


state 61

    (40) assign -> f_checkTab ID f_checkID EQUAL . f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign
    (43) f_isAssign -> .

    LPAREN          reduce using rule 43 (f_isAssign -> .)
    ID              reduce using rule 43 (f_isAssign -> .)
    C_BOOL          reduce using rule 43 (f_isAssign -> .)
    C_INT           reduce using rule 43 (f_isAssign -> .)
    C_FLOAT         reduce using rule 43 (f_isAssign -> .)
    C_STRING        reduce using rule 43 (f_isAssign -> .)

    f_isAssign                     shift and go to state 69

state 62

    (29) functions -> DEF VOID f_setVoid . ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (30) functions -> DEF VOID f_setVoid . ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (31) functions -> DEF VOID f_setVoid . MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (32) functions -> DEF VOID f_setVoid . MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    ID              shift and go to state 71
    MAIN            shift and go to state 70


state 63

    (27) functions -> DEF tipo ID . f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (28) functions -> DEF tipo ID . f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (36) f_saveModule -> .

    LPAREN          reduce using rule 36 (f_saveModule -> .)

    f_saveModule                   shift and go to state 72

state 64

    (16) vars -> f_checkTab tipo idList NEWLINE f_resetTab . moreVars
    (17) moreVars -> . f_checkTab tipo idList NEWLINE f_resetTab moreVars
    (18) moreVars -> . empty
    (55) f_checkTab -> .
    (3) empty -> .

    BOOL            reduce using rule 55 (f_checkTab -> .)
    INT             reduce using rule 55 (f_checkTab -> .)
    FLOAT           reduce using rule 55 (f_checkTab -> .)
    STRING          reduce using rule 55 (f_checkTab -> .)
    IMAGE           reduce using rule 55 (f_checkTab -> .)
    ID              reduce using rule 3 (empty -> .)
    TAB             reduce using rule 3 (empty -> .)
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)
    LOOP            reduce using rule 3 (empty -> .)
    ELSE            reduce using rule 3 (empty -> .)

    f_checkTab                     shift and go to state 73
    moreVars                       shift and go to state 74
    empty                          shift and go to state 75

state 65

    (21) idList -> ID COMMA idList .

    NEWLINE         reduce using rule 21 (idList -> ID COMMA idList .)


state 66

    (13) pwmDeclaration -> PWM f_saveType pinList . NEWLINE

    NEWLINE         shift and go to state 76


state 67

    (11) outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .

    PWM             reduce using rule 11 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    BOOL            reduce using rule 11 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    INT             reduce using rule 11 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    FLOAT           reduce using rule 11 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    STRING          reduce using rule 11 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    IMAGE           reduce using rule 11 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)


state 68

    (14) pinList -> C_INT COLON ID .
    (15) pinList -> C_INT COLON ID . COMMA pinList

    NEWLINE         reduce using rule 14 (pinList -> C_INT COLON ID .)
    COMMA           shift and go to state 77


state 69

    (40) assign -> f_checkTab ID f_checkID EQUAL f_isAssign . expression NEWLINE f_resetTab f_generateEqual moreAssign
    (81) expression -> . exp
    (82) expression -> . exp compareToken exp f_popComparation
    (90) exp -> . term moreTerms
    (95) term -> . factor moreFactors
    (100) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (101) factor -> . cvar
    (102) factor -> . funct
    (106) cvar -> . ID f_isID
    (107) cvar -> . C_BOOL f_isConst
    (108) cvar -> . C_INT f_isConst
    (109) cvar -> . C_FLOAT f_isConst
    (110) cvar -> . C_STRING f_isConst
    (75) funct -> . ID f_checkProc LPAREN RPAREN
    (76) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 83
    ID              shift and go to state 85
    C_BOOL          shift and go to state 81
    C_INT           shift and go to state 84
    C_FLOAT         shift and go to state 79
    C_STRING        shift and go to state 86

    cvar                           shift and go to state 78
    funct                          shift and go to state 80
    factor                         shift and go to state 82
    term                           shift and go to state 87
    exp                            shift and go to state 88
    expression                     shift and go to state 89

state 70

    (31) functions -> DEF VOID f_setVoid MAIN . f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (32) functions -> DEF VOID f_setVoid MAIN . f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (36) f_saveModule -> .

    LPAREN          reduce using rule 36 (f_saveModule -> .)

    f_saveModule                   shift and go to state 90

state 71

    (29) functions -> DEF VOID f_setVoid ID . f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (30) functions -> DEF VOID f_setVoid ID . f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (36) f_saveModule -> .

    LPAREN          reduce using rule 36 (f_saveModule -> .)

    f_saveModule                   shift and go to state 91

state 72

    (27) functions -> DEF tipo ID f_saveModule . LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (28) functions -> DEF tipo ID f_saveModule . LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    LPAREN          shift and go to state 92


state 73

    (17) moreVars -> f_checkTab . tipo idList NEWLINE f_resetTab moreVars
    (22) tipo -> . BOOL f_saveType
    (23) tipo -> . INT f_saveType
    (24) tipo -> . FLOAT f_saveType
    (25) tipo -> . STRING f_saveType
    (26) tipo -> . IMAGE f_saveType

    BOOL            shift and go to state 24
    INT             shift and go to state 23
    FLOAT           shift and go to state 21
    STRING          shift and go to state 26
    IMAGE           shift and go to state 25

    tipo                           shift and go to state 93

state 74

    (16) vars -> f_checkTab tipo idList NEWLINE f_resetTab moreVars .

    TAB             reduce using rule 16 (vars -> f_checkTab tipo idList NEWLINE f_resetTab moreVars .)
    DEF             reduce using rule 16 (vars -> f_checkTab tipo idList NEWLINE f_resetTab moreVars .)
    $end            reduce using rule 16 (vars -> f_checkTab tipo idList NEWLINE f_resetTab moreVars .)
    LOOP            reduce using rule 16 (vars -> f_checkTab tipo idList NEWLINE f_resetTab moreVars .)
    ELSE            reduce using rule 16 (vars -> f_checkTab tipo idList NEWLINE f_resetTab moreVars .)
    ID              reduce using rule 16 (vars -> f_checkTab tipo idList NEWLINE f_resetTab moreVars .)


state 75

    (18) moreVars -> empty .

    ID              reduce using rule 18 (moreVars -> empty .)
    TAB             reduce using rule 18 (moreVars -> empty .)
    DEF             reduce using rule 18 (moreVars -> empty .)
    $end            reduce using rule 18 (moreVars -> empty .)
    LOOP            reduce using rule 18 (moreVars -> empty .)
    ELSE            reduce using rule 18 (moreVars -> empty .)


state 76

    (13) pwmDeclaration -> PWM f_saveType pinList NEWLINE .

    BOOL            reduce using rule 13 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)
    INT             reduce using rule 13 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)
    FLOAT           reduce using rule 13 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)
    STRING          reduce using rule 13 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)
    IMAGE           reduce using rule 13 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)


state 77

    (15) pinList -> C_INT COLON ID COMMA . pinList
    (14) pinList -> . C_INT COLON ID
    (15) pinList -> . C_INT COLON ID COMMA pinList

    C_INT           shift and go to state 49

    pinList                        shift and go to state 94

state 78

    (101) factor -> cvar .

    DIVIDE          reduce using rule 101 (factor -> cvar .)
    TIMES           reduce using rule 101 (factor -> cvar .)
    MOD             reduce using rule 101 (factor -> cvar .)
    PLUS            reduce using rule 101 (factor -> cvar .)
    MINUS           reduce using rule 101 (factor -> cvar .)
    GREATER_THAN    reduce using rule 101 (factor -> cvar .)
    LESS_THAN       reduce using rule 101 (factor -> cvar .)
    LESS_EQUAL_THAN reduce using rule 101 (factor -> cvar .)
    GREATER_EQUAL_THAN reduce using rule 101 (factor -> cvar .)
    NOT_EQUAL_THAN  reduce using rule 101 (factor -> cvar .)
    SAME_AS         reduce using rule 101 (factor -> cvar .)
    NEWLINE         reduce using rule 101 (factor -> cvar .)
    RPAREN          reduce using rule 101 (factor -> cvar .)
    COMMA           reduce using rule 101 (factor -> cvar .)
    COLON           reduce using rule 101 (factor -> cvar .)


state 79

    (109) cvar -> C_FLOAT . f_isConst
    (112) f_isConst -> .

    DIVIDE          reduce using rule 112 (f_isConst -> .)
    TIMES           reduce using rule 112 (f_isConst -> .)
    MOD             reduce using rule 112 (f_isConst -> .)
    PLUS            reduce using rule 112 (f_isConst -> .)
    MINUS           reduce using rule 112 (f_isConst -> .)
    GREATER_THAN    reduce using rule 112 (f_isConst -> .)
    LESS_THAN       reduce using rule 112 (f_isConst -> .)
    LESS_EQUAL_THAN reduce using rule 112 (f_isConst -> .)
    GREATER_EQUAL_THAN reduce using rule 112 (f_isConst -> .)
    NOT_EQUAL_THAN  reduce using rule 112 (f_isConst -> .)
    SAME_AS         reduce using rule 112 (f_isConst -> .)
    NEWLINE         reduce using rule 112 (f_isConst -> .)
    RPAREN          reduce using rule 112 (f_isConst -> .)
    COMMA           reduce using rule 112 (f_isConst -> .)
    COLON           reduce using rule 112 (f_isConst -> .)

    f_isConst                      shift and go to state 95

state 80

    (102) factor -> funct .

    DIVIDE          reduce using rule 102 (factor -> funct .)
    TIMES           reduce using rule 102 (factor -> funct .)
    MOD             reduce using rule 102 (factor -> funct .)
    PLUS            reduce using rule 102 (factor -> funct .)
    MINUS           reduce using rule 102 (factor -> funct .)
    GREATER_THAN    reduce using rule 102 (factor -> funct .)
    LESS_THAN       reduce using rule 102 (factor -> funct .)
    LESS_EQUAL_THAN reduce using rule 102 (factor -> funct .)
    GREATER_EQUAL_THAN reduce using rule 102 (factor -> funct .)
    NOT_EQUAL_THAN  reduce using rule 102 (factor -> funct .)
    SAME_AS         reduce using rule 102 (factor -> funct .)
    NEWLINE         reduce using rule 102 (factor -> funct .)
    RPAREN          reduce using rule 102 (factor -> funct .)
    COMMA           reduce using rule 102 (factor -> funct .)
    COLON           reduce using rule 102 (factor -> funct .)


state 81

    (107) cvar -> C_BOOL . f_isConst
    (112) f_isConst -> .

    DIVIDE          reduce using rule 112 (f_isConst -> .)
    TIMES           reduce using rule 112 (f_isConst -> .)
    MOD             reduce using rule 112 (f_isConst -> .)
    PLUS            reduce using rule 112 (f_isConst -> .)
    MINUS           reduce using rule 112 (f_isConst -> .)
    GREATER_THAN    reduce using rule 112 (f_isConst -> .)
    LESS_THAN       reduce using rule 112 (f_isConst -> .)
    LESS_EQUAL_THAN reduce using rule 112 (f_isConst -> .)
    GREATER_EQUAL_THAN reduce using rule 112 (f_isConst -> .)
    NOT_EQUAL_THAN  reduce using rule 112 (f_isConst -> .)
    SAME_AS         reduce using rule 112 (f_isConst -> .)
    NEWLINE         reduce using rule 112 (f_isConst -> .)
    RPAREN          reduce using rule 112 (f_isConst -> .)
    COMMA           reduce using rule 112 (f_isConst -> .)
    COLON           reduce using rule 112 (f_isConst -> .)

    f_isConst                      shift and go to state 96

state 82

    (95) term -> factor . moreFactors
    (96) moreFactors -> . empty
    (97) moreFactors -> . DIVIDE f_pushOperator factor f_popFactor moreFactors
    (98) moreFactors -> . TIMES f_pushOperator factor f_popFactor moreFactors
    (99) moreFactors -> . MOD f_pushOperator factor f_popFactor moreFactors
    (3) empty -> .

    DIVIDE          shift and go to state 98
    TIMES           shift and go to state 99
    MOD             shift and go to state 101
    PLUS            reduce using rule 3 (empty -> .)
    MINUS           reduce using rule 3 (empty -> .)
    GREATER_THAN    reduce using rule 3 (empty -> .)
    LESS_THAN       reduce using rule 3 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 3 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 3 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 3 (empty -> .)
    SAME_AS         reduce using rule 3 (empty -> .)
    NEWLINE         reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    COLON           reduce using rule 3 (empty -> .)

    moreFactors                    shift and go to state 97
    empty                          shift and go to state 100

state 83

    (100) factor -> LPAREN . f_pushOperator expression RPAREN f_popOperator
    (103) f_pushOperator -> .

    LPAREN          reduce using rule 103 (f_pushOperator -> .)
    ID              reduce using rule 103 (f_pushOperator -> .)
    C_BOOL          reduce using rule 103 (f_pushOperator -> .)
    C_INT           reduce using rule 103 (f_pushOperator -> .)
    C_FLOAT         reduce using rule 103 (f_pushOperator -> .)
    C_STRING        reduce using rule 103 (f_pushOperator -> .)

    f_pushOperator                 shift and go to state 102

state 84

    (108) cvar -> C_INT . f_isConst
    (112) f_isConst -> .

    DIVIDE          reduce using rule 112 (f_isConst -> .)
    TIMES           reduce using rule 112 (f_isConst -> .)
    MOD             reduce using rule 112 (f_isConst -> .)
    PLUS            reduce using rule 112 (f_isConst -> .)
    MINUS           reduce using rule 112 (f_isConst -> .)
    GREATER_THAN    reduce using rule 112 (f_isConst -> .)
    LESS_THAN       reduce using rule 112 (f_isConst -> .)
    LESS_EQUAL_THAN reduce using rule 112 (f_isConst -> .)
    GREATER_EQUAL_THAN reduce using rule 112 (f_isConst -> .)
    NOT_EQUAL_THAN  reduce using rule 112 (f_isConst -> .)
    SAME_AS         reduce using rule 112 (f_isConst -> .)
    NEWLINE         reduce using rule 112 (f_isConst -> .)
    RPAREN          reduce using rule 112 (f_isConst -> .)
    COMMA           reduce using rule 112 (f_isConst -> .)
    COLON           reduce using rule 112 (f_isConst -> .)

    f_isConst                      shift and go to state 103

state 85

    (106) cvar -> ID . f_isID
    (75) funct -> ID . f_checkProc LPAREN RPAREN
    (76) funct -> ID . f_checkProc LPAREN expression f_genParam expressionList RPAREN
    (111) f_isID -> .
    (77) f_checkProc -> .

    DIVIDE          reduce using rule 111 (f_isID -> .)
    TIMES           reduce using rule 111 (f_isID -> .)
    MOD             reduce using rule 111 (f_isID -> .)
    PLUS            reduce using rule 111 (f_isID -> .)
    MINUS           reduce using rule 111 (f_isID -> .)
    GREATER_THAN    reduce using rule 111 (f_isID -> .)
    LESS_THAN       reduce using rule 111 (f_isID -> .)
    LESS_EQUAL_THAN reduce using rule 111 (f_isID -> .)
    GREATER_EQUAL_THAN reduce using rule 111 (f_isID -> .)
    NOT_EQUAL_THAN  reduce using rule 111 (f_isID -> .)
    SAME_AS         reduce using rule 111 (f_isID -> .)
    NEWLINE         reduce using rule 111 (f_isID -> .)
    RPAREN          reduce using rule 111 (f_isID -> .)
    COMMA           reduce using rule 111 (f_isID -> .)
    COLON           reduce using rule 111 (f_isID -> .)
    LPAREN          reduce using rule 77 (f_checkProc -> .)

    f_checkProc                    shift and go to state 104
    f_isID                         shift and go to state 105

state 86

    (110) cvar -> C_STRING . f_isConst
    (112) f_isConst -> .

    DIVIDE          reduce using rule 112 (f_isConst -> .)
    TIMES           reduce using rule 112 (f_isConst -> .)
    MOD             reduce using rule 112 (f_isConst -> .)
    PLUS            reduce using rule 112 (f_isConst -> .)
    MINUS           reduce using rule 112 (f_isConst -> .)
    GREATER_THAN    reduce using rule 112 (f_isConst -> .)
    LESS_THAN       reduce using rule 112 (f_isConst -> .)
    LESS_EQUAL_THAN reduce using rule 112 (f_isConst -> .)
    GREATER_EQUAL_THAN reduce using rule 112 (f_isConst -> .)
    NOT_EQUAL_THAN  reduce using rule 112 (f_isConst -> .)
    SAME_AS         reduce using rule 112 (f_isConst -> .)
    NEWLINE         reduce using rule 112 (f_isConst -> .)
    RPAREN          reduce using rule 112 (f_isConst -> .)
    COMMA           reduce using rule 112 (f_isConst -> .)
    COLON           reduce using rule 112 (f_isConst -> .)

    f_isConst                      shift and go to state 106

state 87

    (90) exp -> term . moreTerms
    (91) moreTerms -> . empty
    (92) moreTerms -> . PLUS f_pushOperator term f_popTerm moreTerms
    (93) moreTerms -> . MINUS f_pushOperator term f_popTerm moreTerms
    (3) empty -> .

    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    GREATER_THAN    reduce using rule 3 (empty -> .)
    LESS_THAN       reduce using rule 3 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 3 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 3 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 3 (empty -> .)
    SAME_AS         reduce using rule 3 (empty -> .)
    NEWLINE         reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    COLON           reduce using rule 3 (empty -> .)

    moreTerms                      shift and go to state 107
    empty                          shift and go to state 110

state 88

    (81) expression -> exp .
    (82) expression -> exp . compareToken exp f_popComparation
    (84) compareToken -> . GREATER_THAN
    (85) compareToken -> . LESS_THAN
    (86) compareToken -> . LESS_EQUAL_THAN
    (87) compareToken -> . GREATER_EQUAL_THAN
    (88) compareToken -> . NOT_EQUAL_THAN
    (89) compareToken -> . SAME_AS

    NEWLINE         reduce using rule 81 (expression -> exp .)
    COMMA           reduce using rule 81 (expression -> exp .)
    RPAREN          reduce using rule 81 (expression -> exp .)
    COLON           reduce using rule 81 (expression -> exp .)
    GREATER_THAN    shift and go to state 116
    LESS_THAN       shift and go to state 117
    LESS_EQUAL_THAN shift and go to state 113
    GREATER_EQUAL_THAN shift and go to state 112
    NOT_EQUAL_THAN  shift and go to state 115
    SAME_AS         shift and go to state 114

    compareToken                   shift and go to state 111

state 89

    (40) assign -> f_checkTab ID f_checkID EQUAL f_isAssign expression . NEWLINE f_resetTab f_generateEqual moreAssign

    NEWLINE         shift and go to state 118


state 90

    (31) functions -> DEF VOID f_setVoid MAIN f_saveModule . LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (32) functions -> DEF VOID f_setVoid MAIN f_saveModule . LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    LPAREN          shift and go to state 119


state 91

    (29) functions -> DEF VOID f_setVoid ID f_saveModule . LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (30) functions -> DEF VOID f_setVoid ID f_saveModule . LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    LPAREN          shift and go to state 120


state 92

    (27) functions -> DEF tipo ID f_saveModule LPAREN . RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (28) functions -> DEF tipo ID f_saveModule LPAREN . tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (22) tipo -> . BOOL f_saveType
    (23) tipo -> . INT f_saveType
    (24) tipo -> . FLOAT f_saveType
    (25) tipo -> . STRING f_saveType
    (26) tipo -> . IMAGE f_saveType

    RPAREN          shift and go to state 121
    BOOL            shift and go to state 24
    INT             shift and go to state 23
    FLOAT           shift and go to state 21
    STRING          shift and go to state 26
    IMAGE           shift and go to state 25

    tipo                           shift and go to state 122

state 93

    (17) moreVars -> f_checkTab tipo . idList NEWLINE f_resetTab moreVars
    (20) idList -> . ID
    (21) idList -> . ID COMMA idList

    ID              shift and go to state 39

    idList                         shift and go to state 123

state 94

    (15) pinList -> C_INT COLON ID COMMA pinList .

    NEWLINE         reduce using rule 15 (pinList -> C_INT COLON ID COMMA pinList .)


state 95

    (109) cvar -> C_FLOAT f_isConst .

    DIVIDE          reduce using rule 109 (cvar -> C_FLOAT f_isConst .)
    TIMES           reduce using rule 109 (cvar -> C_FLOAT f_isConst .)
    MOD             reduce using rule 109 (cvar -> C_FLOAT f_isConst .)
    PLUS            reduce using rule 109 (cvar -> C_FLOAT f_isConst .)
    MINUS           reduce using rule 109 (cvar -> C_FLOAT f_isConst .)
    GREATER_THAN    reduce using rule 109 (cvar -> C_FLOAT f_isConst .)
    LESS_THAN       reduce using rule 109 (cvar -> C_FLOAT f_isConst .)
    LESS_EQUAL_THAN reduce using rule 109 (cvar -> C_FLOAT f_isConst .)
    GREATER_EQUAL_THAN reduce using rule 109 (cvar -> C_FLOAT f_isConst .)
    NOT_EQUAL_THAN  reduce using rule 109 (cvar -> C_FLOAT f_isConst .)
    SAME_AS         reduce using rule 109 (cvar -> C_FLOAT f_isConst .)
    NEWLINE         reduce using rule 109 (cvar -> C_FLOAT f_isConst .)
    RPAREN          reduce using rule 109 (cvar -> C_FLOAT f_isConst .)
    COMMA           reduce using rule 109 (cvar -> C_FLOAT f_isConst .)
    COLON           reduce using rule 109 (cvar -> C_FLOAT f_isConst .)


state 96

    (107) cvar -> C_BOOL f_isConst .

    DIVIDE          reduce using rule 107 (cvar -> C_BOOL f_isConst .)
    TIMES           reduce using rule 107 (cvar -> C_BOOL f_isConst .)
    MOD             reduce using rule 107 (cvar -> C_BOOL f_isConst .)
    PLUS            reduce using rule 107 (cvar -> C_BOOL f_isConst .)
    MINUS           reduce using rule 107 (cvar -> C_BOOL f_isConst .)
    GREATER_THAN    reduce using rule 107 (cvar -> C_BOOL f_isConst .)
    LESS_THAN       reduce using rule 107 (cvar -> C_BOOL f_isConst .)
    LESS_EQUAL_THAN reduce using rule 107 (cvar -> C_BOOL f_isConst .)
    GREATER_EQUAL_THAN reduce using rule 107 (cvar -> C_BOOL f_isConst .)
    NOT_EQUAL_THAN  reduce using rule 107 (cvar -> C_BOOL f_isConst .)
    SAME_AS         reduce using rule 107 (cvar -> C_BOOL f_isConst .)
    NEWLINE         reduce using rule 107 (cvar -> C_BOOL f_isConst .)
    RPAREN          reduce using rule 107 (cvar -> C_BOOL f_isConst .)
    COMMA           reduce using rule 107 (cvar -> C_BOOL f_isConst .)
    COLON           reduce using rule 107 (cvar -> C_BOOL f_isConst .)


state 97

    (95) term -> factor moreFactors .

    PLUS            reduce using rule 95 (term -> factor moreFactors .)
    MINUS           reduce using rule 95 (term -> factor moreFactors .)
    GREATER_THAN    reduce using rule 95 (term -> factor moreFactors .)
    LESS_THAN       reduce using rule 95 (term -> factor moreFactors .)
    LESS_EQUAL_THAN reduce using rule 95 (term -> factor moreFactors .)
    GREATER_EQUAL_THAN reduce using rule 95 (term -> factor moreFactors .)
    NOT_EQUAL_THAN  reduce using rule 95 (term -> factor moreFactors .)
    SAME_AS         reduce using rule 95 (term -> factor moreFactors .)
    COMMA           reduce using rule 95 (term -> factor moreFactors .)
    RPAREN          reduce using rule 95 (term -> factor moreFactors .)
    NEWLINE         reduce using rule 95 (term -> factor moreFactors .)
    COLON           reduce using rule 95 (term -> factor moreFactors .)


state 98

    (97) moreFactors -> DIVIDE . f_pushOperator factor f_popFactor moreFactors
    (103) f_pushOperator -> .

    LPAREN          reduce using rule 103 (f_pushOperator -> .)
    ID              reduce using rule 103 (f_pushOperator -> .)
    C_BOOL          reduce using rule 103 (f_pushOperator -> .)
    C_INT           reduce using rule 103 (f_pushOperator -> .)
    C_FLOAT         reduce using rule 103 (f_pushOperator -> .)
    C_STRING        reduce using rule 103 (f_pushOperator -> .)

    f_pushOperator                 shift and go to state 124

state 99

    (98) moreFactors -> TIMES . f_pushOperator factor f_popFactor moreFactors
    (103) f_pushOperator -> .

    LPAREN          reduce using rule 103 (f_pushOperator -> .)
    ID              reduce using rule 103 (f_pushOperator -> .)
    C_BOOL          reduce using rule 103 (f_pushOperator -> .)
    C_INT           reduce using rule 103 (f_pushOperator -> .)
    C_FLOAT         reduce using rule 103 (f_pushOperator -> .)
    C_STRING        reduce using rule 103 (f_pushOperator -> .)

    f_pushOperator                 shift and go to state 125

state 100

    (96) moreFactors -> empty .

    PLUS            reduce using rule 96 (moreFactors -> empty .)
    MINUS           reduce using rule 96 (moreFactors -> empty .)
    GREATER_THAN    reduce using rule 96 (moreFactors -> empty .)
    LESS_THAN       reduce using rule 96 (moreFactors -> empty .)
    LESS_EQUAL_THAN reduce using rule 96 (moreFactors -> empty .)
    GREATER_EQUAL_THAN reduce using rule 96 (moreFactors -> empty .)
    NOT_EQUAL_THAN  reduce using rule 96 (moreFactors -> empty .)
    SAME_AS         reduce using rule 96 (moreFactors -> empty .)
    NEWLINE         reduce using rule 96 (moreFactors -> empty .)
    RPAREN          reduce using rule 96 (moreFactors -> empty .)
    COMMA           reduce using rule 96 (moreFactors -> empty .)
    COLON           reduce using rule 96 (moreFactors -> empty .)


state 101

    (99) moreFactors -> MOD . f_pushOperator factor f_popFactor moreFactors
    (103) f_pushOperator -> .

    LPAREN          reduce using rule 103 (f_pushOperator -> .)
    ID              reduce using rule 103 (f_pushOperator -> .)
    C_BOOL          reduce using rule 103 (f_pushOperator -> .)
    C_INT           reduce using rule 103 (f_pushOperator -> .)
    C_FLOAT         reduce using rule 103 (f_pushOperator -> .)
    C_STRING        reduce using rule 103 (f_pushOperator -> .)

    f_pushOperator                 shift and go to state 126

state 102

    (100) factor -> LPAREN f_pushOperator . expression RPAREN f_popOperator
    (81) expression -> . exp
    (82) expression -> . exp compareToken exp f_popComparation
    (90) exp -> . term moreTerms
    (95) term -> . factor moreFactors
    (100) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (101) factor -> . cvar
    (102) factor -> . funct
    (106) cvar -> . ID f_isID
    (107) cvar -> . C_BOOL f_isConst
    (108) cvar -> . C_INT f_isConst
    (109) cvar -> . C_FLOAT f_isConst
    (110) cvar -> . C_STRING f_isConst
    (75) funct -> . ID f_checkProc LPAREN RPAREN
    (76) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 83
    ID              shift and go to state 85
    C_BOOL          shift and go to state 81
    C_INT           shift and go to state 84
    C_FLOAT         shift and go to state 79
    C_STRING        shift and go to state 86

    term                           shift and go to state 87
    funct                          shift and go to state 80
    exp                            shift and go to state 88
    factor                         shift and go to state 82
    cvar                           shift and go to state 78
    expression                     shift and go to state 127

state 103

    (108) cvar -> C_INT f_isConst .

    DIVIDE          reduce using rule 108 (cvar -> C_INT f_isConst .)
    TIMES           reduce using rule 108 (cvar -> C_INT f_isConst .)
    MOD             reduce using rule 108 (cvar -> C_INT f_isConst .)
    PLUS            reduce using rule 108 (cvar -> C_INT f_isConst .)
    MINUS           reduce using rule 108 (cvar -> C_INT f_isConst .)
    GREATER_THAN    reduce using rule 108 (cvar -> C_INT f_isConst .)
    LESS_THAN       reduce using rule 108 (cvar -> C_INT f_isConst .)
    LESS_EQUAL_THAN reduce using rule 108 (cvar -> C_INT f_isConst .)
    GREATER_EQUAL_THAN reduce using rule 108 (cvar -> C_INT f_isConst .)
    NOT_EQUAL_THAN  reduce using rule 108 (cvar -> C_INT f_isConst .)
    SAME_AS         reduce using rule 108 (cvar -> C_INT f_isConst .)
    NEWLINE         reduce using rule 108 (cvar -> C_INT f_isConst .)
    RPAREN          reduce using rule 108 (cvar -> C_INT f_isConst .)
    COMMA           reduce using rule 108 (cvar -> C_INT f_isConst .)
    COLON           reduce using rule 108 (cvar -> C_INT f_isConst .)


state 104

    (75) funct -> ID f_checkProc . LPAREN RPAREN
    (76) funct -> ID f_checkProc . LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 128


state 105

    (106) cvar -> ID f_isID .

    DIVIDE          reduce using rule 106 (cvar -> ID f_isID .)
    TIMES           reduce using rule 106 (cvar -> ID f_isID .)
    MOD             reduce using rule 106 (cvar -> ID f_isID .)
    PLUS            reduce using rule 106 (cvar -> ID f_isID .)
    MINUS           reduce using rule 106 (cvar -> ID f_isID .)
    GREATER_THAN    reduce using rule 106 (cvar -> ID f_isID .)
    LESS_THAN       reduce using rule 106 (cvar -> ID f_isID .)
    LESS_EQUAL_THAN reduce using rule 106 (cvar -> ID f_isID .)
    GREATER_EQUAL_THAN reduce using rule 106 (cvar -> ID f_isID .)
    NOT_EQUAL_THAN  reduce using rule 106 (cvar -> ID f_isID .)
    SAME_AS         reduce using rule 106 (cvar -> ID f_isID .)
    NEWLINE         reduce using rule 106 (cvar -> ID f_isID .)
    RPAREN          reduce using rule 106 (cvar -> ID f_isID .)
    COMMA           reduce using rule 106 (cvar -> ID f_isID .)
    COLON           reduce using rule 106 (cvar -> ID f_isID .)


state 106

    (110) cvar -> C_STRING f_isConst .

    DIVIDE          reduce using rule 110 (cvar -> C_STRING f_isConst .)
    TIMES           reduce using rule 110 (cvar -> C_STRING f_isConst .)
    MOD             reduce using rule 110 (cvar -> C_STRING f_isConst .)
    PLUS            reduce using rule 110 (cvar -> C_STRING f_isConst .)
    MINUS           reduce using rule 110 (cvar -> C_STRING f_isConst .)
    GREATER_THAN    reduce using rule 110 (cvar -> C_STRING f_isConst .)
    LESS_THAN       reduce using rule 110 (cvar -> C_STRING f_isConst .)
    LESS_EQUAL_THAN reduce using rule 110 (cvar -> C_STRING f_isConst .)
    GREATER_EQUAL_THAN reduce using rule 110 (cvar -> C_STRING f_isConst .)
    NOT_EQUAL_THAN  reduce using rule 110 (cvar -> C_STRING f_isConst .)
    SAME_AS         reduce using rule 110 (cvar -> C_STRING f_isConst .)
    NEWLINE         reduce using rule 110 (cvar -> C_STRING f_isConst .)
    RPAREN          reduce using rule 110 (cvar -> C_STRING f_isConst .)
    COMMA           reduce using rule 110 (cvar -> C_STRING f_isConst .)
    COLON           reduce using rule 110 (cvar -> C_STRING f_isConst .)


state 107

    (90) exp -> term moreTerms .

    NEWLINE         reduce using rule 90 (exp -> term moreTerms .)
    RPAREN          reduce using rule 90 (exp -> term moreTerms .)
    COMMA           reduce using rule 90 (exp -> term moreTerms .)
    COLON           reduce using rule 90 (exp -> term moreTerms .)
    GREATER_THAN    reduce using rule 90 (exp -> term moreTerms .)
    LESS_THAN       reduce using rule 90 (exp -> term moreTerms .)
    LESS_EQUAL_THAN reduce using rule 90 (exp -> term moreTerms .)
    GREATER_EQUAL_THAN reduce using rule 90 (exp -> term moreTerms .)
    NOT_EQUAL_THAN  reduce using rule 90 (exp -> term moreTerms .)
    SAME_AS         reduce using rule 90 (exp -> term moreTerms .)


state 108

    (92) moreTerms -> PLUS . f_pushOperator term f_popTerm moreTerms
    (103) f_pushOperator -> .

    LPAREN          reduce using rule 103 (f_pushOperator -> .)
    ID              reduce using rule 103 (f_pushOperator -> .)
    C_BOOL          reduce using rule 103 (f_pushOperator -> .)
    C_INT           reduce using rule 103 (f_pushOperator -> .)
    C_FLOAT         reduce using rule 103 (f_pushOperator -> .)
    C_STRING        reduce using rule 103 (f_pushOperator -> .)

    f_pushOperator                 shift and go to state 129

state 109

    (93) moreTerms -> MINUS . f_pushOperator term f_popTerm moreTerms
    (103) f_pushOperator -> .

    LPAREN          reduce using rule 103 (f_pushOperator -> .)
    ID              reduce using rule 103 (f_pushOperator -> .)
    C_BOOL          reduce using rule 103 (f_pushOperator -> .)
    C_INT           reduce using rule 103 (f_pushOperator -> .)
    C_FLOAT         reduce using rule 103 (f_pushOperator -> .)
    C_STRING        reduce using rule 103 (f_pushOperator -> .)

    f_pushOperator                 shift and go to state 130

state 110

    (91) moreTerms -> empty .

    GREATER_THAN    reduce using rule 91 (moreTerms -> empty .)
    LESS_THAN       reduce using rule 91 (moreTerms -> empty .)
    LESS_EQUAL_THAN reduce using rule 91 (moreTerms -> empty .)
    GREATER_EQUAL_THAN reduce using rule 91 (moreTerms -> empty .)
    NOT_EQUAL_THAN  reduce using rule 91 (moreTerms -> empty .)
    SAME_AS         reduce using rule 91 (moreTerms -> empty .)
    NEWLINE         reduce using rule 91 (moreTerms -> empty .)
    RPAREN          reduce using rule 91 (moreTerms -> empty .)
    COMMA           reduce using rule 91 (moreTerms -> empty .)
    COLON           reduce using rule 91 (moreTerms -> empty .)


state 111

    (82) expression -> exp compareToken . exp f_popComparation
    (90) exp -> . term moreTerms
    (95) term -> . factor moreFactors
    (100) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (101) factor -> . cvar
    (102) factor -> . funct
    (106) cvar -> . ID f_isID
    (107) cvar -> . C_BOOL f_isConst
    (108) cvar -> . C_INT f_isConst
    (109) cvar -> . C_FLOAT f_isConst
    (110) cvar -> . C_STRING f_isConst
    (75) funct -> . ID f_checkProc LPAREN RPAREN
    (76) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 83
    ID              shift and go to state 85
    C_BOOL          shift and go to state 81
    C_INT           shift and go to state 84
    C_FLOAT         shift and go to state 79
    C_STRING        shift and go to state 86

    term                           shift and go to state 87
    funct                          shift and go to state 80
    exp                            shift and go to state 131
    factor                         shift and go to state 82
    cvar                           shift and go to state 78

state 112

    (87) compareToken -> GREATER_EQUAL_THAN .

    LPAREN          reduce using rule 87 (compareToken -> GREATER_EQUAL_THAN .)
    ID              reduce using rule 87 (compareToken -> GREATER_EQUAL_THAN .)
    C_BOOL          reduce using rule 87 (compareToken -> GREATER_EQUAL_THAN .)
    C_INT           reduce using rule 87 (compareToken -> GREATER_EQUAL_THAN .)
    C_FLOAT         reduce using rule 87 (compareToken -> GREATER_EQUAL_THAN .)
    C_STRING        reduce using rule 87 (compareToken -> GREATER_EQUAL_THAN .)


state 113

    (86) compareToken -> LESS_EQUAL_THAN .

    LPAREN          reduce using rule 86 (compareToken -> LESS_EQUAL_THAN .)
    ID              reduce using rule 86 (compareToken -> LESS_EQUAL_THAN .)
    C_BOOL          reduce using rule 86 (compareToken -> LESS_EQUAL_THAN .)
    C_INT           reduce using rule 86 (compareToken -> LESS_EQUAL_THAN .)
    C_FLOAT         reduce using rule 86 (compareToken -> LESS_EQUAL_THAN .)
    C_STRING        reduce using rule 86 (compareToken -> LESS_EQUAL_THAN .)


state 114

    (89) compareToken -> SAME_AS .

    LPAREN          reduce using rule 89 (compareToken -> SAME_AS .)
    ID              reduce using rule 89 (compareToken -> SAME_AS .)
    C_BOOL          reduce using rule 89 (compareToken -> SAME_AS .)
    C_INT           reduce using rule 89 (compareToken -> SAME_AS .)
    C_FLOAT         reduce using rule 89 (compareToken -> SAME_AS .)
    C_STRING        reduce using rule 89 (compareToken -> SAME_AS .)


state 115

    (88) compareToken -> NOT_EQUAL_THAN .

    LPAREN          reduce using rule 88 (compareToken -> NOT_EQUAL_THAN .)
    ID              reduce using rule 88 (compareToken -> NOT_EQUAL_THAN .)
    C_BOOL          reduce using rule 88 (compareToken -> NOT_EQUAL_THAN .)
    C_INT           reduce using rule 88 (compareToken -> NOT_EQUAL_THAN .)
    C_FLOAT         reduce using rule 88 (compareToken -> NOT_EQUAL_THAN .)
    C_STRING        reduce using rule 88 (compareToken -> NOT_EQUAL_THAN .)


state 116

    (84) compareToken -> GREATER_THAN .

    LPAREN          reduce using rule 84 (compareToken -> GREATER_THAN .)
    ID              reduce using rule 84 (compareToken -> GREATER_THAN .)
    C_BOOL          reduce using rule 84 (compareToken -> GREATER_THAN .)
    C_INT           reduce using rule 84 (compareToken -> GREATER_THAN .)
    C_FLOAT         reduce using rule 84 (compareToken -> GREATER_THAN .)
    C_STRING        reduce using rule 84 (compareToken -> GREATER_THAN .)


state 117

    (85) compareToken -> LESS_THAN .

    LPAREN          reduce using rule 85 (compareToken -> LESS_THAN .)
    ID              reduce using rule 85 (compareToken -> LESS_THAN .)
    C_BOOL          reduce using rule 85 (compareToken -> LESS_THAN .)
    C_INT           reduce using rule 85 (compareToken -> LESS_THAN .)
    C_FLOAT         reduce using rule 85 (compareToken -> LESS_THAN .)
    C_STRING        reduce using rule 85 (compareToken -> LESS_THAN .)


state 118

    (40) assign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE . f_resetTab f_generateEqual moreAssign
    (54) f_resetTab -> .

    ID              reduce using rule 54 (f_resetTab -> .)
    DEF             reduce using rule 54 (f_resetTab -> .)
    $end            reduce using rule 54 (f_resetTab -> .)
    TAB             reduce using rule 54 (f_resetTab -> .)
    LOOP            reduce using rule 54 (f_resetTab -> .)
    ELSE            reduce using rule 54 (f_resetTab -> .)

    f_resetTab                     shift and go to state 132

state 119

    (31) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN . RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (32) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN . tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (22) tipo -> . BOOL f_saveType
    (23) tipo -> . INT f_saveType
    (24) tipo -> . FLOAT f_saveType
    (25) tipo -> . STRING f_saveType
    (26) tipo -> . IMAGE f_saveType

    RPAREN          shift and go to state 134
    BOOL            shift and go to state 24
    INT             shift and go to state 23
    FLOAT           shift and go to state 21
    STRING          shift and go to state 26
    IMAGE           shift and go to state 25

    tipo                           shift and go to state 133

state 120

    (29) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN . RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (30) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN . tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (22) tipo -> . BOOL f_saveType
    (23) tipo -> . INT f_saveType
    (24) tipo -> . FLOAT f_saveType
    (25) tipo -> . STRING f_saveType
    (26) tipo -> . IMAGE f_saveType

    RPAREN          shift and go to state 136
    BOOL            shift and go to state 24
    INT             shift and go to state 23
    FLOAT           shift and go to state 21
    STRING          shift and go to state 26
    IMAGE           shift and go to state 25

    tipo                           shift and go to state 135

state 121

    (27) functions -> DEF tipo ID f_saveModule LPAREN RPAREN . COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    COLON           shift and go to state 137


state 122

    (28) functions -> DEF tipo ID f_saveModule LPAREN tipo . ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    ID              shift and go to state 138


state 123

    (17) moreVars -> f_checkTab tipo idList . NEWLINE f_resetTab moreVars

    NEWLINE         shift and go to state 139


state 124

    (97) moreFactors -> DIVIDE f_pushOperator . factor f_popFactor moreFactors
    (100) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (101) factor -> . cvar
    (102) factor -> . funct
    (106) cvar -> . ID f_isID
    (107) cvar -> . C_BOOL f_isConst
    (108) cvar -> . C_INT f_isConst
    (109) cvar -> . C_FLOAT f_isConst
    (110) cvar -> . C_STRING f_isConst
    (75) funct -> . ID f_checkProc LPAREN RPAREN
    (76) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 83
    ID              shift and go to state 85
    C_BOOL          shift and go to state 81
    C_INT           shift and go to state 84
    C_FLOAT         shift and go to state 79
    C_STRING        shift and go to state 86

    funct                          shift and go to state 80
    cvar                           shift and go to state 78
    factor                         shift and go to state 140

state 125

    (98) moreFactors -> TIMES f_pushOperator . factor f_popFactor moreFactors
    (100) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (101) factor -> . cvar
    (102) factor -> . funct
    (106) cvar -> . ID f_isID
    (107) cvar -> . C_BOOL f_isConst
    (108) cvar -> . C_INT f_isConst
    (109) cvar -> . C_FLOAT f_isConst
    (110) cvar -> . C_STRING f_isConst
    (75) funct -> . ID f_checkProc LPAREN RPAREN
    (76) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 83
    ID              shift and go to state 85
    C_BOOL          shift and go to state 81
    C_INT           shift and go to state 84
    C_FLOAT         shift and go to state 79
    C_STRING        shift and go to state 86

    funct                          shift and go to state 80
    cvar                           shift and go to state 78
    factor                         shift and go to state 141

state 126

    (99) moreFactors -> MOD f_pushOperator . factor f_popFactor moreFactors
    (100) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (101) factor -> . cvar
    (102) factor -> . funct
    (106) cvar -> . ID f_isID
    (107) cvar -> . C_BOOL f_isConst
    (108) cvar -> . C_INT f_isConst
    (109) cvar -> . C_FLOAT f_isConst
    (110) cvar -> . C_STRING f_isConst
    (75) funct -> . ID f_checkProc LPAREN RPAREN
    (76) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 83
    ID              shift and go to state 85
    C_BOOL          shift and go to state 81
    C_INT           shift and go to state 84
    C_FLOAT         shift and go to state 79
    C_STRING        shift and go to state 86

    funct                          shift and go to state 80
    cvar                           shift and go to state 78
    factor                         shift and go to state 142

state 127

    (100) factor -> LPAREN f_pushOperator expression . RPAREN f_popOperator

    RPAREN          shift and go to state 143


state 128

    (75) funct -> ID f_checkProc LPAREN . RPAREN
    (76) funct -> ID f_checkProc LPAREN . expression f_genParam expressionList RPAREN
    (81) expression -> . exp
    (82) expression -> . exp compareToken exp f_popComparation
    (90) exp -> . term moreTerms
    (95) term -> . factor moreFactors
    (100) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (101) factor -> . cvar
    (102) factor -> . funct
    (106) cvar -> . ID f_isID
    (107) cvar -> . C_BOOL f_isConst
    (108) cvar -> . C_INT f_isConst
    (109) cvar -> . C_FLOAT f_isConst
    (110) cvar -> . C_STRING f_isConst
    (75) funct -> . ID f_checkProc LPAREN RPAREN
    (76) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    RPAREN          shift and go to state 144
    LPAREN          shift and go to state 83
    ID              shift and go to state 85
    C_BOOL          shift and go to state 81
    C_INT           shift and go to state 84
    C_FLOAT         shift and go to state 79
    C_STRING        shift and go to state 86

    term                           shift and go to state 87
    funct                          shift and go to state 80
    exp                            shift and go to state 88
    factor                         shift and go to state 82
    cvar                           shift and go to state 78
    expression                     shift and go to state 145

state 129

    (92) moreTerms -> PLUS f_pushOperator . term f_popTerm moreTerms
    (95) term -> . factor moreFactors
    (100) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (101) factor -> . cvar
    (102) factor -> . funct
    (106) cvar -> . ID f_isID
    (107) cvar -> . C_BOOL f_isConst
    (108) cvar -> . C_INT f_isConst
    (109) cvar -> . C_FLOAT f_isConst
    (110) cvar -> . C_STRING f_isConst
    (75) funct -> . ID f_checkProc LPAREN RPAREN
    (76) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 83
    ID              shift and go to state 85
    C_BOOL          shift and go to state 81
    C_INT           shift and go to state 84
    C_FLOAT         shift and go to state 79
    C_STRING        shift and go to state 86

    term                           shift and go to state 146
    funct                          shift and go to state 80
    factor                         shift and go to state 82
    cvar                           shift and go to state 78

state 130

    (93) moreTerms -> MINUS f_pushOperator . term f_popTerm moreTerms
    (95) term -> . factor moreFactors
    (100) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (101) factor -> . cvar
    (102) factor -> . funct
    (106) cvar -> . ID f_isID
    (107) cvar -> . C_BOOL f_isConst
    (108) cvar -> . C_INT f_isConst
    (109) cvar -> . C_FLOAT f_isConst
    (110) cvar -> . C_STRING f_isConst
    (75) funct -> . ID f_checkProc LPAREN RPAREN
    (76) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 83
    ID              shift and go to state 85
    C_BOOL          shift and go to state 81
    C_INT           shift and go to state 84
    C_FLOAT         shift and go to state 79
    C_STRING        shift and go to state 86

    term                           shift and go to state 147
    funct                          shift and go to state 80
    factor                         shift and go to state 82
    cvar                           shift and go to state 78

state 131

    (82) expression -> exp compareToken exp . f_popComparation
    (83) f_popComparation -> .

    NEWLINE         reduce using rule 83 (f_popComparation -> .)
    RPAREN          reduce using rule 83 (f_popComparation -> .)
    COMMA           reduce using rule 83 (f_popComparation -> .)
    COLON           reduce using rule 83 (f_popComparation -> .)

    f_popComparation               shift and go to state 148

state 132

    (40) assign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab . f_generateEqual moreAssign
    (44) f_generateEqual -> .

    ID              reduce using rule 44 (f_generateEqual -> .)
    DEF             reduce using rule 44 (f_generateEqual -> .)
    $end            reduce using rule 44 (f_generateEqual -> .)
    TAB             reduce using rule 44 (f_generateEqual -> .)
    LOOP            reduce using rule 44 (f_generateEqual -> .)
    ELSE            reduce using rule 44 (f_generateEqual -> .)

    f_generateEqual                shift and go to state 149

state 133

    (32) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo . ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    ID              shift and go to state 150


state 134

    (31) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN . COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    COLON           shift and go to state 151


state 135

    (30) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN tipo . ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    ID              shift and go to state 152


state 136

    (29) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN . COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    COLON           shift and go to state 153


state 137

    (27) functions -> DEF tipo ID f_saveModule LPAREN RPAREN COLON . NEWLINE f_resetTab f_incTab block f_endModule functions

    NEWLINE         shift and go to state 154


state 138

    (28) functions -> DEF tipo ID f_saveModule LPAREN tipo ID . f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (39) f_addToParam -> .

    COMMA           reduce using rule 39 (f_addToParam -> .)
    RPAREN          reduce using rule 39 (f_addToParam -> .)

    f_addToParam                   shift and go to state 155

state 139

    (17) moreVars -> f_checkTab tipo idList NEWLINE . f_resetTab moreVars
    (54) f_resetTab -> .

    BOOL            reduce using rule 54 (f_resetTab -> .)
    INT             reduce using rule 54 (f_resetTab -> .)
    FLOAT           reduce using rule 54 (f_resetTab -> .)
    STRING          reduce using rule 54 (f_resetTab -> .)
    IMAGE           reduce using rule 54 (f_resetTab -> .)
    ID              reduce using rule 54 (f_resetTab -> .)
    TAB             reduce using rule 54 (f_resetTab -> .)
    DEF             reduce using rule 54 (f_resetTab -> .)
    $end            reduce using rule 54 (f_resetTab -> .)
    LOOP            reduce using rule 54 (f_resetTab -> .)
    ELSE            reduce using rule 54 (f_resetTab -> .)

    f_resetTab                     shift and go to state 156

state 140

    (97) moreFactors -> DIVIDE f_pushOperator factor . f_popFactor moreFactors
    (105) f_popFactor -> .

    DIVIDE          reduce using rule 105 (f_popFactor -> .)
    TIMES           reduce using rule 105 (f_popFactor -> .)
    MOD             reduce using rule 105 (f_popFactor -> .)
    PLUS            reduce using rule 105 (f_popFactor -> .)
    MINUS           reduce using rule 105 (f_popFactor -> .)
    GREATER_THAN    reduce using rule 105 (f_popFactor -> .)
    LESS_THAN       reduce using rule 105 (f_popFactor -> .)
    LESS_EQUAL_THAN reduce using rule 105 (f_popFactor -> .)
    GREATER_EQUAL_THAN reduce using rule 105 (f_popFactor -> .)
    NOT_EQUAL_THAN  reduce using rule 105 (f_popFactor -> .)
    SAME_AS         reduce using rule 105 (f_popFactor -> .)
    NEWLINE         reduce using rule 105 (f_popFactor -> .)
    RPAREN          reduce using rule 105 (f_popFactor -> .)
    COMMA           reduce using rule 105 (f_popFactor -> .)
    COLON           reduce using rule 105 (f_popFactor -> .)

    f_popFactor                    shift and go to state 157

state 141

    (98) moreFactors -> TIMES f_pushOperator factor . f_popFactor moreFactors
    (105) f_popFactor -> .

    DIVIDE          reduce using rule 105 (f_popFactor -> .)
    TIMES           reduce using rule 105 (f_popFactor -> .)
    MOD             reduce using rule 105 (f_popFactor -> .)
    PLUS            reduce using rule 105 (f_popFactor -> .)
    MINUS           reduce using rule 105 (f_popFactor -> .)
    GREATER_THAN    reduce using rule 105 (f_popFactor -> .)
    LESS_THAN       reduce using rule 105 (f_popFactor -> .)
    LESS_EQUAL_THAN reduce using rule 105 (f_popFactor -> .)
    GREATER_EQUAL_THAN reduce using rule 105 (f_popFactor -> .)
    NOT_EQUAL_THAN  reduce using rule 105 (f_popFactor -> .)
    SAME_AS         reduce using rule 105 (f_popFactor -> .)
    NEWLINE         reduce using rule 105 (f_popFactor -> .)
    RPAREN          reduce using rule 105 (f_popFactor -> .)
    COMMA           reduce using rule 105 (f_popFactor -> .)
    COLON           reduce using rule 105 (f_popFactor -> .)

    f_popFactor                    shift and go to state 158

state 142

    (99) moreFactors -> MOD f_pushOperator factor . f_popFactor moreFactors
    (105) f_popFactor -> .

    DIVIDE          reduce using rule 105 (f_popFactor -> .)
    TIMES           reduce using rule 105 (f_popFactor -> .)
    MOD             reduce using rule 105 (f_popFactor -> .)
    PLUS            reduce using rule 105 (f_popFactor -> .)
    MINUS           reduce using rule 105 (f_popFactor -> .)
    GREATER_THAN    reduce using rule 105 (f_popFactor -> .)
    LESS_THAN       reduce using rule 105 (f_popFactor -> .)
    LESS_EQUAL_THAN reduce using rule 105 (f_popFactor -> .)
    GREATER_EQUAL_THAN reduce using rule 105 (f_popFactor -> .)
    NOT_EQUAL_THAN  reduce using rule 105 (f_popFactor -> .)
    SAME_AS         reduce using rule 105 (f_popFactor -> .)
    NEWLINE         reduce using rule 105 (f_popFactor -> .)
    RPAREN          reduce using rule 105 (f_popFactor -> .)
    COMMA           reduce using rule 105 (f_popFactor -> .)
    COLON           reduce using rule 105 (f_popFactor -> .)

    f_popFactor                    shift and go to state 159

state 143

    (100) factor -> LPAREN f_pushOperator expression RPAREN . f_popOperator
    (104) f_popOperator -> .

    DIVIDE          reduce using rule 104 (f_popOperator -> .)
    TIMES           reduce using rule 104 (f_popOperator -> .)
    MOD             reduce using rule 104 (f_popOperator -> .)
    PLUS            reduce using rule 104 (f_popOperator -> .)
    MINUS           reduce using rule 104 (f_popOperator -> .)
    GREATER_THAN    reduce using rule 104 (f_popOperator -> .)
    LESS_THAN       reduce using rule 104 (f_popOperator -> .)
    LESS_EQUAL_THAN reduce using rule 104 (f_popOperator -> .)
    GREATER_EQUAL_THAN reduce using rule 104 (f_popOperator -> .)
    NOT_EQUAL_THAN  reduce using rule 104 (f_popOperator -> .)
    SAME_AS         reduce using rule 104 (f_popOperator -> .)
    NEWLINE         reduce using rule 104 (f_popOperator -> .)
    RPAREN          reduce using rule 104 (f_popOperator -> .)
    COMMA           reduce using rule 104 (f_popOperator -> .)
    COLON           reduce using rule 104 (f_popOperator -> .)

    f_popOperator                  shift and go to state 160

state 144

    (75) funct -> ID f_checkProc LPAREN RPAREN .

    DIVIDE          reduce using rule 75 (funct -> ID f_checkProc LPAREN RPAREN .)
    TIMES           reduce using rule 75 (funct -> ID f_checkProc LPAREN RPAREN .)
    MOD             reduce using rule 75 (funct -> ID f_checkProc LPAREN RPAREN .)
    PLUS            reduce using rule 75 (funct -> ID f_checkProc LPAREN RPAREN .)
    MINUS           reduce using rule 75 (funct -> ID f_checkProc LPAREN RPAREN .)
    GREATER_THAN    reduce using rule 75 (funct -> ID f_checkProc LPAREN RPAREN .)
    LESS_THAN       reduce using rule 75 (funct -> ID f_checkProc LPAREN RPAREN .)
    LESS_EQUAL_THAN reduce using rule 75 (funct -> ID f_checkProc LPAREN RPAREN .)
    GREATER_EQUAL_THAN reduce using rule 75 (funct -> ID f_checkProc LPAREN RPAREN .)
    NOT_EQUAL_THAN  reduce using rule 75 (funct -> ID f_checkProc LPAREN RPAREN .)
    SAME_AS         reduce using rule 75 (funct -> ID f_checkProc LPAREN RPAREN .)
    COLON           reduce using rule 75 (funct -> ID f_checkProc LPAREN RPAREN .)
    NEWLINE         reduce using rule 75 (funct -> ID f_checkProc LPAREN RPAREN .)
    RPAREN          reduce using rule 75 (funct -> ID f_checkProc LPAREN RPAREN .)
    COMMA           reduce using rule 75 (funct -> ID f_checkProc LPAREN RPAREN .)


state 145

    (76) funct -> ID f_checkProc LPAREN expression . f_genParam expressionList RPAREN
    (80) f_genParam -> .

    COMMA           reduce using rule 80 (f_genParam -> .)
    RPAREN          reduce using rule 80 (f_genParam -> .)

    f_genParam                     shift and go to state 161

state 146

    (92) moreTerms -> PLUS f_pushOperator term . f_popTerm moreTerms
    (94) f_popTerm -> .

    PLUS            reduce using rule 94 (f_popTerm -> .)
    MINUS           reduce using rule 94 (f_popTerm -> .)
    GREATER_THAN    reduce using rule 94 (f_popTerm -> .)
    LESS_THAN       reduce using rule 94 (f_popTerm -> .)
    LESS_EQUAL_THAN reduce using rule 94 (f_popTerm -> .)
    GREATER_EQUAL_THAN reduce using rule 94 (f_popTerm -> .)
    NOT_EQUAL_THAN  reduce using rule 94 (f_popTerm -> .)
    SAME_AS         reduce using rule 94 (f_popTerm -> .)
    NEWLINE         reduce using rule 94 (f_popTerm -> .)
    RPAREN          reduce using rule 94 (f_popTerm -> .)
    COMMA           reduce using rule 94 (f_popTerm -> .)
    COLON           reduce using rule 94 (f_popTerm -> .)

    f_popTerm                      shift and go to state 162

state 147

    (93) moreTerms -> MINUS f_pushOperator term . f_popTerm moreTerms
    (94) f_popTerm -> .

    PLUS            reduce using rule 94 (f_popTerm -> .)
    MINUS           reduce using rule 94 (f_popTerm -> .)
    GREATER_THAN    reduce using rule 94 (f_popTerm -> .)
    LESS_THAN       reduce using rule 94 (f_popTerm -> .)
    LESS_EQUAL_THAN reduce using rule 94 (f_popTerm -> .)
    GREATER_EQUAL_THAN reduce using rule 94 (f_popTerm -> .)
    NOT_EQUAL_THAN  reduce using rule 94 (f_popTerm -> .)
    SAME_AS         reduce using rule 94 (f_popTerm -> .)
    NEWLINE         reduce using rule 94 (f_popTerm -> .)
    RPAREN          reduce using rule 94 (f_popTerm -> .)
    COMMA           reduce using rule 94 (f_popTerm -> .)
    COLON           reduce using rule 94 (f_popTerm -> .)

    f_popTerm                      shift and go to state 163

state 148

    (82) expression -> exp compareToken exp f_popComparation .

    NEWLINE         reduce using rule 82 (expression -> exp compareToken exp f_popComparation .)
    COMMA           reduce using rule 82 (expression -> exp compareToken exp f_popComparation .)
    RPAREN          reduce using rule 82 (expression -> exp compareToken exp f_popComparation .)
    COLON           reduce using rule 82 (expression -> exp compareToken exp f_popComparation .)


state 149

    (40) assign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual . moreAssign
    (41) moreAssign -> . empty
    (42) moreAssign -> . f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign
    (3) empty -> .
    (55) f_checkTab -> .

    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)
    TAB             reduce using rule 3 (empty -> .)
    LOOP            reduce using rule 3 (empty -> .)
    ELSE            reduce using rule 3 (empty -> .)
    ID              reduce using rule 55 (f_checkTab -> .)

    f_checkTab                     shift and go to state 164
    moreAssign                     shift and go to state 165
    empty                          shift and go to state 166

state 150

    (32) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID . f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (39) f_addToParam -> .

    COMMA           reduce using rule 39 (f_addToParam -> .)
    RPAREN          reduce using rule 39 (f_addToParam -> .)

    f_addToParam                   shift and go to state 167

state 151

    (31) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON . NEWLINE f_resetTab f_incTab block f_endModule functions

    NEWLINE         shift and go to state 168


state 152

    (30) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID . f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (39) f_addToParam -> .

    COMMA           reduce using rule 39 (f_addToParam -> .)
    RPAREN          reduce using rule 39 (f_addToParam -> .)

    f_addToParam                   shift and go to state 169

state 153

    (29) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON . NEWLINE f_resetTab f_incTab block f_endModule functions

    NEWLINE         shift and go to state 170


state 154

    (27) functions -> DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE . f_resetTab f_incTab block f_endModule functions
    (54) f_resetTab -> .

    TAB             reduce using rule 54 (f_resetTab -> .)

    f_resetTab                     shift and go to state 171

state 155

    (28) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam . parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (37) parameterList -> . empty
    (38) parameterList -> . COMMA tipo ID f_addToParam parameterList
    (3) empty -> .

    COMMA           shift and go to state 174
    RPAREN          reduce using rule 3 (empty -> .)

    parameterList                  shift and go to state 172
    empty                          shift and go to state 173

state 156

    (17) moreVars -> f_checkTab tipo idList NEWLINE f_resetTab . moreVars
    (17) moreVars -> . f_checkTab tipo idList NEWLINE f_resetTab moreVars
    (18) moreVars -> . empty
    (55) f_checkTab -> .
    (3) empty -> .

    BOOL            reduce using rule 55 (f_checkTab -> .)
    INT             reduce using rule 55 (f_checkTab -> .)
    FLOAT           reduce using rule 55 (f_checkTab -> .)
    STRING          reduce using rule 55 (f_checkTab -> .)
    IMAGE           reduce using rule 55 (f_checkTab -> .)
    ID              reduce using rule 3 (empty -> .)
    TAB             reduce using rule 3 (empty -> .)
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)
    LOOP            reduce using rule 3 (empty -> .)
    ELSE            reduce using rule 3 (empty -> .)

    f_checkTab                     shift and go to state 73
    moreVars                       shift and go to state 175
    empty                          shift and go to state 75

state 157

    (97) moreFactors -> DIVIDE f_pushOperator factor f_popFactor . moreFactors
    (96) moreFactors -> . empty
    (97) moreFactors -> . DIVIDE f_pushOperator factor f_popFactor moreFactors
    (98) moreFactors -> . TIMES f_pushOperator factor f_popFactor moreFactors
    (99) moreFactors -> . MOD f_pushOperator factor f_popFactor moreFactors
    (3) empty -> .

    DIVIDE          shift and go to state 98
    TIMES           shift and go to state 99
    MOD             shift and go to state 101
    PLUS            reduce using rule 3 (empty -> .)
    MINUS           reduce using rule 3 (empty -> .)
    GREATER_THAN    reduce using rule 3 (empty -> .)
    LESS_THAN       reduce using rule 3 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 3 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 3 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 3 (empty -> .)
    SAME_AS         reduce using rule 3 (empty -> .)
    NEWLINE         reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    COLON           reduce using rule 3 (empty -> .)

    moreFactors                    shift and go to state 176
    empty                          shift and go to state 100

state 158

    (98) moreFactors -> TIMES f_pushOperator factor f_popFactor . moreFactors
    (96) moreFactors -> . empty
    (97) moreFactors -> . DIVIDE f_pushOperator factor f_popFactor moreFactors
    (98) moreFactors -> . TIMES f_pushOperator factor f_popFactor moreFactors
    (99) moreFactors -> . MOD f_pushOperator factor f_popFactor moreFactors
    (3) empty -> .

    DIVIDE          shift and go to state 98
    TIMES           shift and go to state 99
    MOD             shift and go to state 101
    PLUS            reduce using rule 3 (empty -> .)
    MINUS           reduce using rule 3 (empty -> .)
    GREATER_THAN    reduce using rule 3 (empty -> .)
    LESS_THAN       reduce using rule 3 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 3 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 3 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 3 (empty -> .)
    SAME_AS         reduce using rule 3 (empty -> .)
    NEWLINE         reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    COLON           reduce using rule 3 (empty -> .)

    moreFactors                    shift and go to state 177
    empty                          shift and go to state 100

state 159

    (99) moreFactors -> MOD f_pushOperator factor f_popFactor . moreFactors
    (96) moreFactors -> . empty
    (97) moreFactors -> . DIVIDE f_pushOperator factor f_popFactor moreFactors
    (98) moreFactors -> . TIMES f_pushOperator factor f_popFactor moreFactors
    (99) moreFactors -> . MOD f_pushOperator factor f_popFactor moreFactors
    (3) empty -> .

    DIVIDE          shift and go to state 98
    TIMES           shift and go to state 99
    MOD             shift and go to state 101
    PLUS            reduce using rule 3 (empty -> .)
    MINUS           reduce using rule 3 (empty -> .)
    GREATER_THAN    reduce using rule 3 (empty -> .)
    LESS_THAN       reduce using rule 3 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 3 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 3 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 3 (empty -> .)
    SAME_AS         reduce using rule 3 (empty -> .)
    NEWLINE         reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    COLON           reduce using rule 3 (empty -> .)

    moreFactors                    shift and go to state 178
    empty                          shift and go to state 100

state 160

    (100) factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .

    DIVIDE          reduce using rule 100 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    TIMES           reduce using rule 100 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    MOD             reduce using rule 100 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    PLUS            reduce using rule 100 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    MINUS           reduce using rule 100 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    GREATER_THAN    reduce using rule 100 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    LESS_THAN       reduce using rule 100 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    LESS_EQUAL_THAN reduce using rule 100 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    GREATER_EQUAL_THAN reduce using rule 100 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    NOT_EQUAL_THAN  reduce using rule 100 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    SAME_AS         reduce using rule 100 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    NEWLINE         reduce using rule 100 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    RPAREN          reduce using rule 100 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    COMMA           reduce using rule 100 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    COLON           reduce using rule 100 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)


state 161

    (76) funct -> ID f_checkProc LPAREN expression f_genParam . expressionList RPAREN
    (78) expressionList -> . empty
    (79) expressionList -> . COMMA expression f_genParam expressionList
    (3) empty -> .

    COMMA           shift and go to state 180
    RPAREN          reduce using rule 3 (empty -> .)

    empty                          shift and go to state 181
    expressionList                 shift and go to state 179

state 162

    (92) moreTerms -> PLUS f_pushOperator term f_popTerm . moreTerms
    (91) moreTerms -> . empty
    (92) moreTerms -> . PLUS f_pushOperator term f_popTerm moreTerms
    (93) moreTerms -> . MINUS f_pushOperator term f_popTerm moreTerms
    (3) empty -> .

    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    GREATER_THAN    reduce using rule 3 (empty -> .)
    LESS_THAN       reduce using rule 3 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 3 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 3 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 3 (empty -> .)
    SAME_AS         reduce using rule 3 (empty -> .)
    NEWLINE         reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    COLON           reduce using rule 3 (empty -> .)

    moreTerms                      shift and go to state 182
    empty                          shift and go to state 110

state 163

    (93) moreTerms -> MINUS f_pushOperator term f_popTerm . moreTerms
    (91) moreTerms -> . empty
    (92) moreTerms -> . PLUS f_pushOperator term f_popTerm moreTerms
    (93) moreTerms -> . MINUS f_pushOperator term f_popTerm moreTerms
    (3) empty -> .

    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    GREATER_THAN    reduce using rule 3 (empty -> .)
    LESS_THAN       reduce using rule 3 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 3 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 3 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 3 (empty -> .)
    SAME_AS         reduce using rule 3 (empty -> .)
    NEWLINE         reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    COLON           reduce using rule 3 (empty -> .)

    moreTerms                      shift and go to state 183
    empty                          shift and go to state 110

state 164

    (42) moreAssign -> f_checkTab . ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign

    ID              shift and go to state 184


state 165

    (40) assign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign .

    TAB             reduce using rule 40 (assign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign .)
    DEF             reduce using rule 40 (assign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign .)
    $end            reduce using rule 40 (assign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign .)
    LOOP            reduce using rule 40 (assign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign .)
    ELSE            reduce using rule 40 (assign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign .)


state 166

    (41) moreAssign -> empty .

    DEF             reduce using rule 41 (moreAssign -> empty .)
    $end            reduce using rule 41 (moreAssign -> empty .)
    TAB             reduce using rule 41 (moreAssign -> empty .)
    LOOP            reduce using rule 41 (moreAssign -> empty .)
    ELSE            reduce using rule 41 (moreAssign -> empty .)


state 167

    (32) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam . parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (37) parameterList -> . empty
    (38) parameterList -> . COMMA tipo ID f_addToParam parameterList
    (3) empty -> .

    COMMA           shift and go to state 174
    RPAREN          reduce using rule 3 (empty -> .)

    parameterList                  shift and go to state 185
    empty                          shift and go to state 173

state 168

    (31) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE . f_resetTab f_incTab block f_endModule functions
    (54) f_resetTab -> .

    TAB             reduce using rule 54 (f_resetTab -> .)

    f_resetTab                     shift and go to state 186

state 169

    (30) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam . parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (37) parameterList -> . empty
    (38) parameterList -> . COMMA tipo ID f_addToParam parameterList
    (3) empty -> .

    COMMA           shift and go to state 174
    RPAREN          reduce using rule 3 (empty -> .)

    parameterList                  shift and go to state 187
    empty                          shift and go to state 173

state 170

    (29) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE . f_resetTab f_incTab block f_endModule functions
    (54) f_resetTab -> .

    TAB             reduce using rule 54 (f_resetTab -> .)

    f_resetTab                     shift and go to state 188

state 171

    (27) functions -> DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab . f_incTab block f_endModule functions
    (52) f_incTab -> .

    TAB             reduce using rule 52 (f_incTab -> .)

    f_incTab                       shift and go to state 189

state 172

    (28) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList . RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    RPAREN          shift and go to state 190


state 173

    (37) parameterList -> empty .

    RPAREN          reduce using rule 37 (parameterList -> empty .)


state 174

    (38) parameterList -> COMMA . tipo ID f_addToParam parameterList
    (22) tipo -> . BOOL f_saveType
    (23) tipo -> . INT f_saveType
    (24) tipo -> . FLOAT f_saveType
    (25) tipo -> . STRING f_saveType
    (26) tipo -> . IMAGE f_saveType

    BOOL            shift and go to state 24
    INT             shift and go to state 23
    FLOAT           shift and go to state 21
    STRING          shift and go to state 26
    IMAGE           shift and go to state 25

    tipo                           shift and go to state 191

state 175

    (17) moreVars -> f_checkTab tipo idList NEWLINE f_resetTab moreVars .

    ID              reduce using rule 17 (moreVars -> f_checkTab tipo idList NEWLINE f_resetTab moreVars .)
    TAB             reduce using rule 17 (moreVars -> f_checkTab tipo idList NEWLINE f_resetTab moreVars .)
    DEF             reduce using rule 17 (moreVars -> f_checkTab tipo idList NEWLINE f_resetTab moreVars .)
    $end            reduce using rule 17 (moreVars -> f_checkTab tipo idList NEWLINE f_resetTab moreVars .)
    LOOP            reduce using rule 17 (moreVars -> f_checkTab tipo idList NEWLINE f_resetTab moreVars .)
    ELSE            reduce using rule 17 (moreVars -> f_checkTab tipo idList NEWLINE f_resetTab moreVars .)


state 176

    (97) moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .

    PLUS            reduce using rule 97 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    MINUS           reduce using rule 97 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    GREATER_THAN    reduce using rule 97 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    LESS_THAN       reduce using rule 97 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    LESS_EQUAL_THAN reduce using rule 97 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    GREATER_EQUAL_THAN reduce using rule 97 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    NOT_EQUAL_THAN  reduce using rule 97 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    SAME_AS         reduce using rule 97 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    NEWLINE         reduce using rule 97 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    RPAREN          reduce using rule 97 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    COMMA           reduce using rule 97 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    COLON           reduce using rule 97 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)


state 177

    (98) moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .

    PLUS            reduce using rule 98 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    MINUS           reduce using rule 98 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    GREATER_THAN    reduce using rule 98 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    LESS_THAN       reduce using rule 98 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    LESS_EQUAL_THAN reduce using rule 98 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    GREATER_EQUAL_THAN reduce using rule 98 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    NOT_EQUAL_THAN  reduce using rule 98 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    SAME_AS         reduce using rule 98 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    NEWLINE         reduce using rule 98 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    RPAREN          reduce using rule 98 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    COMMA           reduce using rule 98 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    COLON           reduce using rule 98 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)


state 178

    (99) moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .

    PLUS            reduce using rule 99 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    MINUS           reduce using rule 99 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    GREATER_THAN    reduce using rule 99 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    LESS_THAN       reduce using rule 99 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    LESS_EQUAL_THAN reduce using rule 99 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    GREATER_EQUAL_THAN reduce using rule 99 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    NOT_EQUAL_THAN  reduce using rule 99 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    SAME_AS         reduce using rule 99 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    NEWLINE         reduce using rule 99 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    RPAREN          reduce using rule 99 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    COMMA           reduce using rule 99 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    COLON           reduce using rule 99 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)


state 179

    (76) funct -> ID f_checkProc LPAREN expression f_genParam expressionList . RPAREN

    RPAREN          shift and go to state 192


state 180

    (79) expressionList -> COMMA . expression f_genParam expressionList
    (81) expression -> . exp
    (82) expression -> . exp compareToken exp f_popComparation
    (90) exp -> . term moreTerms
    (95) term -> . factor moreFactors
    (100) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (101) factor -> . cvar
    (102) factor -> . funct
    (106) cvar -> . ID f_isID
    (107) cvar -> . C_BOOL f_isConst
    (108) cvar -> . C_INT f_isConst
    (109) cvar -> . C_FLOAT f_isConst
    (110) cvar -> . C_STRING f_isConst
    (75) funct -> . ID f_checkProc LPAREN RPAREN
    (76) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 83
    ID              shift and go to state 85
    C_BOOL          shift and go to state 81
    C_INT           shift and go to state 84
    C_FLOAT         shift and go to state 79
    C_STRING        shift and go to state 86

    term                           shift and go to state 87
    funct                          shift and go to state 80
    exp                            shift and go to state 88
    factor                         shift and go to state 82
    cvar                           shift and go to state 78
    expression                     shift and go to state 193

state 181

    (78) expressionList -> empty .

    RPAREN          reduce using rule 78 (expressionList -> empty .)


state 182

    (92) moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .

    GREATER_THAN    reduce using rule 92 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    LESS_THAN       reduce using rule 92 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    LESS_EQUAL_THAN reduce using rule 92 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    GREATER_EQUAL_THAN reduce using rule 92 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    NOT_EQUAL_THAN  reduce using rule 92 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    SAME_AS         reduce using rule 92 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    NEWLINE         reduce using rule 92 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    RPAREN          reduce using rule 92 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    COMMA           reduce using rule 92 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    COLON           reduce using rule 92 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)


state 183

    (93) moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .

    GREATER_THAN    reduce using rule 93 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    LESS_THAN       reduce using rule 93 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    LESS_EQUAL_THAN reduce using rule 93 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    GREATER_EQUAL_THAN reduce using rule 93 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    NOT_EQUAL_THAN  reduce using rule 93 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    SAME_AS         reduce using rule 93 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    NEWLINE         reduce using rule 93 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    RPAREN          reduce using rule 93 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    COMMA           reduce using rule 93 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    COLON           reduce using rule 93 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)


state 184

    (42) moreAssign -> f_checkTab ID . f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign
    (45) f_checkID -> .

    EQUAL           reduce using rule 45 (f_checkID -> .)

    f_checkID                      shift and go to state 194

state 185

    (32) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList . RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    RPAREN          shift and go to state 195


state 186

    (31) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab . f_incTab block f_endModule functions
    (52) f_incTab -> .

    TAB             reduce using rule 52 (f_incTab -> .)

    f_incTab                       shift and go to state 196

state 187

    (30) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList . RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    RPAREN          shift and go to state 197


state 188

    (29) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab . f_incTab block f_endModule functions
    (52) f_incTab -> .

    TAB             reduce using rule 52 (f_incTab -> .)

    f_incTab                       shift and go to state 198

state 189

    (27) functions -> DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab . block f_endModule functions
    (48) block -> . TAB f_addTab moreTabs statement moreStatements

    TAB             shift and go to state 200

    block                          shift and go to state 199

state 190

    (28) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN . COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    COLON           shift and go to state 201


state 191

    (38) parameterList -> COMMA tipo . ID f_addToParam parameterList

    ID              shift and go to state 202


state 192

    (76) funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .

    DIVIDE          reduce using rule 76 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    TIMES           reduce using rule 76 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    MOD             reduce using rule 76 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    PLUS            reduce using rule 76 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    MINUS           reduce using rule 76 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    GREATER_THAN    reduce using rule 76 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    LESS_THAN       reduce using rule 76 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    LESS_EQUAL_THAN reduce using rule 76 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    GREATER_EQUAL_THAN reduce using rule 76 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    NOT_EQUAL_THAN  reduce using rule 76 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    SAME_AS         reduce using rule 76 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    COLON           reduce using rule 76 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    NEWLINE         reduce using rule 76 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    RPAREN          reduce using rule 76 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    COMMA           reduce using rule 76 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)


state 193

    (79) expressionList -> COMMA expression . f_genParam expressionList
    (80) f_genParam -> .

    COMMA           reduce using rule 80 (f_genParam -> .)
    RPAREN          reduce using rule 80 (f_genParam -> .)

    f_genParam                     shift and go to state 203

state 194

    (42) moreAssign -> f_checkTab ID f_checkID . EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign

    EQUAL           shift and go to state 204


state 195

    (32) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN . COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    COLON           shift and go to state 205


state 196

    (31) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab . block f_endModule functions
    (48) block -> . TAB f_addTab moreTabs statement moreStatements

    TAB             shift and go to state 200

    block                          shift and go to state 206

state 197

    (30) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN . COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    COLON           shift and go to state 207


state 198

    (29) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab . block f_endModule functions
    (48) block -> . TAB f_addTab moreTabs statement moreStatements

    TAB             shift and go to state 200

    block                          shift and go to state 208

state 199

    (27) functions -> DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block . f_endModule functions
    (35) f_endModule -> .

    DEF             reduce using rule 35 (f_endModule -> .)
    $end            reduce using rule 35 (f_endModule -> .)

    f_endModule                    shift and go to state 209

state 200

    (48) block -> TAB . f_addTab moreTabs statement moreStatements
    (53) f_addTab -> .

    TAB             reduce using rule 53 (f_addTab -> .)
    NEWLINE         reduce using rule 53 (f_addTab -> .)
    RETURN          reduce using rule 53 (f_addTab -> .)
    ID              reduce using rule 53 (f_addTab -> .)
    WHILE           reduce using rule 53 (f_addTab -> .)
    IF              reduce using rule 53 (f_addTab -> .)
    DO              reduce using rule 53 (f_addTab -> .)
    BOOL            reduce using rule 53 (f_addTab -> .)
    INT             reduce using rule 53 (f_addTab -> .)
    FLOAT           reduce using rule 53 (f_addTab -> .)
    STRING          reduce using rule 53 (f_addTab -> .)
    IMAGE           reduce using rule 53 (f_addTab -> .)
    DEF             reduce using rule 53 (f_addTab -> .)
    $end            reduce using rule 53 (f_addTab -> .)
    LOOP            reduce using rule 53 (f_addTab -> .)
    ELSE            reduce using rule 53 (f_addTab -> .)

    f_addTab                       shift and go to state 210

state 201

    (28) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON . NEWLINE f_resetTab f_incTab block f_endModule functions

    NEWLINE         shift and go to state 211


state 202

    (38) parameterList -> COMMA tipo ID . f_addToParam parameterList
    (39) f_addToParam -> .

    COMMA           reduce using rule 39 (f_addToParam -> .)
    RPAREN          reduce using rule 39 (f_addToParam -> .)

    f_addToParam                   shift and go to state 212

state 203

    (79) expressionList -> COMMA expression f_genParam . expressionList
    (78) expressionList -> . empty
    (79) expressionList -> . COMMA expression f_genParam expressionList
    (3) empty -> .

    COMMA           shift and go to state 180
    RPAREN          reduce using rule 3 (empty -> .)

    expressionList                 shift and go to state 213
    empty                          shift and go to state 181

state 204

    (42) moreAssign -> f_checkTab ID f_checkID EQUAL . f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign
    (43) f_isAssign -> .

    LPAREN          reduce using rule 43 (f_isAssign -> .)
    ID              reduce using rule 43 (f_isAssign -> .)
    C_BOOL          reduce using rule 43 (f_isAssign -> .)
    C_INT           reduce using rule 43 (f_isAssign -> .)
    C_FLOAT         reduce using rule 43 (f_isAssign -> .)
    C_STRING        reduce using rule 43 (f_isAssign -> .)

    f_isAssign                     shift and go to state 214

state 205

    (32) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON . NEWLINE f_resetTab f_incTab block f_endModule functions

    NEWLINE         shift and go to state 215


state 206

    (31) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block . f_endModule functions
    (35) f_endModule -> .

    DEF             reduce using rule 35 (f_endModule -> .)
    $end            reduce using rule 35 (f_endModule -> .)

    f_endModule                    shift and go to state 216

state 207

    (30) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON . NEWLINE f_resetTab f_incTab block f_endModule functions

    NEWLINE         shift and go to state 217


state 208

    (29) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block . f_endModule functions
    (35) f_endModule -> .

    DEF             reduce using rule 35 (f_endModule -> .)
    $end            reduce using rule 35 (f_endModule -> .)

    f_endModule                    shift and go to state 218

state 209

    (27) functions -> DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule . functions
    (27) functions -> . DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (28) functions -> . DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (29) functions -> . DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (30) functions -> . DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (31) functions -> . DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (32) functions -> . DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (33) functions -> . empty
    (3) empty -> .

    DEF             shift and go to state 34
    $end            reduce using rule 3 (empty -> .)

    functions                      shift and go to state 219
    empty                          shift and go to state 36

state 210

    (48) block -> TAB f_addTab . moreTabs statement moreStatements
    (49) moreTabs -> . empty
    (50) moreTabs -> . TAB f_addTab moreTabs
    (51) moreTabs -> . NEWLINE f_resetTab TAB f_addTab moreTabs
    (3) empty -> .

  ! shift/reduce conflict for TAB resolved as shift
    TAB             shift and go to state 221
    NEWLINE         shift and go to state 222
    RETURN          reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)
    WHILE           reduce using rule 3 (empty -> .)
    IF              reduce using rule 3 (empty -> .)
    DO              reduce using rule 3 (empty -> .)
    BOOL            reduce using rule 3 (empty -> .)
    INT             reduce using rule 3 (empty -> .)
    FLOAT           reduce using rule 3 (empty -> .)
    STRING          reduce using rule 3 (empty -> .)
    IMAGE           reduce using rule 3 (empty -> .)
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)
    LOOP            reduce using rule 3 (empty -> .)
    ELSE            reduce using rule 3 (empty -> .)

  ! TAB             [ reduce using rule 3 (empty -> .) ]

    moreTabs                       shift and go to state 220
    empty                          shift and go to state 223

state 211

    (28) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE . f_resetTab f_incTab block f_endModule functions
    (54) f_resetTab -> .

    TAB             reduce using rule 54 (f_resetTab -> .)

    f_resetTab                     shift and go to state 224

state 212

    (38) parameterList -> COMMA tipo ID f_addToParam . parameterList
    (37) parameterList -> . empty
    (38) parameterList -> . COMMA tipo ID f_addToParam parameterList
    (3) empty -> .

    COMMA           shift and go to state 174
    RPAREN          reduce using rule 3 (empty -> .)

    parameterList                  shift and go to state 225
    empty                          shift and go to state 173

state 213

    (79) expressionList -> COMMA expression f_genParam expressionList .

    RPAREN          reduce using rule 79 (expressionList -> COMMA expression f_genParam expressionList .)


state 214

    (42) moreAssign -> f_checkTab ID f_checkID EQUAL f_isAssign . expression NEWLINE f_resetTab f_generateEqual moreAssign
    (81) expression -> . exp
    (82) expression -> . exp compareToken exp f_popComparation
    (90) exp -> . term moreTerms
    (95) term -> . factor moreFactors
    (100) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (101) factor -> . cvar
    (102) factor -> . funct
    (106) cvar -> . ID f_isID
    (107) cvar -> . C_BOOL f_isConst
    (108) cvar -> . C_INT f_isConst
    (109) cvar -> . C_FLOAT f_isConst
    (110) cvar -> . C_STRING f_isConst
    (75) funct -> . ID f_checkProc LPAREN RPAREN
    (76) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 83
    ID              shift and go to state 85
    C_BOOL          shift and go to state 81
    C_INT           shift and go to state 84
    C_FLOAT         shift and go to state 79
    C_STRING        shift and go to state 86

    cvar                           shift and go to state 78
    funct                          shift and go to state 80
    factor                         shift and go to state 82
    term                           shift and go to state 87
    exp                            shift and go to state 88
    expression                     shift and go to state 226

state 215

    (32) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE . f_resetTab f_incTab block f_endModule functions
    (54) f_resetTab -> .

    TAB             reduce using rule 54 (f_resetTab -> .)

    f_resetTab                     shift and go to state 227

state 216

    (31) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule . functions
    (27) functions -> . DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (28) functions -> . DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (29) functions -> . DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (30) functions -> . DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (31) functions -> . DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (32) functions -> . DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (33) functions -> . empty
    (3) empty -> .

    DEF             shift and go to state 34
    $end            reduce using rule 3 (empty -> .)

    functions                      shift and go to state 228
    empty                          shift and go to state 36

state 217

    (30) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE . f_resetTab f_incTab block f_endModule functions
    (54) f_resetTab -> .

    TAB             reduce using rule 54 (f_resetTab -> .)

    f_resetTab                     shift and go to state 229

state 218

    (29) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule . functions
    (27) functions -> . DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (28) functions -> . DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (29) functions -> . DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (30) functions -> . DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (31) functions -> . DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (32) functions -> . DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (33) functions -> . empty
    (3) empty -> .

    DEF             shift and go to state 34
    $end            reduce using rule 3 (empty -> .)

    functions                      shift and go to state 230
    empty                          shift and go to state 36

state 219

    (27) functions -> DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions .

    $end            reduce using rule 27 (functions -> DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions .)


state 220

    (48) block -> TAB f_addTab moreTabs . statement moreStatements
    (56) statement -> . vars
    (57) statement -> . assign
    (58) statement -> . f_checkTab condition
    (59) statement -> . f_checkTab doCycle
    (60) statement -> . cycle
    (61) statement -> . f_checkTab funct NEWLINE f_resetTab
    (62) statement -> . f_checkTab RETURN f_isReturn expression f_return NEWLINE f_resetTab
    (63) statement -> . empty
    (16) vars -> . f_checkTab tipo idList NEWLINE f_resetTab moreVars
    (40) assign -> . f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign
    (55) f_checkTab -> .
    (66) cycle -> . f_checkTab WHILE f_isCondition expression COLON NEWLINE f_resetTab f_incTab block
    (3) empty -> .

    RETURN          reduce using rule 55 (f_checkTab -> .)
    ID              reduce using rule 55 (f_checkTab -> .)
    WHILE           reduce using rule 55 (f_checkTab -> .)
    IF              reduce using rule 55 (f_checkTab -> .)
    DO              reduce using rule 55 (f_checkTab -> .)
    BOOL            reduce using rule 55 (f_checkTab -> .)
    INT             reduce using rule 55 (f_checkTab -> .)
    FLOAT           reduce using rule 55 (f_checkTab -> .)
    STRING          reduce using rule 55 (f_checkTab -> .)
    IMAGE           reduce using rule 55 (f_checkTab -> .)
    TAB             reduce using rule 3 (empty -> .)
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)
    LOOP            reduce using rule 3 (empty -> .)
    ELSE            reduce using rule 3 (empty -> .)

    vars                           shift and go to state 231
    f_checkTab                     shift and go to state 232
    statement                      shift and go to state 234
    empty                          shift and go to state 233
    cycle                          shift and go to state 235
    assign                         shift and go to state 236

state 221

    (50) moreTabs -> TAB . f_addTab moreTabs
    (53) f_addTab -> .

    TAB             reduce using rule 53 (f_addTab -> .)
    NEWLINE         reduce using rule 53 (f_addTab -> .)
    RETURN          reduce using rule 53 (f_addTab -> .)
    ID              reduce using rule 53 (f_addTab -> .)
    WHILE           reduce using rule 53 (f_addTab -> .)
    IF              reduce using rule 53 (f_addTab -> .)
    DO              reduce using rule 53 (f_addTab -> .)
    BOOL            reduce using rule 53 (f_addTab -> .)
    INT             reduce using rule 53 (f_addTab -> .)
    FLOAT           reduce using rule 53 (f_addTab -> .)
    STRING          reduce using rule 53 (f_addTab -> .)
    IMAGE           reduce using rule 53 (f_addTab -> .)
    DEF             reduce using rule 53 (f_addTab -> .)
    $end            reduce using rule 53 (f_addTab -> .)
    LOOP            reduce using rule 53 (f_addTab -> .)
    ELSE            reduce using rule 53 (f_addTab -> .)

    f_addTab                       shift and go to state 237

state 222

    (51) moreTabs -> NEWLINE . f_resetTab TAB f_addTab moreTabs
    (54) f_resetTab -> .

    TAB             reduce using rule 54 (f_resetTab -> .)

    f_resetTab                     shift and go to state 238

state 223

    (49) moreTabs -> empty .

    TAB             reduce using rule 49 (moreTabs -> empty .)
    RETURN          reduce using rule 49 (moreTabs -> empty .)
    ID              reduce using rule 49 (moreTabs -> empty .)
    WHILE           reduce using rule 49 (moreTabs -> empty .)
    IF              reduce using rule 49 (moreTabs -> empty .)
    DO              reduce using rule 49 (moreTabs -> empty .)
    BOOL            reduce using rule 49 (moreTabs -> empty .)
    INT             reduce using rule 49 (moreTabs -> empty .)
    FLOAT           reduce using rule 49 (moreTabs -> empty .)
    STRING          reduce using rule 49 (moreTabs -> empty .)
    IMAGE           reduce using rule 49 (moreTabs -> empty .)
    DEF             reduce using rule 49 (moreTabs -> empty .)
    $end            reduce using rule 49 (moreTabs -> empty .)
    LOOP            reduce using rule 49 (moreTabs -> empty .)
    ELSE            reduce using rule 49 (moreTabs -> empty .)


state 224

    (28) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab . f_incTab block f_endModule functions
    (52) f_incTab -> .

    TAB             reduce using rule 52 (f_incTab -> .)

    f_incTab                       shift and go to state 239

state 225

    (38) parameterList -> COMMA tipo ID f_addToParam parameterList .

    RPAREN          reduce using rule 38 (parameterList -> COMMA tipo ID f_addToParam parameterList .)


state 226

    (42) moreAssign -> f_checkTab ID f_checkID EQUAL f_isAssign expression . NEWLINE f_resetTab f_generateEqual moreAssign

    NEWLINE         shift and go to state 240


state 227

    (32) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab . f_incTab block f_endModule functions
    (52) f_incTab -> .

    TAB             reduce using rule 52 (f_incTab -> .)

    f_incTab                       shift and go to state 241

state 228

    (31) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions .

    $end            reduce using rule 31 (functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions .)


state 229

    (30) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab . f_incTab block f_endModule functions
    (52) f_incTab -> .

    TAB             reduce using rule 52 (f_incTab -> .)

    f_incTab                       shift and go to state 242

state 230

    (29) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions .

    $end            reduce using rule 29 (functions -> DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions .)


state 231

    (56) statement -> vars .

    TAB             reduce using rule 56 (statement -> vars .)
    DEF             reduce using rule 56 (statement -> vars .)
    $end            reduce using rule 56 (statement -> vars .)
    LOOP            reduce using rule 56 (statement -> vars .)
    ELSE            reduce using rule 56 (statement -> vars .)


state 232

    (58) statement -> f_checkTab . condition
    (59) statement -> f_checkTab . doCycle
    (61) statement -> f_checkTab . funct NEWLINE f_resetTab
    (62) statement -> f_checkTab . RETURN f_isReturn expression f_return NEWLINE f_resetTab
    (16) vars -> f_checkTab . tipo idList NEWLINE f_resetTab moreVars
    (40) assign -> f_checkTab . ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign
    (66) cycle -> f_checkTab . WHILE f_isCondition expression COLON NEWLINE f_resetTab f_incTab block
    (67) condition -> . IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block
    (68) condition -> . IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block
    (70) doCycle -> . DO f_pushDo COLON NEWLINE f_resetTab f_incTab block LOOP f_isDoWhile f_isCondition expression NEWLINE f_resetTab
    (75) funct -> . ID f_checkProc LPAREN RPAREN
    (76) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN
    (22) tipo -> . BOOL f_saveType
    (23) tipo -> . INT f_saveType
    (24) tipo -> . FLOAT f_saveType
    (25) tipo -> . STRING f_saveType
    (26) tipo -> . IMAGE f_saveType

    RETURN          shift and go to state 244
    ID              shift and go to state 248
    WHILE           shift and go to state 246
    IF              shift and go to state 250
    DO              shift and go to state 243
    BOOL            shift and go to state 24
    INT             shift and go to state 23
    FLOAT           shift and go to state 21
    STRING          shift and go to state 26
    IMAGE           shift and go to state 25

    funct                          shift and go to state 245
    tipo                           shift and go to state 22
    doCycle                        shift and go to state 247
    condition                      shift and go to state 249

state 233

    (63) statement -> empty .

    TAB             reduce using rule 63 (statement -> empty .)
    DEF             reduce using rule 63 (statement -> empty .)
    $end            reduce using rule 63 (statement -> empty .)
    LOOP            reduce using rule 63 (statement -> empty .)
    ELSE            reduce using rule 63 (statement -> empty .)


state 234

    (48) block -> TAB f_addTab moreTabs statement . moreStatements
    (46) moreStatements -> . empty
    (47) moreStatements -> . TAB f_addTab moreTabs statement moreStatements
    (3) empty -> .

  ! shift/reduce conflict for TAB resolved as shift
    TAB             shift and go to state 251
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)
    LOOP            reduce using rule 3 (empty -> .)
    ELSE            reduce using rule 3 (empty -> .)

  ! TAB             [ reduce using rule 3 (empty -> .) ]

    empty                          shift and go to state 252
    moreStatements                 shift and go to state 253

state 235

    (60) statement -> cycle .

    TAB             reduce using rule 60 (statement -> cycle .)
    DEF             reduce using rule 60 (statement -> cycle .)
    $end            reduce using rule 60 (statement -> cycle .)
    LOOP            reduce using rule 60 (statement -> cycle .)
    ELSE            reduce using rule 60 (statement -> cycle .)


state 236

    (57) statement -> assign .

    TAB             reduce using rule 57 (statement -> assign .)
    DEF             reduce using rule 57 (statement -> assign .)
    $end            reduce using rule 57 (statement -> assign .)
    LOOP            reduce using rule 57 (statement -> assign .)
    ELSE            reduce using rule 57 (statement -> assign .)


state 237

    (50) moreTabs -> TAB f_addTab . moreTabs
    (49) moreTabs -> . empty
    (50) moreTabs -> . TAB f_addTab moreTabs
    (51) moreTabs -> . NEWLINE f_resetTab TAB f_addTab moreTabs
    (3) empty -> .

  ! shift/reduce conflict for TAB resolved as shift
    TAB             shift and go to state 221
    NEWLINE         shift and go to state 222
    RETURN          reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)
    WHILE           reduce using rule 3 (empty -> .)
    IF              reduce using rule 3 (empty -> .)
    DO              reduce using rule 3 (empty -> .)
    BOOL            reduce using rule 3 (empty -> .)
    INT             reduce using rule 3 (empty -> .)
    FLOAT           reduce using rule 3 (empty -> .)
    STRING          reduce using rule 3 (empty -> .)
    IMAGE           reduce using rule 3 (empty -> .)
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)
    LOOP            reduce using rule 3 (empty -> .)
    ELSE            reduce using rule 3 (empty -> .)

  ! TAB             [ reduce using rule 3 (empty -> .) ]

    empty                          shift and go to state 223
    moreTabs                       shift and go to state 254

state 238

    (51) moreTabs -> NEWLINE f_resetTab . TAB f_addTab moreTabs

    TAB             shift and go to state 255


state 239

    (28) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab . block f_endModule functions
    (48) block -> . TAB f_addTab moreTabs statement moreStatements

    TAB             shift and go to state 200

    block                          shift and go to state 256

state 240

    (42) moreAssign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE . f_resetTab f_generateEqual moreAssign
    (54) f_resetTab -> .

    ID              reduce using rule 54 (f_resetTab -> .)
    DEF             reduce using rule 54 (f_resetTab -> .)
    $end            reduce using rule 54 (f_resetTab -> .)
    TAB             reduce using rule 54 (f_resetTab -> .)
    LOOP            reduce using rule 54 (f_resetTab -> .)
    ELSE            reduce using rule 54 (f_resetTab -> .)

    f_resetTab                     shift and go to state 257

state 241

    (32) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab . block f_endModule functions
    (48) block -> . TAB f_addTab moreTabs statement moreStatements

    TAB             shift and go to state 200

    block                          shift and go to state 258

state 242

    (30) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab . block f_endModule functions
    (48) block -> . TAB f_addTab moreTabs statement moreStatements

    TAB             shift and go to state 200

    block                          shift and go to state 259

state 243

    (70) doCycle -> DO . f_pushDo COLON NEWLINE f_resetTab f_incTab block LOOP f_isDoWhile f_isCondition expression NEWLINE f_resetTab
    (72) f_pushDo -> .

    COLON           reduce using rule 72 (f_pushDo -> .)

    f_pushDo                       shift and go to state 260

state 244

    (62) statement -> f_checkTab RETURN . f_isReturn expression f_return NEWLINE f_resetTab
    (64) f_isReturn -> .

    LPAREN          reduce using rule 64 (f_isReturn -> .)
    ID              reduce using rule 64 (f_isReturn -> .)
    C_BOOL          reduce using rule 64 (f_isReturn -> .)
    C_INT           reduce using rule 64 (f_isReturn -> .)
    C_FLOAT         reduce using rule 64 (f_isReturn -> .)
    C_STRING        reduce using rule 64 (f_isReturn -> .)

    f_isReturn                     shift and go to state 261

state 245

    (61) statement -> f_checkTab funct . NEWLINE f_resetTab

    NEWLINE         shift and go to state 262


state 246

    (66) cycle -> f_checkTab WHILE . f_isCondition expression COLON NEWLINE f_resetTab f_incTab block
    (74) f_isCondition -> .

    LPAREN          reduce using rule 74 (f_isCondition -> .)
    ID              reduce using rule 74 (f_isCondition -> .)
    C_BOOL          reduce using rule 74 (f_isCondition -> .)
    C_INT           reduce using rule 74 (f_isCondition -> .)
    C_FLOAT         reduce using rule 74 (f_isCondition -> .)
    C_STRING        reduce using rule 74 (f_isCondition -> .)

    f_isCondition                  shift and go to state 263

state 247

    (59) statement -> f_checkTab doCycle .

    TAB             reduce using rule 59 (statement -> f_checkTab doCycle .)
    DEF             reduce using rule 59 (statement -> f_checkTab doCycle .)
    $end            reduce using rule 59 (statement -> f_checkTab doCycle .)
    LOOP            reduce using rule 59 (statement -> f_checkTab doCycle .)
    ELSE            reduce using rule 59 (statement -> f_checkTab doCycle .)


state 248

    (40) assign -> f_checkTab ID . f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign
    (75) funct -> ID . f_checkProc LPAREN RPAREN
    (76) funct -> ID . f_checkProc LPAREN expression f_genParam expressionList RPAREN
    (45) f_checkID -> .
    (77) f_checkProc -> .

    EQUAL           reduce using rule 45 (f_checkID -> .)
    LPAREN          reduce using rule 77 (f_checkProc -> .)

    f_checkProc                    shift and go to state 104
    f_checkID                      shift and go to state 52

state 249

    (58) statement -> f_checkTab condition .

    TAB             reduce using rule 58 (statement -> f_checkTab condition .)
    DEF             reduce using rule 58 (statement -> f_checkTab condition .)
    $end            reduce using rule 58 (statement -> f_checkTab condition .)
    LOOP            reduce using rule 58 (statement -> f_checkTab condition .)
    ELSE            reduce using rule 58 (statement -> f_checkTab condition .)


state 250

    (67) condition -> IF . f_isCondition expression COLON NEWLINE f_resetTab f_incTab block
    (68) condition -> IF . f_isCondition expression COLON NEWLINE f_resetTab f_incTab block ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block
    (74) f_isCondition -> .

    LPAREN          reduce using rule 74 (f_isCondition -> .)
    ID              reduce using rule 74 (f_isCondition -> .)
    C_BOOL          reduce using rule 74 (f_isCondition -> .)
    C_INT           reduce using rule 74 (f_isCondition -> .)
    C_FLOAT         reduce using rule 74 (f_isCondition -> .)
    C_STRING        reduce using rule 74 (f_isCondition -> .)

    f_isCondition                  shift and go to state 264

state 251

    (47) moreStatements -> TAB . f_addTab moreTabs statement moreStatements
    (53) f_addTab -> .

    TAB             reduce using rule 53 (f_addTab -> .)
    NEWLINE         reduce using rule 53 (f_addTab -> .)
    RETURN          reduce using rule 53 (f_addTab -> .)
    ID              reduce using rule 53 (f_addTab -> .)
    WHILE           reduce using rule 53 (f_addTab -> .)
    IF              reduce using rule 53 (f_addTab -> .)
    DO              reduce using rule 53 (f_addTab -> .)
    BOOL            reduce using rule 53 (f_addTab -> .)
    INT             reduce using rule 53 (f_addTab -> .)
    FLOAT           reduce using rule 53 (f_addTab -> .)
    STRING          reduce using rule 53 (f_addTab -> .)
    IMAGE           reduce using rule 53 (f_addTab -> .)
    DEF             reduce using rule 53 (f_addTab -> .)
    $end            reduce using rule 53 (f_addTab -> .)
    LOOP            reduce using rule 53 (f_addTab -> .)
    ELSE            reduce using rule 53 (f_addTab -> .)

    f_addTab                       shift and go to state 265

state 252

    (46) moreStatements -> empty .

    TAB             reduce using rule 46 (moreStatements -> empty .)
    DEF             reduce using rule 46 (moreStatements -> empty .)
    $end            reduce using rule 46 (moreStatements -> empty .)
    LOOP            reduce using rule 46 (moreStatements -> empty .)
    ELSE            reduce using rule 46 (moreStatements -> empty .)


state 253

    (48) block -> TAB f_addTab moreTabs statement moreStatements .

    LOOP            reduce using rule 48 (block -> TAB f_addTab moreTabs statement moreStatements .)
    DEF             reduce using rule 48 (block -> TAB f_addTab moreTabs statement moreStatements .)
    $end            reduce using rule 48 (block -> TAB f_addTab moreTabs statement moreStatements .)
    TAB             reduce using rule 48 (block -> TAB f_addTab moreTabs statement moreStatements .)
    ELSE            reduce using rule 48 (block -> TAB f_addTab moreTabs statement moreStatements .)


state 254

    (50) moreTabs -> TAB f_addTab moreTabs .

    TAB             reduce using rule 50 (moreTabs -> TAB f_addTab moreTabs .)
    RETURN          reduce using rule 50 (moreTabs -> TAB f_addTab moreTabs .)
    ID              reduce using rule 50 (moreTabs -> TAB f_addTab moreTabs .)
    WHILE           reduce using rule 50 (moreTabs -> TAB f_addTab moreTabs .)
    IF              reduce using rule 50 (moreTabs -> TAB f_addTab moreTabs .)
    DO              reduce using rule 50 (moreTabs -> TAB f_addTab moreTabs .)
    BOOL            reduce using rule 50 (moreTabs -> TAB f_addTab moreTabs .)
    INT             reduce using rule 50 (moreTabs -> TAB f_addTab moreTabs .)
    FLOAT           reduce using rule 50 (moreTabs -> TAB f_addTab moreTabs .)
    STRING          reduce using rule 50 (moreTabs -> TAB f_addTab moreTabs .)
    IMAGE           reduce using rule 50 (moreTabs -> TAB f_addTab moreTabs .)
    DEF             reduce using rule 50 (moreTabs -> TAB f_addTab moreTabs .)
    $end            reduce using rule 50 (moreTabs -> TAB f_addTab moreTabs .)
    LOOP            reduce using rule 50 (moreTabs -> TAB f_addTab moreTabs .)
    ELSE            reduce using rule 50 (moreTabs -> TAB f_addTab moreTabs .)


state 255

    (51) moreTabs -> NEWLINE f_resetTab TAB . f_addTab moreTabs
    (53) f_addTab -> .

    TAB             reduce using rule 53 (f_addTab -> .)
    NEWLINE         reduce using rule 53 (f_addTab -> .)
    RETURN          reduce using rule 53 (f_addTab -> .)
    ID              reduce using rule 53 (f_addTab -> .)
    WHILE           reduce using rule 53 (f_addTab -> .)
    IF              reduce using rule 53 (f_addTab -> .)
    DO              reduce using rule 53 (f_addTab -> .)
    BOOL            reduce using rule 53 (f_addTab -> .)
    INT             reduce using rule 53 (f_addTab -> .)
    FLOAT           reduce using rule 53 (f_addTab -> .)
    STRING          reduce using rule 53 (f_addTab -> .)
    IMAGE           reduce using rule 53 (f_addTab -> .)
    DEF             reduce using rule 53 (f_addTab -> .)
    $end            reduce using rule 53 (f_addTab -> .)
    LOOP            reduce using rule 53 (f_addTab -> .)
    ELSE            reduce using rule 53 (f_addTab -> .)

    f_addTab                       shift and go to state 266

state 256

    (28) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block . f_endModule functions
    (35) f_endModule -> .

    DEF             reduce using rule 35 (f_endModule -> .)
    $end            reduce using rule 35 (f_endModule -> .)

    f_endModule                    shift and go to state 267

state 257

    (42) moreAssign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab . f_generateEqual moreAssign
    (44) f_generateEqual -> .

    ID              reduce using rule 44 (f_generateEqual -> .)
    DEF             reduce using rule 44 (f_generateEqual -> .)
    $end            reduce using rule 44 (f_generateEqual -> .)
    TAB             reduce using rule 44 (f_generateEqual -> .)
    LOOP            reduce using rule 44 (f_generateEqual -> .)
    ELSE            reduce using rule 44 (f_generateEqual -> .)

    f_generateEqual                shift and go to state 268

state 258

    (32) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block . f_endModule functions
    (35) f_endModule -> .

    DEF             reduce using rule 35 (f_endModule -> .)
    $end            reduce using rule 35 (f_endModule -> .)

    f_endModule                    shift and go to state 269

state 259

    (30) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block . f_endModule functions
    (35) f_endModule -> .

    DEF             reduce using rule 35 (f_endModule -> .)
    $end            reduce using rule 35 (f_endModule -> .)

    f_endModule                    shift and go to state 270

state 260

    (70) doCycle -> DO f_pushDo . COLON NEWLINE f_resetTab f_incTab block LOOP f_isDoWhile f_isCondition expression NEWLINE f_resetTab

    COLON           shift and go to state 271


state 261

    (62) statement -> f_checkTab RETURN f_isReturn . expression f_return NEWLINE f_resetTab
    (81) expression -> . exp
    (82) expression -> . exp compareToken exp f_popComparation
    (90) exp -> . term moreTerms
    (95) term -> . factor moreFactors
    (100) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (101) factor -> . cvar
    (102) factor -> . funct
    (106) cvar -> . ID f_isID
    (107) cvar -> . C_BOOL f_isConst
    (108) cvar -> . C_INT f_isConst
    (109) cvar -> . C_FLOAT f_isConst
    (110) cvar -> . C_STRING f_isConst
    (75) funct -> . ID f_checkProc LPAREN RPAREN
    (76) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 83
    ID              shift and go to state 85
    C_BOOL          shift and go to state 81
    C_INT           shift and go to state 84
    C_FLOAT         shift and go to state 79
    C_STRING        shift and go to state 86

    term                           shift and go to state 87
    funct                          shift and go to state 80
    exp                            shift and go to state 88
    factor                         shift and go to state 82
    cvar                           shift and go to state 78
    expression                     shift and go to state 272

state 262

    (61) statement -> f_checkTab funct NEWLINE . f_resetTab
    (54) f_resetTab -> .

    TAB             reduce using rule 54 (f_resetTab -> .)
    DEF             reduce using rule 54 (f_resetTab -> .)
    $end            reduce using rule 54 (f_resetTab -> .)
    LOOP            reduce using rule 54 (f_resetTab -> .)
    ELSE            reduce using rule 54 (f_resetTab -> .)

    f_resetTab                     shift and go to state 273

state 263

    (66) cycle -> f_checkTab WHILE f_isCondition . expression COLON NEWLINE f_resetTab f_incTab block
    (81) expression -> . exp
    (82) expression -> . exp compareToken exp f_popComparation
    (90) exp -> . term moreTerms
    (95) term -> . factor moreFactors
    (100) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (101) factor -> . cvar
    (102) factor -> . funct
    (106) cvar -> . ID f_isID
    (107) cvar -> . C_BOOL f_isConst
    (108) cvar -> . C_INT f_isConst
    (109) cvar -> . C_FLOAT f_isConst
    (110) cvar -> . C_STRING f_isConst
    (75) funct -> . ID f_checkProc LPAREN RPAREN
    (76) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 83
    ID              shift and go to state 85
    C_BOOL          shift and go to state 81
    C_INT           shift and go to state 84
    C_FLOAT         shift and go to state 79
    C_STRING        shift and go to state 86

    cvar                           shift and go to state 78
    funct                          shift and go to state 80
    factor                         shift and go to state 82
    term                           shift and go to state 87
    exp                            shift and go to state 88
    expression                     shift and go to state 274

state 264

    (67) condition -> IF f_isCondition . expression COLON NEWLINE f_resetTab f_incTab block
    (68) condition -> IF f_isCondition . expression COLON NEWLINE f_resetTab f_incTab block ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block
    (81) expression -> . exp
    (82) expression -> . exp compareToken exp f_popComparation
    (90) exp -> . term moreTerms
    (95) term -> . factor moreFactors
    (100) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (101) factor -> . cvar
    (102) factor -> . funct
    (106) cvar -> . ID f_isID
    (107) cvar -> . C_BOOL f_isConst
    (108) cvar -> . C_INT f_isConst
    (109) cvar -> . C_FLOAT f_isConst
    (110) cvar -> . C_STRING f_isConst
    (75) funct -> . ID f_checkProc LPAREN RPAREN
    (76) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 83
    ID              shift and go to state 85
    C_BOOL          shift and go to state 81
    C_INT           shift and go to state 84
    C_FLOAT         shift and go to state 79
    C_STRING        shift and go to state 86

    cvar                           shift and go to state 78
    funct                          shift and go to state 80
    factor                         shift and go to state 82
    term                           shift and go to state 87
    exp                            shift and go to state 88
    expression                     shift and go to state 275

state 265

    (47) moreStatements -> TAB f_addTab . moreTabs statement moreStatements
    (49) moreTabs -> . empty
    (50) moreTabs -> . TAB f_addTab moreTabs
    (51) moreTabs -> . NEWLINE f_resetTab TAB f_addTab moreTabs
    (3) empty -> .

  ! shift/reduce conflict for TAB resolved as shift
    TAB             shift and go to state 221
    NEWLINE         shift and go to state 222
    RETURN          reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)
    WHILE           reduce using rule 3 (empty -> .)
    IF              reduce using rule 3 (empty -> .)
    DO              reduce using rule 3 (empty -> .)
    BOOL            reduce using rule 3 (empty -> .)
    INT             reduce using rule 3 (empty -> .)
    FLOAT           reduce using rule 3 (empty -> .)
    STRING          reduce using rule 3 (empty -> .)
    IMAGE           reduce using rule 3 (empty -> .)
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)
    LOOP            reduce using rule 3 (empty -> .)
    ELSE            reduce using rule 3 (empty -> .)

  ! TAB             [ reduce using rule 3 (empty -> .) ]

    moreTabs                       shift and go to state 276
    empty                          shift and go to state 223

state 266

    (51) moreTabs -> NEWLINE f_resetTab TAB f_addTab . moreTabs
    (49) moreTabs -> . empty
    (50) moreTabs -> . TAB f_addTab moreTabs
    (51) moreTabs -> . NEWLINE f_resetTab TAB f_addTab moreTabs
    (3) empty -> .

  ! shift/reduce conflict for TAB resolved as shift
    TAB             shift and go to state 221
    NEWLINE         shift and go to state 222
    RETURN          reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)
    WHILE           reduce using rule 3 (empty -> .)
    IF              reduce using rule 3 (empty -> .)
    DO              reduce using rule 3 (empty -> .)
    BOOL            reduce using rule 3 (empty -> .)
    INT             reduce using rule 3 (empty -> .)
    FLOAT           reduce using rule 3 (empty -> .)
    STRING          reduce using rule 3 (empty -> .)
    IMAGE           reduce using rule 3 (empty -> .)
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)
    LOOP            reduce using rule 3 (empty -> .)
    ELSE            reduce using rule 3 (empty -> .)

  ! TAB             [ reduce using rule 3 (empty -> .) ]

    empty                          shift and go to state 223
    moreTabs                       shift and go to state 277

state 267

    (28) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule . functions
    (27) functions -> . DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (28) functions -> . DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (29) functions -> . DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (30) functions -> . DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (31) functions -> . DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (32) functions -> . DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (33) functions -> . empty
    (3) empty -> .

    DEF             shift and go to state 34
    $end            reduce using rule 3 (empty -> .)

    functions                      shift and go to state 278
    empty                          shift and go to state 36

state 268

    (42) moreAssign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual . moreAssign
    (41) moreAssign -> . empty
    (42) moreAssign -> . f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign
    (3) empty -> .
    (55) f_checkTab -> .

    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)
    TAB             reduce using rule 3 (empty -> .)
    LOOP            reduce using rule 3 (empty -> .)
    ELSE            reduce using rule 3 (empty -> .)
    ID              reduce using rule 55 (f_checkTab -> .)

    f_checkTab                     shift and go to state 164
    moreAssign                     shift and go to state 279
    empty                          shift and go to state 166

state 269

    (32) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule . functions
    (27) functions -> . DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (28) functions -> . DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (29) functions -> . DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (30) functions -> . DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (31) functions -> . DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (32) functions -> . DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (33) functions -> . empty
    (3) empty -> .

    DEF             shift and go to state 34
    $end            reduce using rule 3 (empty -> .)

    functions                      shift and go to state 280
    empty                          shift and go to state 36

state 270

    (30) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule . functions
    (27) functions -> . DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (28) functions -> . DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (29) functions -> . DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (30) functions -> . DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (31) functions -> . DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (32) functions -> . DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (33) functions -> . empty
    (3) empty -> .

    DEF             shift and go to state 34
    $end            reduce using rule 3 (empty -> .)

    functions                      shift and go to state 281
    empty                          shift and go to state 36

state 271

    (70) doCycle -> DO f_pushDo COLON . NEWLINE f_resetTab f_incTab block LOOP f_isDoWhile f_isCondition expression NEWLINE f_resetTab

    NEWLINE         shift and go to state 282


state 272

    (62) statement -> f_checkTab RETURN f_isReturn expression . f_return NEWLINE f_resetTab
    (65) f_return -> .

    NEWLINE         reduce using rule 65 (f_return -> .)

    f_return                       shift and go to state 283

state 273

    (61) statement -> f_checkTab funct NEWLINE f_resetTab .

    TAB             reduce using rule 61 (statement -> f_checkTab funct NEWLINE f_resetTab .)
    DEF             reduce using rule 61 (statement -> f_checkTab funct NEWLINE f_resetTab .)
    $end            reduce using rule 61 (statement -> f_checkTab funct NEWLINE f_resetTab .)
    LOOP            reduce using rule 61 (statement -> f_checkTab funct NEWLINE f_resetTab .)
    ELSE            reduce using rule 61 (statement -> f_checkTab funct NEWLINE f_resetTab .)


state 274

    (66) cycle -> f_checkTab WHILE f_isCondition expression . COLON NEWLINE f_resetTab f_incTab block

    COLON           shift and go to state 284


state 275

    (67) condition -> IF f_isCondition expression . COLON NEWLINE f_resetTab f_incTab block
    (68) condition -> IF f_isCondition expression . COLON NEWLINE f_resetTab f_incTab block ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block

    COLON           shift and go to state 285


state 276

    (47) moreStatements -> TAB f_addTab moreTabs . statement moreStatements
    (56) statement -> . vars
    (57) statement -> . assign
    (58) statement -> . f_checkTab condition
    (59) statement -> . f_checkTab doCycle
    (60) statement -> . cycle
    (61) statement -> . f_checkTab funct NEWLINE f_resetTab
    (62) statement -> . f_checkTab RETURN f_isReturn expression f_return NEWLINE f_resetTab
    (63) statement -> . empty
    (16) vars -> . f_checkTab tipo idList NEWLINE f_resetTab moreVars
    (40) assign -> . f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign
    (55) f_checkTab -> .
    (66) cycle -> . f_checkTab WHILE f_isCondition expression COLON NEWLINE f_resetTab f_incTab block
    (3) empty -> .

    RETURN          reduce using rule 55 (f_checkTab -> .)
    ID              reduce using rule 55 (f_checkTab -> .)
    WHILE           reduce using rule 55 (f_checkTab -> .)
    IF              reduce using rule 55 (f_checkTab -> .)
    DO              reduce using rule 55 (f_checkTab -> .)
    BOOL            reduce using rule 55 (f_checkTab -> .)
    INT             reduce using rule 55 (f_checkTab -> .)
    FLOAT           reduce using rule 55 (f_checkTab -> .)
    STRING          reduce using rule 55 (f_checkTab -> .)
    IMAGE           reduce using rule 55 (f_checkTab -> .)
    TAB             reduce using rule 3 (empty -> .)
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)
    LOOP            reduce using rule 3 (empty -> .)
    ELSE            reduce using rule 3 (empty -> .)

    vars                           shift and go to state 231
    f_checkTab                     shift and go to state 232
    statement                      shift and go to state 286
    empty                          shift and go to state 233
    cycle                          shift and go to state 235
    assign                         shift and go to state 236

state 277

    (51) moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .

    TAB             reduce using rule 51 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    RETURN          reduce using rule 51 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    ID              reduce using rule 51 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    WHILE           reduce using rule 51 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    IF              reduce using rule 51 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    DO              reduce using rule 51 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    BOOL            reduce using rule 51 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    INT             reduce using rule 51 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    FLOAT           reduce using rule 51 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    STRING          reduce using rule 51 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    IMAGE           reduce using rule 51 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    DEF             reduce using rule 51 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    $end            reduce using rule 51 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    LOOP            reduce using rule 51 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    ELSE            reduce using rule 51 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)


state 278

    (28) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions .

    $end            reduce using rule 28 (functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions .)


state 279

    (42) moreAssign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign .

    DEF             reduce using rule 42 (moreAssign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign .)
    $end            reduce using rule 42 (moreAssign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign .)
    TAB             reduce using rule 42 (moreAssign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign .)
    LOOP            reduce using rule 42 (moreAssign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign .)
    ELSE            reduce using rule 42 (moreAssign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign .)


state 280

    (32) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions .

    $end            reduce using rule 32 (functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions .)


state 281

    (30) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions .

    $end            reduce using rule 30 (functions -> DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions .)


state 282

    (70) doCycle -> DO f_pushDo COLON NEWLINE . f_resetTab f_incTab block LOOP f_isDoWhile f_isCondition expression NEWLINE f_resetTab
    (54) f_resetTab -> .

    TAB             reduce using rule 54 (f_resetTab -> .)

    f_resetTab                     shift and go to state 287

state 283

    (62) statement -> f_checkTab RETURN f_isReturn expression f_return . NEWLINE f_resetTab

    NEWLINE         shift and go to state 288


state 284

    (66) cycle -> f_checkTab WHILE f_isCondition expression COLON . NEWLINE f_resetTab f_incTab block

    NEWLINE         shift and go to state 289


state 285

    (67) condition -> IF f_isCondition expression COLON . NEWLINE f_resetTab f_incTab block
    (68) condition -> IF f_isCondition expression COLON . NEWLINE f_resetTab f_incTab block ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block

    NEWLINE         shift and go to state 290


state 286

    (47) moreStatements -> TAB f_addTab moreTabs statement . moreStatements
    (46) moreStatements -> . empty
    (47) moreStatements -> . TAB f_addTab moreTabs statement moreStatements
    (3) empty -> .

  ! shift/reduce conflict for TAB resolved as shift
    TAB             shift and go to state 251
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)
    LOOP            reduce using rule 3 (empty -> .)
    ELSE            reduce using rule 3 (empty -> .)

  ! TAB             [ reduce using rule 3 (empty -> .) ]

    empty                          shift and go to state 252
    moreStatements                 shift and go to state 291

state 287

    (70) doCycle -> DO f_pushDo COLON NEWLINE f_resetTab . f_incTab block LOOP f_isDoWhile f_isCondition expression NEWLINE f_resetTab
    (52) f_incTab -> .

    TAB             reduce using rule 52 (f_incTab -> .)

    f_incTab                       shift and go to state 292

state 288

    (62) statement -> f_checkTab RETURN f_isReturn expression f_return NEWLINE . f_resetTab
    (54) f_resetTab -> .

    TAB             reduce using rule 54 (f_resetTab -> .)
    DEF             reduce using rule 54 (f_resetTab -> .)
    $end            reduce using rule 54 (f_resetTab -> .)
    LOOP            reduce using rule 54 (f_resetTab -> .)
    ELSE            reduce using rule 54 (f_resetTab -> .)

    f_resetTab                     shift and go to state 293

state 289

    (66) cycle -> f_checkTab WHILE f_isCondition expression COLON NEWLINE . f_resetTab f_incTab block
    (54) f_resetTab -> .

    TAB             reduce using rule 54 (f_resetTab -> .)

    f_resetTab                     shift and go to state 294

state 290

    (67) condition -> IF f_isCondition expression COLON NEWLINE . f_resetTab f_incTab block
    (68) condition -> IF f_isCondition expression COLON NEWLINE . f_resetTab f_incTab block ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block
    (54) f_resetTab -> .

    TAB             reduce using rule 54 (f_resetTab -> .)

    f_resetTab                     shift and go to state 295

state 291

    (47) moreStatements -> TAB f_addTab moreTabs statement moreStatements .

    TAB             reduce using rule 47 (moreStatements -> TAB f_addTab moreTabs statement moreStatements .)
    DEF             reduce using rule 47 (moreStatements -> TAB f_addTab moreTabs statement moreStatements .)
    $end            reduce using rule 47 (moreStatements -> TAB f_addTab moreTabs statement moreStatements .)
    LOOP            reduce using rule 47 (moreStatements -> TAB f_addTab moreTabs statement moreStatements .)
    ELSE            reduce using rule 47 (moreStatements -> TAB f_addTab moreTabs statement moreStatements .)


state 292

    (70) doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab . block LOOP f_isDoWhile f_isCondition expression NEWLINE f_resetTab
    (48) block -> . TAB f_addTab moreTabs statement moreStatements

    TAB             shift and go to state 200

    block                          shift and go to state 296

state 293

    (62) statement -> f_checkTab RETURN f_isReturn expression f_return NEWLINE f_resetTab .

    TAB             reduce using rule 62 (statement -> f_checkTab RETURN f_isReturn expression f_return NEWLINE f_resetTab .)
    DEF             reduce using rule 62 (statement -> f_checkTab RETURN f_isReturn expression f_return NEWLINE f_resetTab .)
    $end            reduce using rule 62 (statement -> f_checkTab RETURN f_isReturn expression f_return NEWLINE f_resetTab .)
    LOOP            reduce using rule 62 (statement -> f_checkTab RETURN f_isReturn expression f_return NEWLINE f_resetTab .)
    ELSE            reduce using rule 62 (statement -> f_checkTab RETURN f_isReturn expression f_return NEWLINE f_resetTab .)


state 294

    (66) cycle -> f_checkTab WHILE f_isCondition expression COLON NEWLINE f_resetTab . f_incTab block
    (52) f_incTab -> .

    TAB             reduce using rule 52 (f_incTab -> .)

    f_incTab                       shift and go to state 297

state 295

    (67) condition -> IF f_isCondition expression COLON NEWLINE f_resetTab . f_incTab block
    (68) condition -> IF f_isCondition expression COLON NEWLINE f_resetTab . f_incTab block ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block
    (52) f_incTab -> .

    TAB             reduce using rule 52 (f_incTab -> .)

    f_incTab                       shift and go to state 298

state 296

    (70) doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block . LOOP f_isDoWhile f_isCondition expression NEWLINE f_resetTab

    LOOP            shift and go to state 299


state 297

    (66) cycle -> f_checkTab WHILE f_isCondition expression COLON NEWLINE f_resetTab f_incTab . block
    (48) block -> . TAB f_addTab moreTabs statement moreStatements

    TAB             shift and go to state 200

    block                          shift and go to state 300

state 298

    (67) condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab . block
    (68) condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab . block ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block
    (48) block -> . TAB f_addTab moreTabs statement moreStatements

    TAB             shift and go to state 200

    block                          shift and go to state 301

state 299

    (70) doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block LOOP . f_isDoWhile f_isCondition expression NEWLINE f_resetTab
    (73) f_isDoWhile -> .

    LPAREN          reduce using rule 73 (f_isDoWhile -> .)
    ID              reduce using rule 73 (f_isDoWhile -> .)
    C_BOOL          reduce using rule 73 (f_isDoWhile -> .)
    C_INT           reduce using rule 73 (f_isDoWhile -> .)
    C_FLOAT         reduce using rule 73 (f_isDoWhile -> .)
    C_STRING        reduce using rule 73 (f_isDoWhile -> .)

    f_isDoWhile                    shift and go to state 302

state 300

    (66) cycle -> f_checkTab WHILE f_isCondition expression COLON NEWLINE f_resetTab f_incTab block .

    TAB             reduce using rule 66 (cycle -> f_checkTab WHILE f_isCondition expression COLON NEWLINE f_resetTab f_incTab block .)
    DEF             reduce using rule 66 (cycle -> f_checkTab WHILE f_isCondition expression COLON NEWLINE f_resetTab f_incTab block .)
    $end            reduce using rule 66 (cycle -> f_checkTab WHILE f_isCondition expression COLON NEWLINE f_resetTab f_incTab block .)
    LOOP            reduce using rule 66 (cycle -> f_checkTab WHILE f_isCondition expression COLON NEWLINE f_resetTab f_incTab block .)
    ELSE            reduce using rule 66 (cycle -> f_checkTab WHILE f_isCondition expression COLON NEWLINE f_resetTab f_incTab block .)


state 301

    (67) condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block .
    (68) condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block . ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block

  ! shift/reduce conflict for ELSE resolved as shift
    TAB             reduce using rule 67 (condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block .)
    DEF             reduce using rule 67 (condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block .)
    $end            reduce using rule 67 (condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block .)
    LOOP            reduce using rule 67 (condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block .)
    ELSE            shift and go to state 303

  ! ELSE            [ reduce using rule 67 (condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block .) ]


state 302

    (70) doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block LOOP f_isDoWhile . f_isCondition expression NEWLINE f_resetTab
    (74) f_isCondition -> .

    LPAREN          reduce using rule 74 (f_isCondition -> .)
    ID              reduce using rule 74 (f_isCondition -> .)
    C_BOOL          reduce using rule 74 (f_isCondition -> .)
    C_INT           reduce using rule 74 (f_isCondition -> .)
    C_FLOAT         reduce using rule 74 (f_isCondition -> .)
    C_STRING        reduce using rule 74 (f_isCondition -> .)

    f_isCondition                  shift and go to state 304

state 303

    (68) condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block ELSE . f_popIf COLON NEWLINE f_resetTab f_incTab block
    (71) f_popIf -> .

    COLON           reduce using rule 71 (f_popIf -> .)

    f_popIf                        shift and go to state 305

state 304

    (70) doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block LOOP f_isDoWhile f_isCondition . expression NEWLINE f_resetTab
    (81) expression -> . exp
    (82) expression -> . exp compareToken exp f_popComparation
    (90) exp -> . term moreTerms
    (95) term -> . factor moreFactors
    (100) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (101) factor -> . cvar
    (102) factor -> . funct
    (106) cvar -> . ID f_isID
    (107) cvar -> . C_BOOL f_isConst
    (108) cvar -> . C_INT f_isConst
    (109) cvar -> . C_FLOAT f_isConst
    (110) cvar -> . C_STRING f_isConst
    (75) funct -> . ID f_checkProc LPAREN RPAREN
    (76) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 83
    ID              shift and go to state 85
    C_BOOL          shift and go to state 81
    C_INT           shift and go to state 84
    C_FLOAT         shift and go to state 79
    C_STRING        shift and go to state 86

    funct                          shift and go to state 80
    cvar                           shift and go to state 78
    factor                         shift and go to state 82
    term                           shift and go to state 87
    exp                            shift and go to state 88
    expression                     shift and go to state 306

state 305

    (68) condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block ELSE f_popIf . COLON NEWLINE f_resetTab f_incTab block

    COLON           shift and go to state 307


state 306

    (70) doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block LOOP f_isDoWhile f_isCondition expression . NEWLINE f_resetTab

    NEWLINE         shift and go to state 308


state 307

    (68) condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block ELSE f_popIf COLON . NEWLINE f_resetTab f_incTab block

    NEWLINE         shift and go to state 309


state 308

    (70) doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block LOOP f_isDoWhile f_isCondition expression NEWLINE . f_resetTab
    (54) f_resetTab -> .

    TAB             reduce using rule 54 (f_resetTab -> .)
    DEF             reduce using rule 54 (f_resetTab -> .)
    $end            reduce using rule 54 (f_resetTab -> .)
    LOOP            reduce using rule 54 (f_resetTab -> .)
    ELSE            reduce using rule 54 (f_resetTab -> .)

    f_resetTab                     shift and go to state 310

state 309

    (68) condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block ELSE f_popIf COLON NEWLINE . f_resetTab f_incTab block
    (54) f_resetTab -> .

    TAB             reduce using rule 54 (f_resetTab -> .)

    f_resetTab                     shift and go to state 311

state 310

    (70) doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block LOOP f_isDoWhile f_isCondition expression NEWLINE f_resetTab .

    TAB             reduce using rule 70 (doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block LOOP f_isDoWhile f_isCondition expression NEWLINE f_resetTab .)
    DEF             reduce using rule 70 (doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block LOOP f_isDoWhile f_isCondition expression NEWLINE f_resetTab .)
    $end            reduce using rule 70 (doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block LOOP f_isDoWhile f_isCondition expression NEWLINE f_resetTab .)
    LOOP            reduce using rule 70 (doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block LOOP f_isDoWhile f_isCondition expression NEWLINE f_resetTab .)
    ELSE            reduce using rule 70 (doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block LOOP f_isDoWhile f_isCondition expression NEWLINE f_resetTab .)


state 311

    (68) condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block ELSE f_popIf COLON NEWLINE f_resetTab . f_incTab block
    (52) f_incTab -> .

    TAB             reduce using rule 52 (f_incTab -> .)

    f_incTab                       shift and go to state 312

state 312

    (68) condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block ELSE f_popIf COLON NEWLINE f_resetTab f_incTab . block
    (48) block -> . TAB f_addTab moreTabs statement moreStatements

    TAB             shift and go to state 200

    block                          shift and go to state 313

state 313

    (68) condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block .

    TAB             reduce using rule 68 (condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block .)
    DEF             reduce using rule 68 (condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block .)
    $end            reduce using rule 68 (condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block .)
    LOOP            reduce using rule 68 (condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block .)
    ELSE            reduce using rule 68 (condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for TAB in state 210 resolved as shift
WARNING: shift/reduce conflict for TAB in state 234 resolved as shift
WARNING: shift/reduce conflict for TAB in state 237 resolved as shift
WARNING: shift/reduce conflict for TAB in state 265 resolved as shift
WARNING: shift/reduce conflict for TAB in state 266 resolved as shift
WARNING: shift/reduce conflict for TAB in state 286 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 301 resolved as shift
