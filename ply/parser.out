Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    PERIOD
    AND
    NOT
    OR

Grammar

Rule 0     S' -> program
Rule 1     program -> programName hardware vars assign functions
Rule 2     programName -> PROGRAM ID NEWLINE
Rule 3     empty -> <empty>
Rule 4     hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration
Rule 5     camDeclaration -> empty
Rule 6     camDeclaration -> CAM WEBCAM COLON ID NEWLINE
Rule 7     camDeclaration -> CAM PICAM COLON ID NEWLINE
Rule 8     inputsDeclaration -> empty
Rule 9     inputsDeclaration -> INPUT f_saveType pinList NEWLINE
Rule 10    outputsDeclaration -> empty
Rule 11    outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE
Rule 12    pwmDeclaration -> empty
Rule 13    pwmDeclaration -> PWM f_saveType pinList NEWLINE
Rule 14    pinList -> C_INT COLON ID
Rule 15    pinList -> C_INT COLON ID COMMA pinList
Rule 16    vars -> f_checkTab tipo idList NEWLINE f_resetTab vars
Rule 17    vars -> empty
Rule 18    f_saveType -> <empty>
Rule 19    idList -> ID
Rule 20    idList -> ID COMMA idList
Rule 21    tipo -> BOOL f_saveType
Rule 22    tipo -> INT f_saveType
Rule 23    tipo -> FLOAT f_saveType
Rule 24    tipo -> STRING f_saveType
Rule 25    tipo -> IMAGE f_saveType
Rule 26    functions -> DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
Rule 27    functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
Rule 28    functions -> DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
Rule 29    functions -> DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
Rule 30    functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
Rule 31    functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
Rule 32    functions -> empty
Rule 33    f_setVoid -> <empty>
Rule 34    f_endModule -> <empty>
Rule 35    f_saveModule -> <empty>
Rule 36    parameterList -> empty
Rule 37    parameterList -> COMMA tipo ID f_addToParam parameterList
Rule 38    f_addToParam -> <empty>
Rule 39    assign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual assign
Rule 40    assign -> empty
Rule 41    f_isAssign -> <empty>
Rule 42    f_generateEqual -> <empty>
Rule 43    f_checkID -> <empty>
Rule 44    block -> empty
Rule 45    block -> TAB f_addTab moreTabs statement moreStatements
Rule 46    moreStatements -> empty
Rule 47    moreStatements -> TAB f_addTab moreTabs statement moreStatements
Rule 48    moreTabs -> empty
Rule 49    moreTabs -> TAB f_addTab moreTabs
Rule 50    moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs
Rule 51    f_incTab -> <empty>
Rule 52    f_addTab -> <empty>
Rule 53    f_resetTab -> <empty>
Rule 54    f_checkTab -> <empty>
Rule 55    statement -> vars
Rule 56    statement -> assign
Rule 57    statement -> f_checkTab condition
Rule 58    statement -> f_checkTab cycle
Rule 59    statement -> f_checkTab doCycle
Rule 60    statement -> f_checkTab funct NEWLINE f_resetTab
Rule 61    statement -> f_checkTab RETURN expression f_return NEWLINE f_resetTab
Rule 62    f_return -> <empty>
Rule 63    condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block
Rule 64    condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block
Rule 65    cycle -> WHILE f_isCondition expression COLON NEWLINE f_resetTab f_incTab block
Rule 66    doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block WHILE f_isDoWhile f_isCondition expression NEWLINE f_resetTab
Rule 67    f_popIf -> <empty>
Rule 68    f_pushDo -> <empty>
Rule 69    f_isDoWhile -> <empty>
Rule 70    f_isCondition -> <empty>
Rule 71    funct -> ID f_checkProc LPAREN RPAREN
Rule 72    funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN
Rule 73    f_checkProc -> <empty>
Rule 74    expressionList -> empty
Rule 75    expressionList -> COMMA expression f_genParam expressionList
Rule 76    f_genParam -> <empty>
Rule 77    expression -> exp
Rule 78    expression -> exp compareToken exp f_popComparation
Rule 79    f_popComparation -> <empty>
Rule 80    compareToken -> GREATER_THAN
Rule 81    compareToken -> LESS_THAN
Rule 82    compareToken -> LESS_EQUAL_THAN
Rule 83    compareToken -> GREATER_EQUAL_THAN
Rule 84    compareToken -> NOT_EQUAL_THAN
Rule 85    compareToken -> SAME_AS
Rule 86    exp -> term moreTerms
Rule 87    moreTerms -> empty
Rule 88    moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms
Rule 89    moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms
Rule 90    f_popTerm -> <empty>
Rule 91    term -> factor moreFactors
Rule 92    moreFactors -> empty
Rule 93    moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors
Rule 94    moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors
Rule 95    moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors
Rule 96    factor -> LPAREN f_pushOperator expression RPAREN f_popOperator
Rule 97    factor -> cvar
Rule 98    factor -> funct
Rule 99    f_pushOperator -> <empty>
Rule 100   f_popOperator -> <empty>
Rule 101   f_popFactor -> <empty>
Rule 102   cvar -> ID f_isID
Rule 103   cvar -> C_BOOL f_isConst
Rule 104   cvar -> C_INT f_isConst
Rule 105   cvar -> C_FLOAT f_isConst
Rule 106   cvar -> C_STRING f_isConst
Rule 107   f_isID -> <empty>
Rule 108   f_isConst -> <empty>

Terminals, with rules where they appear

AND                  : 
BOOL                 : 21
CAM                  : 6 7
COLON                : 6 7 14 15 26 27 28 29 30 31 63 64 64 65 66
COMMA                : 15 20 37 75
C_BOOL               : 103
C_FLOAT              : 105
C_INT                : 14 15 104
C_STRING             : 106
DEF                  : 26 27 28 29 30 31
DIVIDE               : 93
DO                   : 66
ELSE                 : 64
EQUAL                : 39
FLOAT                : 23
GREATER_EQUAL_THAN   : 83
GREATER_THAN         : 80
ID                   : 2 6 7 14 15 19 20 26 27 27 28 29 29 31 37 39 71 72 102
IF                   : 63 64
IMAGE                : 25
INPUT                : 9
INT                  : 22
LESS_EQUAL_THAN      : 82
LESS_THAN            : 81
LPAREN               : 26 27 28 29 30 31 71 72 96
MAIN                 : 30 31
MINUS                : 89
MOD                  : 95
NEWLINE              : 2 6 7 9 11 13 16 26 27 28 29 30 31 39 50 60 61 63 64 64 65 66 66
NOT                  : 
NOT_EQUAL_THAN       : 84
OR                   : 
OUTPUT               : 11
PERIOD               : 
PICAM                : 7
PLUS                 : 88
PROGRAM              : 2
PWM                  : 13
RETURN               : 61
RPAREN               : 26 27 28 29 30 31 71 72 96
SAME_AS              : 85
STRING               : 24
TAB                  : 45 47 49 50
TIMES                : 94
VOID                 : 28 29 30 31
WEBCAM               : 6
WHILE                : 65 66
error                : 

Nonterminals, with rules where they appear

assign               : 1 39 56
block                : 26 27 28 29 30 31 63 64 64 65 66
camDeclaration       : 4
compareToken         : 78
condition            : 57
cvar                 : 97
cycle                : 58
doCycle              : 59
empty                : 5 8 10 12 17 32 36 40 44 46 48 74 87 92
exp                  : 77 78 78
expression           : 39 61 63 64 65 66 72 75 96
expressionList       : 72 75
f_addTab             : 45 47 49 50
f_addToParam         : 27 29 31 37
f_checkID            : 39
f_checkProc          : 71 72
f_checkTab           : 16 39 57 58 59 60 61
f_endModule          : 26 27 28 29 30 31
f_genParam           : 72 75
f_generateEqual      : 39
f_incTab             : 26 27 28 29 30 31 63 64 64 65 66
f_isAssign           : 39
f_isCondition        : 63 64 65 66
f_isConst            : 103 104 105 106
f_isDoWhile          : 66
f_isID               : 102
f_popComparation     : 78
f_popFactor          : 93 94 95
f_popIf              : 64
f_popOperator        : 96
f_popTerm            : 88 89
f_pushDo             : 66
f_pushOperator       : 88 89 93 94 95 96
f_resetTab           : 16 26 27 28 29 30 31 39 50 60 61 63 64 64 65 66 66
f_return             : 61
f_saveModule         : 26 27 28 29 30 31
f_saveType           : 9 11 13 21 22 23 24 25
f_setVoid            : 28 29 30 31
factor               : 91 93 94 95
funct                : 60 98
functions            : 1 26 27 28 29 30 31
hardware             : 1
idList               : 16 20
inputsDeclaration    : 4
moreFactors          : 91 93 94 95
moreStatements       : 45 47
moreTabs             : 45 47 49 50
moreTerms            : 86 88 89
outputsDeclaration   : 4
parameterList        : 27 29 31 37
pinList              : 9 11 13 15
program              : 0
programName          : 1
pwmDeclaration       : 4
statement            : 45 47
term                 : 86 88 89
tipo                 : 16 26 27 27 29 31 37
vars                 : 1 16 55

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . programName hardware vars assign functions
    (2) programName -> . PROGRAM ID NEWLINE

    PROGRAM         shift and go to state 3

    program                        shift and go to state 1
    programName                    shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> programName . hardware vars assign functions
    (4) hardware -> . camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration
    (5) camDeclaration -> . empty
    (6) camDeclaration -> . CAM WEBCAM COLON ID NEWLINE
    (7) camDeclaration -> . CAM PICAM COLON ID NEWLINE
    (3) empty -> .

    CAM             shift and go to state 4
    INPUT           reduce using rule 3 (empty -> .)
    OUTPUT          reduce using rule 3 (empty -> .)
    PWM             reduce using rule 3 (empty -> .)
    DEF             reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)
    BOOL            reduce using rule 3 (empty -> .)
    INT             reduce using rule 3 (empty -> .)
    FLOAT           reduce using rule 3 (empty -> .)
    STRING          reduce using rule 3 (empty -> .)
    IMAGE           reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)

    hardware                       shift and go to state 5
    camDeclaration                 shift and go to state 6
    empty                          shift and go to state 7

state 3

    (2) programName -> PROGRAM . ID NEWLINE

    ID              shift and go to state 8


state 4

    (6) camDeclaration -> CAM . WEBCAM COLON ID NEWLINE
    (7) camDeclaration -> CAM . PICAM COLON ID NEWLINE

    WEBCAM          shift and go to state 9
    PICAM           shift and go to state 10


state 5

    (1) program -> programName hardware . vars assign functions
    (16) vars -> . f_checkTab tipo idList NEWLINE f_resetTab vars
    (17) vars -> . empty
    (54) f_checkTab -> .
    (3) empty -> .

    BOOL            reduce using rule 54 (f_checkTab -> .)
    INT             reduce using rule 54 (f_checkTab -> .)
    FLOAT           reduce using rule 54 (f_checkTab -> .)
    STRING          reduce using rule 54 (f_checkTab -> .)
    IMAGE           reduce using rule 54 (f_checkTab -> .)
    DEF             reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)

    vars                           shift and go to state 11
    f_checkTab                     shift and go to state 12
    empty                          shift and go to state 13

state 6

    (4) hardware -> camDeclaration . inputsDeclaration outputsDeclaration pwmDeclaration
    (8) inputsDeclaration -> . empty
    (9) inputsDeclaration -> . INPUT f_saveType pinList NEWLINE
    (3) empty -> .

    INPUT           shift and go to state 15
    OUTPUT          reduce using rule 3 (empty -> .)
    PWM             reduce using rule 3 (empty -> .)
    DEF             reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)
    BOOL            reduce using rule 3 (empty -> .)
    INT             reduce using rule 3 (empty -> .)
    FLOAT           reduce using rule 3 (empty -> .)
    STRING          reduce using rule 3 (empty -> .)
    IMAGE           reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)

    inputsDeclaration              shift and go to state 14
    empty                          shift and go to state 16

state 7

    (5) camDeclaration -> empty .

    INPUT           reduce using rule 5 (camDeclaration -> empty .)
    OUTPUT          reduce using rule 5 (camDeclaration -> empty .)
    PWM             reduce using rule 5 (camDeclaration -> empty .)
    DEF             reduce using rule 5 (camDeclaration -> empty .)
    ID              reduce using rule 5 (camDeclaration -> empty .)
    BOOL            reduce using rule 5 (camDeclaration -> empty .)
    INT             reduce using rule 5 (camDeclaration -> empty .)
    FLOAT           reduce using rule 5 (camDeclaration -> empty .)
    STRING          reduce using rule 5 (camDeclaration -> empty .)
    IMAGE           reduce using rule 5 (camDeclaration -> empty .)
    $end            reduce using rule 5 (camDeclaration -> empty .)


state 8

    (2) programName -> PROGRAM ID . NEWLINE

    NEWLINE         shift and go to state 17


state 9

    (6) camDeclaration -> CAM WEBCAM . COLON ID NEWLINE

    COLON           shift and go to state 18


state 10

    (7) camDeclaration -> CAM PICAM . COLON ID NEWLINE

    COLON           shift and go to state 19


state 11

    (1) program -> programName hardware vars . assign functions
    (39) assign -> . f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual assign
    (40) assign -> . empty
    (54) f_checkTab -> .
    (3) empty -> .

    ID              reduce using rule 54 (f_checkTab -> .)
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)

    f_checkTab                     shift and go to state 20
    assign                         shift and go to state 21
    empty                          shift and go to state 22

state 12

    (16) vars -> f_checkTab . tipo idList NEWLINE f_resetTab vars
    (21) tipo -> . BOOL f_saveType
    (22) tipo -> . INT f_saveType
    (23) tipo -> . FLOAT f_saveType
    (24) tipo -> . STRING f_saveType
    (25) tipo -> . IMAGE f_saveType

    BOOL            shift and go to state 25
    INT             shift and go to state 24
    FLOAT           shift and go to state 23
    STRING          shift and go to state 26
    IMAGE           shift and go to state 27

    tipo                           shift and go to state 28

state 13

    (17) vars -> empty .

    DEF             reduce using rule 17 (vars -> empty .)
    ID              reduce using rule 17 (vars -> empty .)
    $end            reduce using rule 17 (vars -> empty .)
    TAB             reduce using rule 17 (vars -> empty .)
    WHILE           reduce using rule 17 (vars -> empty .)
    ELSE            reduce using rule 17 (vars -> empty .)


state 14

    (4) hardware -> camDeclaration inputsDeclaration . outputsDeclaration pwmDeclaration
    (10) outputsDeclaration -> . empty
    (11) outputsDeclaration -> . OUTPUT f_saveType pinList NEWLINE
    (3) empty -> .

    OUTPUT          shift and go to state 30
    PWM             reduce using rule 3 (empty -> .)
    DEF             reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)
    BOOL            reduce using rule 3 (empty -> .)
    INT             reduce using rule 3 (empty -> .)
    FLOAT           reduce using rule 3 (empty -> .)
    STRING          reduce using rule 3 (empty -> .)
    IMAGE           reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)

    outputsDeclaration             shift and go to state 29
    empty                          shift and go to state 31

state 15

    (9) inputsDeclaration -> INPUT . f_saveType pinList NEWLINE
    (18) f_saveType -> .

    C_INT           reduce using rule 18 (f_saveType -> .)

    f_saveType                     shift and go to state 32

state 16

    (8) inputsDeclaration -> empty .

    OUTPUT          reduce using rule 8 (inputsDeclaration -> empty .)
    PWM             reduce using rule 8 (inputsDeclaration -> empty .)
    DEF             reduce using rule 8 (inputsDeclaration -> empty .)
    ID              reduce using rule 8 (inputsDeclaration -> empty .)
    BOOL            reduce using rule 8 (inputsDeclaration -> empty .)
    INT             reduce using rule 8 (inputsDeclaration -> empty .)
    FLOAT           reduce using rule 8 (inputsDeclaration -> empty .)
    STRING          reduce using rule 8 (inputsDeclaration -> empty .)
    IMAGE           reduce using rule 8 (inputsDeclaration -> empty .)
    $end            reduce using rule 8 (inputsDeclaration -> empty .)


state 17

    (2) programName -> PROGRAM ID NEWLINE .

    CAM             reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)
    DEF             reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)
    ID              reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)
    BOOL            reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)
    INT             reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)
    FLOAT           reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)
    STRING          reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)
    IMAGE           reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)
    INPUT           reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)
    OUTPUT          reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)
    PWM             reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)
    $end            reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)


state 18

    (6) camDeclaration -> CAM WEBCAM COLON . ID NEWLINE

    ID              shift and go to state 33


state 19

    (7) camDeclaration -> CAM PICAM COLON . ID NEWLINE

    ID              shift and go to state 34


state 20

    (39) assign -> f_checkTab . ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual assign

    ID              shift and go to state 35


state 21

    (1) program -> programName hardware vars assign . functions
    (26) functions -> . DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (27) functions -> . DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (28) functions -> . DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (29) functions -> . DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (30) functions -> . DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (31) functions -> . DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (32) functions -> . empty
    (3) empty -> .

    DEF             shift and go to state 36
    $end            reduce using rule 3 (empty -> .)

    functions                      shift and go to state 37
    empty                          shift and go to state 38

state 22

    (40) assign -> empty .

    DEF             reduce using rule 40 (assign -> empty .)
    $end            reduce using rule 40 (assign -> empty .)
    TAB             reduce using rule 40 (assign -> empty .)
    WHILE           reduce using rule 40 (assign -> empty .)
    ELSE            reduce using rule 40 (assign -> empty .)


state 23

    (23) tipo -> FLOAT . f_saveType
    (18) f_saveType -> .

    ID              reduce using rule 18 (f_saveType -> .)

    f_saveType                     shift and go to state 39

state 24

    (22) tipo -> INT . f_saveType
    (18) f_saveType -> .

    ID              reduce using rule 18 (f_saveType -> .)

    f_saveType                     shift and go to state 40

state 25

    (21) tipo -> BOOL . f_saveType
    (18) f_saveType -> .

    ID              reduce using rule 18 (f_saveType -> .)

    f_saveType                     shift and go to state 41

state 26

    (24) tipo -> STRING . f_saveType
    (18) f_saveType -> .

    ID              reduce using rule 18 (f_saveType -> .)

    f_saveType                     shift and go to state 42

state 27

    (25) tipo -> IMAGE . f_saveType
    (18) f_saveType -> .

    ID              reduce using rule 18 (f_saveType -> .)

    f_saveType                     shift and go to state 43

state 28

    (16) vars -> f_checkTab tipo . idList NEWLINE f_resetTab vars
    (19) idList -> . ID
    (20) idList -> . ID COMMA idList

    ID              shift and go to state 45

    idList                         shift and go to state 44

state 29

    (4) hardware -> camDeclaration inputsDeclaration outputsDeclaration . pwmDeclaration
    (12) pwmDeclaration -> . empty
    (13) pwmDeclaration -> . PWM f_saveType pinList NEWLINE
    (3) empty -> .

    PWM             shift and go to state 47
    DEF             reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)
    BOOL            reduce using rule 3 (empty -> .)
    INT             reduce using rule 3 (empty -> .)
    FLOAT           reduce using rule 3 (empty -> .)
    STRING          reduce using rule 3 (empty -> .)
    IMAGE           reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)

    pwmDeclaration                 shift and go to state 46
    empty                          shift and go to state 48

state 30

    (11) outputsDeclaration -> OUTPUT . f_saveType pinList NEWLINE
    (18) f_saveType -> .

    C_INT           reduce using rule 18 (f_saveType -> .)

    f_saveType                     shift and go to state 49

state 31

    (10) outputsDeclaration -> empty .

    PWM             reduce using rule 10 (outputsDeclaration -> empty .)
    DEF             reduce using rule 10 (outputsDeclaration -> empty .)
    ID              reduce using rule 10 (outputsDeclaration -> empty .)
    BOOL            reduce using rule 10 (outputsDeclaration -> empty .)
    INT             reduce using rule 10 (outputsDeclaration -> empty .)
    FLOAT           reduce using rule 10 (outputsDeclaration -> empty .)
    STRING          reduce using rule 10 (outputsDeclaration -> empty .)
    IMAGE           reduce using rule 10 (outputsDeclaration -> empty .)
    $end            reduce using rule 10 (outputsDeclaration -> empty .)


state 32

    (9) inputsDeclaration -> INPUT f_saveType . pinList NEWLINE
    (14) pinList -> . C_INT COLON ID
    (15) pinList -> . C_INT COLON ID COMMA pinList

    C_INT           shift and go to state 51

    pinList                        shift and go to state 50

state 33

    (6) camDeclaration -> CAM WEBCAM COLON ID . NEWLINE

    NEWLINE         shift and go to state 52


state 34

    (7) camDeclaration -> CAM PICAM COLON ID . NEWLINE

    NEWLINE         shift and go to state 53


state 35

    (39) assign -> f_checkTab ID . f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual assign
    (43) f_checkID -> .

    EQUAL           reduce using rule 43 (f_checkID -> .)

    f_checkID                      shift and go to state 54

state 36

    (26) functions -> DEF . tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (27) functions -> DEF . tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (28) functions -> DEF . VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (29) functions -> DEF . VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (30) functions -> DEF . VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (31) functions -> DEF . VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (21) tipo -> . BOOL f_saveType
    (22) tipo -> . INT f_saveType
    (23) tipo -> . FLOAT f_saveType
    (24) tipo -> . STRING f_saveType
    (25) tipo -> . IMAGE f_saveType

    VOID            shift and go to state 55
    BOOL            shift and go to state 25
    INT             shift and go to state 24
    FLOAT           shift and go to state 23
    STRING          shift and go to state 26
    IMAGE           shift and go to state 27

    tipo                           shift and go to state 56

state 37

    (1) program -> programName hardware vars assign functions .

    $end            reduce using rule 1 (program -> programName hardware vars assign functions .)


state 38

    (32) functions -> empty .

    $end            reduce using rule 32 (functions -> empty .)


state 39

    (23) tipo -> FLOAT f_saveType .

    ID              reduce using rule 23 (tipo -> FLOAT f_saveType .)


state 40

    (22) tipo -> INT f_saveType .

    ID              reduce using rule 22 (tipo -> INT f_saveType .)


state 41

    (21) tipo -> BOOL f_saveType .

    ID              reduce using rule 21 (tipo -> BOOL f_saveType .)


state 42

    (24) tipo -> STRING f_saveType .

    ID              reduce using rule 24 (tipo -> STRING f_saveType .)


state 43

    (25) tipo -> IMAGE f_saveType .

    ID              reduce using rule 25 (tipo -> IMAGE f_saveType .)


state 44

    (16) vars -> f_checkTab tipo idList . NEWLINE f_resetTab vars

    NEWLINE         shift and go to state 57


state 45

    (19) idList -> ID .
    (20) idList -> ID . COMMA idList

    NEWLINE         reduce using rule 19 (idList -> ID .)
    COMMA           shift and go to state 58


state 46

    (4) hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .

    DEF             reduce using rule 4 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    ID              reduce using rule 4 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    BOOL            reduce using rule 4 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    INT             reduce using rule 4 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    FLOAT           reduce using rule 4 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    STRING          reduce using rule 4 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    IMAGE           reduce using rule 4 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    $end            reduce using rule 4 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)


state 47

    (13) pwmDeclaration -> PWM . f_saveType pinList NEWLINE
    (18) f_saveType -> .

    C_INT           reduce using rule 18 (f_saveType -> .)

    f_saveType                     shift and go to state 59

state 48

    (12) pwmDeclaration -> empty .

    DEF             reduce using rule 12 (pwmDeclaration -> empty .)
    ID              reduce using rule 12 (pwmDeclaration -> empty .)
    BOOL            reduce using rule 12 (pwmDeclaration -> empty .)
    INT             reduce using rule 12 (pwmDeclaration -> empty .)
    FLOAT           reduce using rule 12 (pwmDeclaration -> empty .)
    STRING          reduce using rule 12 (pwmDeclaration -> empty .)
    IMAGE           reduce using rule 12 (pwmDeclaration -> empty .)
    $end            reduce using rule 12 (pwmDeclaration -> empty .)


state 49

    (11) outputsDeclaration -> OUTPUT f_saveType . pinList NEWLINE
    (14) pinList -> . C_INT COLON ID
    (15) pinList -> . C_INT COLON ID COMMA pinList

    C_INT           shift and go to state 51

    pinList                        shift and go to state 60

state 50

    (9) inputsDeclaration -> INPUT f_saveType pinList . NEWLINE

    NEWLINE         shift and go to state 61


state 51

    (14) pinList -> C_INT . COLON ID
    (15) pinList -> C_INT . COLON ID COMMA pinList

    COLON           shift and go to state 62


state 52

    (6) camDeclaration -> CAM WEBCAM COLON ID NEWLINE .

    INPUT           reduce using rule 6 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    OUTPUT          reduce using rule 6 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    PWM             reduce using rule 6 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    DEF             reduce using rule 6 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    ID              reduce using rule 6 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    BOOL            reduce using rule 6 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    INT             reduce using rule 6 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    FLOAT           reduce using rule 6 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    STRING          reduce using rule 6 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    IMAGE           reduce using rule 6 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    $end            reduce using rule 6 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)


state 53

    (7) camDeclaration -> CAM PICAM COLON ID NEWLINE .

    INPUT           reduce using rule 7 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    OUTPUT          reduce using rule 7 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    PWM             reduce using rule 7 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    DEF             reduce using rule 7 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    ID              reduce using rule 7 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    BOOL            reduce using rule 7 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    INT             reduce using rule 7 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    FLOAT           reduce using rule 7 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    STRING          reduce using rule 7 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    IMAGE           reduce using rule 7 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    $end            reduce using rule 7 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)


state 54

    (39) assign -> f_checkTab ID f_checkID . EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual assign

    EQUAL           shift and go to state 63


state 55

    (28) functions -> DEF VOID . f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (29) functions -> DEF VOID . f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (30) functions -> DEF VOID . f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (31) functions -> DEF VOID . f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (33) f_setVoid -> .

    ID              reduce using rule 33 (f_setVoid -> .)
    MAIN            reduce using rule 33 (f_setVoid -> .)

    f_setVoid                      shift and go to state 64

state 56

    (26) functions -> DEF tipo . ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (27) functions -> DEF tipo . ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    ID              shift and go to state 65


state 57

    (16) vars -> f_checkTab tipo idList NEWLINE . f_resetTab vars
    (53) f_resetTab -> .

    BOOL            reduce using rule 53 (f_resetTab -> .)
    INT             reduce using rule 53 (f_resetTab -> .)
    FLOAT           reduce using rule 53 (f_resetTab -> .)
    STRING          reduce using rule 53 (f_resetTab -> .)
    IMAGE           reduce using rule 53 (f_resetTab -> .)
    DEF             reduce using rule 53 (f_resetTab -> .)
    ID              reduce using rule 53 (f_resetTab -> .)
    $end            reduce using rule 53 (f_resetTab -> .)
    TAB             reduce using rule 53 (f_resetTab -> .)
    WHILE           reduce using rule 53 (f_resetTab -> .)
    ELSE            reduce using rule 53 (f_resetTab -> .)

    f_resetTab                     shift and go to state 66

state 58

    (20) idList -> ID COMMA . idList
    (19) idList -> . ID
    (20) idList -> . ID COMMA idList

    ID              shift and go to state 45

    idList                         shift and go to state 67

state 59

    (13) pwmDeclaration -> PWM f_saveType . pinList NEWLINE
    (14) pinList -> . C_INT COLON ID
    (15) pinList -> . C_INT COLON ID COMMA pinList

    C_INT           shift and go to state 51

    pinList                        shift and go to state 68

state 60

    (11) outputsDeclaration -> OUTPUT f_saveType pinList . NEWLINE

    NEWLINE         shift and go to state 69


state 61

    (9) inputsDeclaration -> INPUT f_saveType pinList NEWLINE .

    OUTPUT          reduce using rule 9 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    PWM             reduce using rule 9 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    DEF             reduce using rule 9 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    ID              reduce using rule 9 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    BOOL            reduce using rule 9 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    INT             reduce using rule 9 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    FLOAT           reduce using rule 9 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    STRING          reduce using rule 9 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    IMAGE           reduce using rule 9 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    $end            reduce using rule 9 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)


state 62

    (14) pinList -> C_INT COLON . ID
    (15) pinList -> C_INT COLON . ID COMMA pinList

    ID              shift and go to state 70


state 63

    (39) assign -> f_checkTab ID f_checkID EQUAL . f_isAssign expression NEWLINE f_resetTab f_generateEqual assign
    (41) f_isAssign -> .

    LPAREN          reduce using rule 41 (f_isAssign -> .)
    ID              reduce using rule 41 (f_isAssign -> .)
    C_BOOL          reduce using rule 41 (f_isAssign -> .)
    C_INT           reduce using rule 41 (f_isAssign -> .)
    C_FLOAT         reduce using rule 41 (f_isAssign -> .)
    C_STRING        reduce using rule 41 (f_isAssign -> .)

    f_isAssign                     shift and go to state 71

state 64

    (28) functions -> DEF VOID f_setVoid . ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (29) functions -> DEF VOID f_setVoid . ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (30) functions -> DEF VOID f_setVoid . MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (31) functions -> DEF VOID f_setVoid . MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    ID              shift and go to state 73
    MAIN            shift and go to state 72


state 65

    (26) functions -> DEF tipo ID . f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (27) functions -> DEF tipo ID . f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (35) f_saveModule -> .

    LPAREN          reduce using rule 35 (f_saveModule -> .)

    f_saveModule                   shift and go to state 74

state 66

    (16) vars -> f_checkTab tipo idList NEWLINE f_resetTab . vars
    (16) vars -> . f_checkTab tipo idList NEWLINE f_resetTab vars
    (17) vars -> . empty
    (54) f_checkTab -> .
    (3) empty -> .

    BOOL            reduce using rule 54 (f_checkTab -> .)
    INT             reduce using rule 54 (f_checkTab -> .)
    FLOAT           reduce using rule 54 (f_checkTab -> .)
    STRING          reduce using rule 54 (f_checkTab -> .)
    IMAGE           reduce using rule 54 (f_checkTab -> .)
    DEF             reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)
    TAB             reduce using rule 3 (empty -> .)
    WHILE           reduce using rule 3 (empty -> .)
    ELSE            reduce using rule 3 (empty -> .)

    vars                           shift and go to state 75
    f_checkTab                     shift and go to state 12
    empty                          shift and go to state 13

state 67

    (20) idList -> ID COMMA idList .

    NEWLINE         reduce using rule 20 (idList -> ID COMMA idList .)


state 68

    (13) pwmDeclaration -> PWM f_saveType pinList . NEWLINE

    NEWLINE         shift and go to state 76


state 69

    (11) outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .

    PWM             reduce using rule 11 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    DEF             reduce using rule 11 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    ID              reduce using rule 11 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    BOOL            reduce using rule 11 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    INT             reduce using rule 11 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    FLOAT           reduce using rule 11 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    STRING          reduce using rule 11 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    IMAGE           reduce using rule 11 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    $end            reduce using rule 11 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)


state 70

    (14) pinList -> C_INT COLON ID .
    (15) pinList -> C_INT COLON ID . COMMA pinList

    NEWLINE         reduce using rule 14 (pinList -> C_INT COLON ID .)
    COMMA           shift and go to state 77


state 71

    (39) assign -> f_checkTab ID f_checkID EQUAL f_isAssign . expression NEWLINE f_resetTab f_generateEqual assign
    (77) expression -> . exp
    (78) expression -> . exp compareToken exp f_popComparation
    (86) exp -> . term moreTerms
    (91) term -> . factor moreFactors
    (96) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (97) factor -> . cvar
    (98) factor -> . funct
    (102) cvar -> . ID f_isID
    (103) cvar -> . C_BOOL f_isConst
    (104) cvar -> . C_INT f_isConst
    (105) cvar -> . C_FLOAT f_isConst
    (106) cvar -> . C_STRING f_isConst
    (71) funct -> . ID f_checkProc LPAREN RPAREN
    (72) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 83
    ID              shift and go to state 85
    C_BOOL          shift and go to state 81
    C_INT           shift and go to state 84
    C_FLOAT         shift and go to state 79
    C_STRING        shift and go to state 86

    cvar                           shift and go to state 78
    funct                          shift and go to state 80
    factor                         shift and go to state 82
    term                           shift and go to state 87
    exp                            shift and go to state 88
    expression                     shift and go to state 89

state 72

    (30) functions -> DEF VOID f_setVoid MAIN . f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (31) functions -> DEF VOID f_setVoid MAIN . f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (35) f_saveModule -> .

    LPAREN          reduce using rule 35 (f_saveModule -> .)

    f_saveModule                   shift and go to state 90

state 73

    (28) functions -> DEF VOID f_setVoid ID . f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (29) functions -> DEF VOID f_setVoid ID . f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (35) f_saveModule -> .

    LPAREN          reduce using rule 35 (f_saveModule -> .)

    f_saveModule                   shift and go to state 91

state 74

    (26) functions -> DEF tipo ID f_saveModule . LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (27) functions -> DEF tipo ID f_saveModule . LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    LPAREN          shift and go to state 92


state 75

    (16) vars -> f_checkTab tipo idList NEWLINE f_resetTab vars .

    DEF             reduce using rule 16 (vars -> f_checkTab tipo idList NEWLINE f_resetTab vars .)
    ID              reduce using rule 16 (vars -> f_checkTab tipo idList NEWLINE f_resetTab vars .)
    $end            reduce using rule 16 (vars -> f_checkTab tipo idList NEWLINE f_resetTab vars .)
    TAB             reduce using rule 16 (vars -> f_checkTab tipo idList NEWLINE f_resetTab vars .)
    WHILE           reduce using rule 16 (vars -> f_checkTab tipo idList NEWLINE f_resetTab vars .)
    ELSE            reduce using rule 16 (vars -> f_checkTab tipo idList NEWLINE f_resetTab vars .)


state 76

    (13) pwmDeclaration -> PWM f_saveType pinList NEWLINE .

    DEF             reduce using rule 13 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)
    ID              reduce using rule 13 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)
    BOOL            reduce using rule 13 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)
    INT             reduce using rule 13 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)
    FLOAT           reduce using rule 13 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)
    STRING          reduce using rule 13 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)
    IMAGE           reduce using rule 13 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)
    $end            reduce using rule 13 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)


state 77

    (15) pinList -> C_INT COLON ID COMMA . pinList
    (14) pinList -> . C_INT COLON ID
    (15) pinList -> . C_INT COLON ID COMMA pinList

    C_INT           shift and go to state 51

    pinList                        shift and go to state 93

state 78

    (97) factor -> cvar .

    DIVIDE          reduce using rule 97 (factor -> cvar .)
    TIMES           reduce using rule 97 (factor -> cvar .)
    MOD             reduce using rule 97 (factor -> cvar .)
    PLUS            reduce using rule 97 (factor -> cvar .)
    MINUS           reduce using rule 97 (factor -> cvar .)
    GREATER_THAN    reduce using rule 97 (factor -> cvar .)
    LESS_THAN       reduce using rule 97 (factor -> cvar .)
    LESS_EQUAL_THAN reduce using rule 97 (factor -> cvar .)
    GREATER_EQUAL_THAN reduce using rule 97 (factor -> cvar .)
    NOT_EQUAL_THAN  reduce using rule 97 (factor -> cvar .)
    SAME_AS         reduce using rule 97 (factor -> cvar .)
    RPAREN          reduce using rule 97 (factor -> cvar .)
    NEWLINE         reduce using rule 97 (factor -> cvar .)
    COMMA           reduce using rule 97 (factor -> cvar .)
    COLON           reduce using rule 97 (factor -> cvar .)


state 79

    (105) cvar -> C_FLOAT . f_isConst
    (108) f_isConst -> .

    DIVIDE          reduce using rule 108 (f_isConst -> .)
    TIMES           reduce using rule 108 (f_isConst -> .)
    MOD             reduce using rule 108 (f_isConst -> .)
    PLUS            reduce using rule 108 (f_isConst -> .)
    MINUS           reduce using rule 108 (f_isConst -> .)
    GREATER_THAN    reduce using rule 108 (f_isConst -> .)
    LESS_THAN       reduce using rule 108 (f_isConst -> .)
    LESS_EQUAL_THAN reduce using rule 108 (f_isConst -> .)
    GREATER_EQUAL_THAN reduce using rule 108 (f_isConst -> .)
    NOT_EQUAL_THAN  reduce using rule 108 (f_isConst -> .)
    SAME_AS         reduce using rule 108 (f_isConst -> .)
    NEWLINE         reduce using rule 108 (f_isConst -> .)
    RPAREN          reduce using rule 108 (f_isConst -> .)
    COMMA           reduce using rule 108 (f_isConst -> .)
    COLON           reduce using rule 108 (f_isConst -> .)

    f_isConst                      shift and go to state 94

state 80

    (98) factor -> funct .

    DIVIDE          reduce using rule 98 (factor -> funct .)
    TIMES           reduce using rule 98 (factor -> funct .)
    MOD             reduce using rule 98 (factor -> funct .)
    PLUS            reduce using rule 98 (factor -> funct .)
    MINUS           reduce using rule 98 (factor -> funct .)
    GREATER_THAN    reduce using rule 98 (factor -> funct .)
    LESS_THAN       reduce using rule 98 (factor -> funct .)
    LESS_EQUAL_THAN reduce using rule 98 (factor -> funct .)
    GREATER_EQUAL_THAN reduce using rule 98 (factor -> funct .)
    NOT_EQUAL_THAN  reduce using rule 98 (factor -> funct .)
    SAME_AS         reduce using rule 98 (factor -> funct .)
    RPAREN          reduce using rule 98 (factor -> funct .)
    NEWLINE         reduce using rule 98 (factor -> funct .)
    COMMA           reduce using rule 98 (factor -> funct .)
    COLON           reduce using rule 98 (factor -> funct .)


state 81

    (103) cvar -> C_BOOL . f_isConst
    (108) f_isConst -> .

    DIVIDE          reduce using rule 108 (f_isConst -> .)
    TIMES           reduce using rule 108 (f_isConst -> .)
    MOD             reduce using rule 108 (f_isConst -> .)
    PLUS            reduce using rule 108 (f_isConst -> .)
    MINUS           reduce using rule 108 (f_isConst -> .)
    GREATER_THAN    reduce using rule 108 (f_isConst -> .)
    LESS_THAN       reduce using rule 108 (f_isConst -> .)
    LESS_EQUAL_THAN reduce using rule 108 (f_isConst -> .)
    GREATER_EQUAL_THAN reduce using rule 108 (f_isConst -> .)
    NOT_EQUAL_THAN  reduce using rule 108 (f_isConst -> .)
    SAME_AS         reduce using rule 108 (f_isConst -> .)
    NEWLINE         reduce using rule 108 (f_isConst -> .)
    RPAREN          reduce using rule 108 (f_isConst -> .)
    COMMA           reduce using rule 108 (f_isConst -> .)
    COLON           reduce using rule 108 (f_isConst -> .)

    f_isConst                      shift and go to state 95

state 82

    (91) term -> factor . moreFactors
    (92) moreFactors -> . empty
    (93) moreFactors -> . DIVIDE f_pushOperator factor f_popFactor moreFactors
    (94) moreFactors -> . TIMES f_pushOperator factor f_popFactor moreFactors
    (95) moreFactors -> . MOD f_pushOperator factor f_popFactor moreFactors
    (3) empty -> .

    DIVIDE          shift and go to state 97
    TIMES           shift and go to state 98
    MOD             shift and go to state 100
    PLUS            reduce using rule 3 (empty -> .)
    MINUS           reduce using rule 3 (empty -> .)
    GREATER_THAN    reduce using rule 3 (empty -> .)
    LESS_THAN       reduce using rule 3 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 3 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 3 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 3 (empty -> .)
    SAME_AS         reduce using rule 3 (empty -> .)
    NEWLINE         reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    COLON           reduce using rule 3 (empty -> .)

    moreFactors                    shift and go to state 96
    empty                          shift and go to state 99

state 83

    (96) factor -> LPAREN . f_pushOperator expression RPAREN f_popOperator
    (99) f_pushOperator -> .

    LPAREN          reduce using rule 99 (f_pushOperator -> .)
    ID              reduce using rule 99 (f_pushOperator -> .)
    C_BOOL          reduce using rule 99 (f_pushOperator -> .)
    C_INT           reduce using rule 99 (f_pushOperator -> .)
    C_FLOAT         reduce using rule 99 (f_pushOperator -> .)
    C_STRING        reduce using rule 99 (f_pushOperator -> .)

    f_pushOperator                 shift and go to state 101

state 84

    (104) cvar -> C_INT . f_isConst
    (108) f_isConst -> .

    DIVIDE          reduce using rule 108 (f_isConst -> .)
    TIMES           reduce using rule 108 (f_isConst -> .)
    MOD             reduce using rule 108 (f_isConst -> .)
    PLUS            reduce using rule 108 (f_isConst -> .)
    MINUS           reduce using rule 108 (f_isConst -> .)
    GREATER_THAN    reduce using rule 108 (f_isConst -> .)
    LESS_THAN       reduce using rule 108 (f_isConst -> .)
    LESS_EQUAL_THAN reduce using rule 108 (f_isConst -> .)
    GREATER_EQUAL_THAN reduce using rule 108 (f_isConst -> .)
    NOT_EQUAL_THAN  reduce using rule 108 (f_isConst -> .)
    SAME_AS         reduce using rule 108 (f_isConst -> .)
    NEWLINE         reduce using rule 108 (f_isConst -> .)
    RPAREN          reduce using rule 108 (f_isConst -> .)
    COMMA           reduce using rule 108 (f_isConst -> .)
    COLON           reduce using rule 108 (f_isConst -> .)

    f_isConst                      shift and go to state 102

state 85

    (102) cvar -> ID . f_isID
    (71) funct -> ID . f_checkProc LPAREN RPAREN
    (72) funct -> ID . f_checkProc LPAREN expression f_genParam expressionList RPAREN
    (107) f_isID -> .
    (73) f_checkProc -> .

    DIVIDE          reduce using rule 107 (f_isID -> .)
    TIMES           reduce using rule 107 (f_isID -> .)
    MOD             reduce using rule 107 (f_isID -> .)
    PLUS            reduce using rule 107 (f_isID -> .)
    MINUS           reduce using rule 107 (f_isID -> .)
    GREATER_THAN    reduce using rule 107 (f_isID -> .)
    LESS_THAN       reduce using rule 107 (f_isID -> .)
    LESS_EQUAL_THAN reduce using rule 107 (f_isID -> .)
    GREATER_EQUAL_THAN reduce using rule 107 (f_isID -> .)
    NOT_EQUAL_THAN  reduce using rule 107 (f_isID -> .)
    SAME_AS         reduce using rule 107 (f_isID -> .)
    NEWLINE         reduce using rule 107 (f_isID -> .)
    RPAREN          reduce using rule 107 (f_isID -> .)
    COMMA           reduce using rule 107 (f_isID -> .)
    COLON           reduce using rule 107 (f_isID -> .)
    LPAREN          reduce using rule 73 (f_checkProc -> .)

    f_checkProc                    shift and go to state 103
    f_isID                         shift and go to state 104

state 86

    (106) cvar -> C_STRING . f_isConst
    (108) f_isConst -> .

    DIVIDE          reduce using rule 108 (f_isConst -> .)
    TIMES           reduce using rule 108 (f_isConst -> .)
    MOD             reduce using rule 108 (f_isConst -> .)
    PLUS            reduce using rule 108 (f_isConst -> .)
    MINUS           reduce using rule 108 (f_isConst -> .)
    GREATER_THAN    reduce using rule 108 (f_isConst -> .)
    LESS_THAN       reduce using rule 108 (f_isConst -> .)
    LESS_EQUAL_THAN reduce using rule 108 (f_isConst -> .)
    GREATER_EQUAL_THAN reduce using rule 108 (f_isConst -> .)
    NOT_EQUAL_THAN  reduce using rule 108 (f_isConst -> .)
    SAME_AS         reduce using rule 108 (f_isConst -> .)
    NEWLINE         reduce using rule 108 (f_isConst -> .)
    RPAREN          reduce using rule 108 (f_isConst -> .)
    COMMA           reduce using rule 108 (f_isConst -> .)
    COLON           reduce using rule 108 (f_isConst -> .)

    f_isConst                      shift and go to state 105

state 87

    (86) exp -> term . moreTerms
    (87) moreTerms -> . empty
    (88) moreTerms -> . PLUS f_pushOperator term f_popTerm moreTerms
    (89) moreTerms -> . MINUS f_pushOperator term f_popTerm moreTerms
    (3) empty -> .

    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    GREATER_THAN    reduce using rule 3 (empty -> .)
    LESS_THAN       reduce using rule 3 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 3 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 3 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 3 (empty -> .)
    SAME_AS         reduce using rule 3 (empty -> .)
    NEWLINE         reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    COLON           reduce using rule 3 (empty -> .)

    moreTerms                      shift and go to state 106
    empty                          shift and go to state 109

state 88

    (77) expression -> exp .
    (78) expression -> exp . compareToken exp f_popComparation
    (80) compareToken -> . GREATER_THAN
    (81) compareToken -> . LESS_THAN
    (82) compareToken -> . LESS_EQUAL_THAN
    (83) compareToken -> . GREATER_EQUAL_THAN
    (84) compareToken -> . NOT_EQUAL_THAN
    (85) compareToken -> . SAME_AS

    NEWLINE         reduce using rule 77 (expression -> exp .)
    COMMA           reduce using rule 77 (expression -> exp .)
    RPAREN          reduce using rule 77 (expression -> exp .)
    COLON           reduce using rule 77 (expression -> exp .)
    GREATER_THAN    shift and go to state 115
    LESS_THAN       shift and go to state 116
    LESS_EQUAL_THAN shift and go to state 112
    GREATER_EQUAL_THAN shift and go to state 111
    NOT_EQUAL_THAN  shift and go to state 114
    SAME_AS         shift and go to state 113

    compareToken                   shift and go to state 110

state 89

    (39) assign -> f_checkTab ID f_checkID EQUAL f_isAssign expression . NEWLINE f_resetTab f_generateEqual assign

    NEWLINE         shift and go to state 117


state 90

    (30) functions -> DEF VOID f_setVoid MAIN f_saveModule . LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (31) functions -> DEF VOID f_setVoid MAIN f_saveModule . LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    LPAREN          shift and go to state 118


state 91

    (28) functions -> DEF VOID f_setVoid ID f_saveModule . LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (29) functions -> DEF VOID f_setVoid ID f_saveModule . LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    LPAREN          shift and go to state 119


state 92

    (26) functions -> DEF tipo ID f_saveModule LPAREN . RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (27) functions -> DEF tipo ID f_saveModule LPAREN . tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (21) tipo -> . BOOL f_saveType
    (22) tipo -> . INT f_saveType
    (23) tipo -> . FLOAT f_saveType
    (24) tipo -> . STRING f_saveType
    (25) tipo -> . IMAGE f_saveType

    RPAREN          shift and go to state 120
    BOOL            shift and go to state 25
    INT             shift and go to state 24
    FLOAT           shift and go to state 23
    STRING          shift and go to state 26
    IMAGE           shift and go to state 27

    tipo                           shift and go to state 121

state 93

    (15) pinList -> C_INT COLON ID COMMA pinList .

    NEWLINE         reduce using rule 15 (pinList -> C_INT COLON ID COMMA pinList .)


state 94

    (105) cvar -> C_FLOAT f_isConst .

    DIVIDE          reduce using rule 105 (cvar -> C_FLOAT f_isConst .)
    TIMES           reduce using rule 105 (cvar -> C_FLOAT f_isConst .)
    MOD             reduce using rule 105 (cvar -> C_FLOAT f_isConst .)
    PLUS            reduce using rule 105 (cvar -> C_FLOAT f_isConst .)
    MINUS           reduce using rule 105 (cvar -> C_FLOAT f_isConst .)
    GREATER_THAN    reduce using rule 105 (cvar -> C_FLOAT f_isConst .)
    LESS_THAN       reduce using rule 105 (cvar -> C_FLOAT f_isConst .)
    LESS_EQUAL_THAN reduce using rule 105 (cvar -> C_FLOAT f_isConst .)
    GREATER_EQUAL_THAN reduce using rule 105 (cvar -> C_FLOAT f_isConst .)
    NOT_EQUAL_THAN  reduce using rule 105 (cvar -> C_FLOAT f_isConst .)
    SAME_AS         reduce using rule 105 (cvar -> C_FLOAT f_isConst .)
    RPAREN          reduce using rule 105 (cvar -> C_FLOAT f_isConst .)
    NEWLINE         reduce using rule 105 (cvar -> C_FLOAT f_isConst .)
    COMMA           reduce using rule 105 (cvar -> C_FLOAT f_isConst .)
    COLON           reduce using rule 105 (cvar -> C_FLOAT f_isConst .)


state 95

    (103) cvar -> C_BOOL f_isConst .

    DIVIDE          reduce using rule 103 (cvar -> C_BOOL f_isConst .)
    TIMES           reduce using rule 103 (cvar -> C_BOOL f_isConst .)
    MOD             reduce using rule 103 (cvar -> C_BOOL f_isConst .)
    PLUS            reduce using rule 103 (cvar -> C_BOOL f_isConst .)
    MINUS           reduce using rule 103 (cvar -> C_BOOL f_isConst .)
    GREATER_THAN    reduce using rule 103 (cvar -> C_BOOL f_isConst .)
    LESS_THAN       reduce using rule 103 (cvar -> C_BOOL f_isConst .)
    LESS_EQUAL_THAN reduce using rule 103 (cvar -> C_BOOL f_isConst .)
    GREATER_EQUAL_THAN reduce using rule 103 (cvar -> C_BOOL f_isConst .)
    NOT_EQUAL_THAN  reduce using rule 103 (cvar -> C_BOOL f_isConst .)
    SAME_AS         reduce using rule 103 (cvar -> C_BOOL f_isConst .)
    RPAREN          reduce using rule 103 (cvar -> C_BOOL f_isConst .)
    NEWLINE         reduce using rule 103 (cvar -> C_BOOL f_isConst .)
    COMMA           reduce using rule 103 (cvar -> C_BOOL f_isConst .)
    COLON           reduce using rule 103 (cvar -> C_BOOL f_isConst .)


state 96

    (91) term -> factor moreFactors .

    PLUS            reduce using rule 91 (term -> factor moreFactors .)
    MINUS           reduce using rule 91 (term -> factor moreFactors .)
    GREATER_THAN    reduce using rule 91 (term -> factor moreFactors .)
    LESS_THAN       reduce using rule 91 (term -> factor moreFactors .)
    LESS_EQUAL_THAN reduce using rule 91 (term -> factor moreFactors .)
    GREATER_EQUAL_THAN reduce using rule 91 (term -> factor moreFactors .)
    NOT_EQUAL_THAN  reduce using rule 91 (term -> factor moreFactors .)
    SAME_AS         reduce using rule 91 (term -> factor moreFactors .)
    NEWLINE         reduce using rule 91 (term -> factor moreFactors .)
    RPAREN          reduce using rule 91 (term -> factor moreFactors .)
    COMMA           reduce using rule 91 (term -> factor moreFactors .)
    COLON           reduce using rule 91 (term -> factor moreFactors .)


state 97

    (93) moreFactors -> DIVIDE . f_pushOperator factor f_popFactor moreFactors
    (99) f_pushOperator -> .

    LPAREN          reduce using rule 99 (f_pushOperator -> .)
    ID              reduce using rule 99 (f_pushOperator -> .)
    C_BOOL          reduce using rule 99 (f_pushOperator -> .)
    C_INT           reduce using rule 99 (f_pushOperator -> .)
    C_FLOAT         reduce using rule 99 (f_pushOperator -> .)
    C_STRING        reduce using rule 99 (f_pushOperator -> .)

    f_pushOperator                 shift and go to state 122

state 98

    (94) moreFactors -> TIMES . f_pushOperator factor f_popFactor moreFactors
    (99) f_pushOperator -> .

    LPAREN          reduce using rule 99 (f_pushOperator -> .)
    ID              reduce using rule 99 (f_pushOperator -> .)
    C_BOOL          reduce using rule 99 (f_pushOperator -> .)
    C_INT           reduce using rule 99 (f_pushOperator -> .)
    C_FLOAT         reduce using rule 99 (f_pushOperator -> .)
    C_STRING        reduce using rule 99 (f_pushOperator -> .)

    f_pushOperator                 shift and go to state 123

state 99

    (92) moreFactors -> empty .

    PLUS            reduce using rule 92 (moreFactors -> empty .)
    MINUS           reduce using rule 92 (moreFactors -> empty .)
    GREATER_THAN    reduce using rule 92 (moreFactors -> empty .)
    LESS_THAN       reduce using rule 92 (moreFactors -> empty .)
    LESS_EQUAL_THAN reduce using rule 92 (moreFactors -> empty .)
    GREATER_EQUAL_THAN reduce using rule 92 (moreFactors -> empty .)
    NOT_EQUAL_THAN  reduce using rule 92 (moreFactors -> empty .)
    SAME_AS         reduce using rule 92 (moreFactors -> empty .)
    NEWLINE         reduce using rule 92 (moreFactors -> empty .)
    RPAREN          reduce using rule 92 (moreFactors -> empty .)
    COMMA           reduce using rule 92 (moreFactors -> empty .)
    COLON           reduce using rule 92 (moreFactors -> empty .)


state 100

    (95) moreFactors -> MOD . f_pushOperator factor f_popFactor moreFactors
    (99) f_pushOperator -> .

    LPAREN          reduce using rule 99 (f_pushOperator -> .)
    ID              reduce using rule 99 (f_pushOperator -> .)
    C_BOOL          reduce using rule 99 (f_pushOperator -> .)
    C_INT           reduce using rule 99 (f_pushOperator -> .)
    C_FLOAT         reduce using rule 99 (f_pushOperator -> .)
    C_STRING        reduce using rule 99 (f_pushOperator -> .)

    f_pushOperator                 shift and go to state 124

state 101

    (96) factor -> LPAREN f_pushOperator . expression RPAREN f_popOperator
    (77) expression -> . exp
    (78) expression -> . exp compareToken exp f_popComparation
    (86) exp -> . term moreTerms
    (91) term -> . factor moreFactors
    (96) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (97) factor -> . cvar
    (98) factor -> . funct
    (102) cvar -> . ID f_isID
    (103) cvar -> . C_BOOL f_isConst
    (104) cvar -> . C_INT f_isConst
    (105) cvar -> . C_FLOAT f_isConst
    (106) cvar -> . C_STRING f_isConst
    (71) funct -> . ID f_checkProc LPAREN RPAREN
    (72) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 83
    ID              shift and go to state 85
    C_BOOL          shift and go to state 81
    C_INT           shift and go to state 84
    C_FLOAT         shift and go to state 79
    C_STRING        shift and go to state 86

    term                           shift and go to state 87
    funct                          shift and go to state 80
    exp                            shift and go to state 88
    factor                         shift and go to state 82
    cvar                           shift and go to state 78
    expression                     shift and go to state 125

state 102

    (104) cvar -> C_INT f_isConst .

    DIVIDE          reduce using rule 104 (cvar -> C_INT f_isConst .)
    TIMES           reduce using rule 104 (cvar -> C_INT f_isConst .)
    MOD             reduce using rule 104 (cvar -> C_INT f_isConst .)
    PLUS            reduce using rule 104 (cvar -> C_INT f_isConst .)
    MINUS           reduce using rule 104 (cvar -> C_INT f_isConst .)
    GREATER_THAN    reduce using rule 104 (cvar -> C_INT f_isConst .)
    LESS_THAN       reduce using rule 104 (cvar -> C_INT f_isConst .)
    LESS_EQUAL_THAN reduce using rule 104 (cvar -> C_INT f_isConst .)
    GREATER_EQUAL_THAN reduce using rule 104 (cvar -> C_INT f_isConst .)
    NOT_EQUAL_THAN  reduce using rule 104 (cvar -> C_INT f_isConst .)
    SAME_AS         reduce using rule 104 (cvar -> C_INT f_isConst .)
    RPAREN          reduce using rule 104 (cvar -> C_INT f_isConst .)
    NEWLINE         reduce using rule 104 (cvar -> C_INT f_isConst .)
    COMMA           reduce using rule 104 (cvar -> C_INT f_isConst .)
    COLON           reduce using rule 104 (cvar -> C_INT f_isConst .)


state 103

    (71) funct -> ID f_checkProc . LPAREN RPAREN
    (72) funct -> ID f_checkProc . LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 126


state 104

    (102) cvar -> ID f_isID .

    DIVIDE          reduce using rule 102 (cvar -> ID f_isID .)
    TIMES           reduce using rule 102 (cvar -> ID f_isID .)
    MOD             reduce using rule 102 (cvar -> ID f_isID .)
    PLUS            reduce using rule 102 (cvar -> ID f_isID .)
    MINUS           reduce using rule 102 (cvar -> ID f_isID .)
    GREATER_THAN    reduce using rule 102 (cvar -> ID f_isID .)
    LESS_THAN       reduce using rule 102 (cvar -> ID f_isID .)
    LESS_EQUAL_THAN reduce using rule 102 (cvar -> ID f_isID .)
    GREATER_EQUAL_THAN reduce using rule 102 (cvar -> ID f_isID .)
    NOT_EQUAL_THAN  reduce using rule 102 (cvar -> ID f_isID .)
    SAME_AS         reduce using rule 102 (cvar -> ID f_isID .)
    RPAREN          reduce using rule 102 (cvar -> ID f_isID .)
    NEWLINE         reduce using rule 102 (cvar -> ID f_isID .)
    COMMA           reduce using rule 102 (cvar -> ID f_isID .)
    COLON           reduce using rule 102 (cvar -> ID f_isID .)


state 105

    (106) cvar -> C_STRING f_isConst .

    DIVIDE          reduce using rule 106 (cvar -> C_STRING f_isConst .)
    TIMES           reduce using rule 106 (cvar -> C_STRING f_isConst .)
    MOD             reduce using rule 106 (cvar -> C_STRING f_isConst .)
    PLUS            reduce using rule 106 (cvar -> C_STRING f_isConst .)
    MINUS           reduce using rule 106 (cvar -> C_STRING f_isConst .)
    GREATER_THAN    reduce using rule 106 (cvar -> C_STRING f_isConst .)
    LESS_THAN       reduce using rule 106 (cvar -> C_STRING f_isConst .)
    LESS_EQUAL_THAN reduce using rule 106 (cvar -> C_STRING f_isConst .)
    GREATER_EQUAL_THAN reduce using rule 106 (cvar -> C_STRING f_isConst .)
    NOT_EQUAL_THAN  reduce using rule 106 (cvar -> C_STRING f_isConst .)
    SAME_AS         reduce using rule 106 (cvar -> C_STRING f_isConst .)
    RPAREN          reduce using rule 106 (cvar -> C_STRING f_isConst .)
    NEWLINE         reduce using rule 106 (cvar -> C_STRING f_isConst .)
    COMMA           reduce using rule 106 (cvar -> C_STRING f_isConst .)
    COLON           reduce using rule 106 (cvar -> C_STRING f_isConst .)


state 106

    (86) exp -> term moreTerms .

    GREATER_THAN    reduce using rule 86 (exp -> term moreTerms .)
    LESS_THAN       reduce using rule 86 (exp -> term moreTerms .)
    LESS_EQUAL_THAN reduce using rule 86 (exp -> term moreTerms .)
    GREATER_EQUAL_THAN reduce using rule 86 (exp -> term moreTerms .)
    NOT_EQUAL_THAN  reduce using rule 86 (exp -> term moreTerms .)
    SAME_AS         reduce using rule 86 (exp -> term moreTerms .)
    NEWLINE         reduce using rule 86 (exp -> term moreTerms .)
    COMMA           reduce using rule 86 (exp -> term moreTerms .)
    RPAREN          reduce using rule 86 (exp -> term moreTerms .)
    COLON           reduce using rule 86 (exp -> term moreTerms .)


state 107

    (88) moreTerms -> PLUS . f_pushOperator term f_popTerm moreTerms
    (99) f_pushOperator -> .

    LPAREN          reduce using rule 99 (f_pushOperator -> .)
    ID              reduce using rule 99 (f_pushOperator -> .)
    C_BOOL          reduce using rule 99 (f_pushOperator -> .)
    C_INT           reduce using rule 99 (f_pushOperator -> .)
    C_FLOAT         reduce using rule 99 (f_pushOperator -> .)
    C_STRING        reduce using rule 99 (f_pushOperator -> .)

    f_pushOperator                 shift and go to state 127

state 108

    (89) moreTerms -> MINUS . f_pushOperator term f_popTerm moreTerms
    (99) f_pushOperator -> .

    LPAREN          reduce using rule 99 (f_pushOperator -> .)
    ID              reduce using rule 99 (f_pushOperator -> .)
    C_BOOL          reduce using rule 99 (f_pushOperator -> .)
    C_INT           reduce using rule 99 (f_pushOperator -> .)
    C_FLOAT         reduce using rule 99 (f_pushOperator -> .)
    C_STRING        reduce using rule 99 (f_pushOperator -> .)

    f_pushOperator                 shift and go to state 128

state 109

    (87) moreTerms -> empty .

    GREATER_THAN    reduce using rule 87 (moreTerms -> empty .)
    LESS_THAN       reduce using rule 87 (moreTerms -> empty .)
    LESS_EQUAL_THAN reduce using rule 87 (moreTerms -> empty .)
    GREATER_EQUAL_THAN reduce using rule 87 (moreTerms -> empty .)
    NOT_EQUAL_THAN  reduce using rule 87 (moreTerms -> empty .)
    SAME_AS         reduce using rule 87 (moreTerms -> empty .)
    NEWLINE         reduce using rule 87 (moreTerms -> empty .)
    RPAREN          reduce using rule 87 (moreTerms -> empty .)
    COMMA           reduce using rule 87 (moreTerms -> empty .)
    COLON           reduce using rule 87 (moreTerms -> empty .)


state 110

    (78) expression -> exp compareToken . exp f_popComparation
    (86) exp -> . term moreTerms
    (91) term -> . factor moreFactors
    (96) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (97) factor -> . cvar
    (98) factor -> . funct
    (102) cvar -> . ID f_isID
    (103) cvar -> . C_BOOL f_isConst
    (104) cvar -> . C_INT f_isConst
    (105) cvar -> . C_FLOAT f_isConst
    (106) cvar -> . C_STRING f_isConst
    (71) funct -> . ID f_checkProc LPAREN RPAREN
    (72) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 83
    ID              shift and go to state 85
    C_BOOL          shift and go to state 81
    C_INT           shift and go to state 84
    C_FLOAT         shift and go to state 79
    C_STRING        shift and go to state 86

    term                           shift and go to state 87
    funct                          shift and go to state 80
    exp                            shift and go to state 129
    factor                         shift and go to state 82
    cvar                           shift and go to state 78

state 111

    (83) compareToken -> GREATER_EQUAL_THAN .

    LPAREN          reduce using rule 83 (compareToken -> GREATER_EQUAL_THAN .)
    ID              reduce using rule 83 (compareToken -> GREATER_EQUAL_THAN .)
    C_BOOL          reduce using rule 83 (compareToken -> GREATER_EQUAL_THAN .)
    C_INT           reduce using rule 83 (compareToken -> GREATER_EQUAL_THAN .)
    C_FLOAT         reduce using rule 83 (compareToken -> GREATER_EQUAL_THAN .)
    C_STRING        reduce using rule 83 (compareToken -> GREATER_EQUAL_THAN .)


state 112

    (82) compareToken -> LESS_EQUAL_THAN .

    LPAREN          reduce using rule 82 (compareToken -> LESS_EQUAL_THAN .)
    ID              reduce using rule 82 (compareToken -> LESS_EQUAL_THAN .)
    C_BOOL          reduce using rule 82 (compareToken -> LESS_EQUAL_THAN .)
    C_INT           reduce using rule 82 (compareToken -> LESS_EQUAL_THAN .)
    C_FLOAT         reduce using rule 82 (compareToken -> LESS_EQUAL_THAN .)
    C_STRING        reduce using rule 82 (compareToken -> LESS_EQUAL_THAN .)


state 113

    (85) compareToken -> SAME_AS .

    LPAREN          reduce using rule 85 (compareToken -> SAME_AS .)
    ID              reduce using rule 85 (compareToken -> SAME_AS .)
    C_BOOL          reduce using rule 85 (compareToken -> SAME_AS .)
    C_INT           reduce using rule 85 (compareToken -> SAME_AS .)
    C_FLOAT         reduce using rule 85 (compareToken -> SAME_AS .)
    C_STRING        reduce using rule 85 (compareToken -> SAME_AS .)


state 114

    (84) compareToken -> NOT_EQUAL_THAN .

    LPAREN          reduce using rule 84 (compareToken -> NOT_EQUAL_THAN .)
    ID              reduce using rule 84 (compareToken -> NOT_EQUAL_THAN .)
    C_BOOL          reduce using rule 84 (compareToken -> NOT_EQUAL_THAN .)
    C_INT           reduce using rule 84 (compareToken -> NOT_EQUAL_THAN .)
    C_FLOAT         reduce using rule 84 (compareToken -> NOT_EQUAL_THAN .)
    C_STRING        reduce using rule 84 (compareToken -> NOT_EQUAL_THAN .)


state 115

    (80) compareToken -> GREATER_THAN .

    LPAREN          reduce using rule 80 (compareToken -> GREATER_THAN .)
    ID              reduce using rule 80 (compareToken -> GREATER_THAN .)
    C_BOOL          reduce using rule 80 (compareToken -> GREATER_THAN .)
    C_INT           reduce using rule 80 (compareToken -> GREATER_THAN .)
    C_FLOAT         reduce using rule 80 (compareToken -> GREATER_THAN .)
    C_STRING        reduce using rule 80 (compareToken -> GREATER_THAN .)


state 116

    (81) compareToken -> LESS_THAN .

    LPAREN          reduce using rule 81 (compareToken -> LESS_THAN .)
    ID              reduce using rule 81 (compareToken -> LESS_THAN .)
    C_BOOL          reduce using rule 81 (compareToken -> LESS_THAN .)
    C_INT           reduce using rule 81 (compareToken -> LESS_THAN .)
    C_FLOAT         reduce using rule 81 (compareToken -> LESS_THAN .)
    C_STRING        reduce using rule 81 (compareToken -> LESS_THAN .)


state 117

    (39) assign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE . f_resetTab f_generateEqual assign
    (53) f_resetTab -> .

    ID              reduce using rule 53 (f_resetTab -> .)
    DEF             reduce using rule 53 (f_resetTab -> .)
    $end            reduce using rule 53 (f_resetTab -> .)
    TAB             reduce using rule 53 (f_resetTab -> .)
    WHILE           reduce using rule 53 (f_resetTab -> .)
    ELSE            reduce using rule 53 (f_resetTab -> .)

    f_resetTab                     shift and go to state 130

state 118

    (30) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN . RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (31) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN . tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (21) tipo -> . BOOL f_saveType
    (22) tipo -> . INT f_saveType
    (23) tipo -> . FLOAT f_saveType
    (24) tipo -> . STRING f_saveType
    (25) tipo -> . IMAGE f_saveType

    RPAREN          shift and go to state 132
    BOOL            shift and go to state 25
    INT             shift and go to state 24
    FLOAT           shift and go to state 23
    STRING          shift and go to state 26
    IMAGE           shift and go to state 27

    tipo                           shift and go to state 131

state 119

    (28) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN . RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (29) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN . tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (21) tipo -> . BOOL f_saveType
    (22) tipo -> . INT f_saveType
    (23) tipo -> . FLOAT f_saveType
    (24) tipo -> . STRING f_saveType
    (25) tipo -> . IMAGE f_saveType

    RPAREN          shift and go to state 134
    BOOL            shift and go to state 25
    INT             shift and go to state 24
    FLOAT           shift and go to state 23
    STRING          shift and go to state 26
    IMAGE           shift and go to state 27

    tipo                           shift and go to state 133

state 120

    (26) functions -> DEF tipo ID f_saveModule LPAREN RPAREN . COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    COLON           shift and go to state 135


state 121

    (27) functions -> DEF tipo ID f_saveModule LPAREN tipo . ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    ID              shift and go to state 136


state 122

    (93) moreFactors -> DIVIDE f_pushOperator . factor f_popFactor moreFactors
    (96) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (97) factor -> . cvar
    (98) factor -> . funct
    (102) cvar -> . ID f_isID
    (103) cvar -> . C_BOOL f_isConst
    (104) cvar -> . C_INT f_isConst
    (105) cvar -> . C_FLOAT f_isConst
    (106) cvar -> . C_STRING f_isConst
    (71) funct -> . ID f_checkProc LPAREN RPAREN
    (72) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 83
    ID              shift and go to state 85
    C_BOOL          shift and go to state 81
    C_INT           shift and go to state 84
    C_FLOAT         shift and go to state 79
    C_STRING        shift and go to state 86

    funct                          shift and go to state 80
    cvar                           shift and go to state 78
    factor                         shift and go to state 137

state 123

    (94) moreFactors -> TIMES f_pushOperator . factor f_popFactor moreFactors
    (96) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (97) factor -> . cvar
    (98) factor -> . funct
    (102) cvar -> . ID f_isID
    (103) cvar -> . C_BOOL f_isConst
    (104) cvar -> . C_INT f_isConst
    (105) cvar -> . C_FLOAT f_isConst
    (106) cvar -> . C_STRING f_isConst
    (71) funct -> . ID f_checkProc LPAREN RPAREN
    (72) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 83
    ID              shift and go to state 85
    C_BOOL          shift and go to state 81
    C_INT           shift and go to state 84
    C_FLOAT         shift and go to state 79
    C_STRING        shift and go to state 86

    funct                          shift and go to state 80
    cvar                           shift and go to state 78
    factor                         shift and go to state 138

state 124

    (95) moreFactors -> MOD f_pushOperator . factor f_popFactor moreFactors
    (96) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (97) factor -> . cvar
    (98) factor -> . funct
    (102) cvar -> . ID f_isID
    (103) cvar -> . C_BOOL f_isConst
    (104) cvar -> . C_INT f_isConst
    (105) cvar -> . C_FLOAT f_isConst
    (106) cvar -> . C_STRING f_isConst
    (71) funct -> . ID f_checkProc LPAREN RPAREN
    (72) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 83
    ID              shift and go to state 85
    C_BOOL          shift and go to state 81
    C_INT           shift and go to state 84
    C_FLOAT         shift and go to state 79
    C_STRING        shift and go to state 86

    funct                          shift and go to state 80
    cvar                           shift and go to state 78
    factor                         shift and go to state 139

state 125

    (96) factor -> LPAREN f_pushOperator expression . RPAREN f_popOperator

    RPAREN          shift and go to state 140


state 126

    (71) funct -> ID f_checkProc LPAREN . RPAREN
    (72) funct -> ID f_checkProc LPAREN . expression f_genParam expressionList RPAREN
    (77) expression -> . exp
    (78) expression -> . exp compareToken exp f_popComparation
    (86) exp -> . term moreTerms
    (91) term -> . factor moreFactors
    (96) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (97) factor -> . cvar
    (98) factor -> . funct
    (102) cvar -> . ID f_isID
    (103) cvar -> . C_BOOL f_isConst
    (104) cvar -> . C_INT f_isConst
    (105) cvar -> . C_FLOAT f_isConst
    (106) cvar -> . C_STRING f_isConst
    (71) funct -> . ID f_checkProc LPAREN RPAREN
    (72) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    RPAREN          shift and go to state 141
    LPAREN          shift and go to state 83
    ID              shift and go to state 85
    C_BOOL          shift and go to state 81
    C_INT           shift and go to state 84
    C_FLOAT         shift and go to state 79
    C_STRING        shift and go to state 86

    term                           shift and go to state 87
    funct                          shift and go to state 80
    exp                            shift and go to state 88
    factor                         shift and go to state 82
    cvar                           shift and go to state 78
    expression                     shift and go to state 142

state 127

    (88) moreTerms -> PLUS f_pushOperator . term f_popTerm moreTerms
    (91) term -> . factor moreFactors
    (96) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (97) factor -> . cvar
    (98) factor -> . funct
    (102) cvar -> . ID f_isID
    (103) cvar -> . C_BOOL f_isConst
    (104) cvar -> . C_INT f_isConst
    (105) cvar -> . C_FLOAT f_isConst
    (106) cvar -> . C_STRING f_isConst
    (71) funct -> . ID f_checkProc LPAREN RPAREN
    (72) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 83
    ID              shift and go to state 85
    C_BOOL          shift and go to state 81
    C_INT           shift and go to state 84
    C_FLOAT         shift and go to state 79
    C_STRING        shift and go to state 86

    term                           shift and go to state 143
    funct                          shift and go to state 80
    factor                         shift and go to state 82
    cvar                           shift and go to state 78

state 128

    (89) moreTerms -> MINUS f_pushOperator . term f_popTerm moreTerms
    (91) term -> . factor moreFactors
    (96) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (97) factor -> . cvar
    (98) factor -> . funct
    (102) cvar -> . ID f_isID
    (103) cvar -> . C_BOOL f_isConst
    (104) cvar -> . C_INT f_isConst
    (105) cvar -> . C_FLOAT f_isConst
    (106) cvar -> . C_STRING f_isConst
    (71) funct -> . ID f_checkProc LPAREN RPAREN
    (72) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 83
    ID              shift and go to state 85
    C_BOOL          shift and go to state 81
    C_INT           shift and go to state 84
    C_FLOAT         shift and go to state 79
    C_STRING        shift and go to state 86

    term                           shift and go to state 144
    funct                          shift and go to state 80
    factor                         shift and go to state 82
    cvar                           shift and go to state 78

state 129

    (78) expression -> exp compareToken exp . f_popComparation
    (79) f_popComparation -> .

    NEWLINE         reduce using rule 79 (f_popComparation -> .)
    RPAREN          reduce using rule 79 (f_popComparation -> .)
    COMMA           reduce using rule 79 (f_popComparation -> .)
    COLON           reduce using rule 79 (f_popComparation -> .)

    f_popComparation               shift and go to state 145

state 130

    (39) assign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab . f_generateEqual assign
    (42) f_generateEqual -> .

    ID              reduce using rule 42 (f_generateEqual -> .)
    DEF             reduce using rule 42 (f_generateEqual -> .)
    $end            reduce using rule 42 (f_generateEqual -> .)
    TAB             reduce using rule 42 (f_generateEqual -> .)
    WHILE           reduce using rule 42 (f_generateEqual -> .)
    ELSE            reduce using rule 42 (f_generateEqual -> .)

    f_generateEqual                shift and go to state 146

state 131

    (31) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo . ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    ID              shift and go to state 147


state 132

    (30) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN . COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    COLON           shift and go to state 148


state 133

    (29) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN tipo . ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    ID              shift and go to state 149


state 134

    (28) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN . COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    COLON           shift and go to state 150


state 135

    (26) functions -> DEF tipo ID f_saveModule LPAREN RPAREN COLON . NEWLINE f_resetTab f_incTab block f_endModule functions

    NEWLINE         shift and go to state 151


state 136

    (27) functions -> DEF tipo ID f_saveModule LPAREN tipo ID . f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (38) f_addToParam -> .

    COMMA           reduce using rule 38 (f_addToParam -> .)
    RPAREN          reduce using rule 38 (f_addToParam -> .)

    f_addToParam                   shift and go to state 152

state 137

    (93) moreFactors -> DIVIDE f_pushOperator factor . f_popFactor moreFactors
    (101) f_popFactor -> .

    DIVIDE          reduce using rule 101 (f_popFactor -> .)
    TIMES           reduce using rule 101 (f_popFactor -> .)
    MOD             reduce using rule 101 (f_popFactor -> .)
    PLUS            reduce using rule 101 (f_popFactor -> .)
    MINUS           reduce using rule 101 (f_popFactor -> .)
    GREATER_THAN    reduce using rule 101 (f_popFactor -> .)
    LESS_THAN       reduce using rule 101 (f_popFactor -> .)
    LESS_EQUAL_THAN reduce using rule 101 (f_popFactor -> .)
    GREATER_EQUAL_THAN reduce using rule 101 (f_popFactor -> .)
    NOT_EQUAL_THAN  reduce using rule 101 (f_popFactor -> .)
    SAME_AS         reduce using rule 101 (f_popFactor -> .)
    NEWLINE         reduce using rule 101 (f_popFactor -> .)
    RPAREN          reduce using rule 101 (f_popFactor -> .)
    COMMA           reduce using rule 101 (f_popFactor -> .)
    COLON           reduce using rule 101 (f_popFactor -> .)

    f_popFactor                    shift and go to state 153

state 138

    (94) moreFactors -> TIMES f_pushOperator factor . f_popFactor moreFactors
    (101) f_popFactor -> .

    DIVIDE          reduce using rule 101 (f_popFactor -> .)
    TIMES           reduce using rule 101 (f_popFactor -> .)
    MOD             reduce using rule 101 (f_popFactor -> .)
    PLUS            reduce using rule 101 (f_popFactor -> .)
    MINUS           reduce using rule 101 (f_popFactor -> .)
    GREATER_THAN    reduce using rule 101 (f_popFactor -> .)
    LESS_THAN       reduce using rule 101 (f_popFactor -> .)
    LESS_EQUAL_THAN reduce using rule 101 (f_popFactor -> .)
    GREATER_EQUAL_THAN reduce using rule 101 (f_popFactor -> .)
    NOT_EQUAL_THAN  reduce using rule 101 (f_popFactor -> .)
    SAME_AS         reduce using rule 101 (f_popFactor -> .)
    NEWLINE         reduce using rule 101 (f_popFactor -> .)
    RPAREN          reduce using rule 101 (f_popFactor -> .)
    COMMA           reduce using rule 101 (f_popFactor -> .)
    COLON           reduce using rule 101 (f_popFactor -> .)

    f_popFactor                    shift and go to state 154

state 139

    (95) moreFactors -> MOD f_pushOperator factor . f_popFactor moreFactors
    (101) f_popFactor -> .

    DIVIDE          reduce using rule 101 (f_popFactor -> .)
    TIMES           reduce using rule 101 (f_popFactor -> .)
    MOD             reduce using rule 101 (f_popFactor -> .)
    PLUS            reduce using rule 101 (f_popFactor -> .)
    MINUS           reduce using rule 101 (f_popFactor -> .)
    GREATER_THAN    reduce using rule 101 (f_popFactor -> .)
    LESS_THAN       reduce using rule 101 (f_popFactor -> .)
    LESS_EQUAL_THAN reduce using rule 101 (f_popFactor -> .)
    GREATER_EQUAL_THAN reduce using rule 101 (f_popFactor -> .)
    NOT_EQUAL_THAN  reduce using rule 101 (f_popFactor -> .)
    SAME_AS         reduce using rule 101 (f_popFactor -> .)
    NEWLINE         reduce using rule 101 (f_popFactor -> .)
    RPAREN          reduce using rule 101 (f_popFactor -> .)
    COMMA           reduce using rule 101 (f_popFactor -> .)
    COLON           reduce using rule 101 (f_popFactor -> .)

    f_popFactor                    shift and go to state 155

state 140

    (96) factor -> LPAREN f_pushOperator expression RPAREN . f_popOperator
    (100) f_popOperator -> .

    DIVIDE          reduce using rule 100 (f_popOperator -> .)
    TIMES           reduce using rule 100 (f_popOperator -> .)
    MOD             reduce using rule 100 (f_popOperator -> .)
    PLUS            reduce using rule 100 (f_popOperator -> .)
    MINUS           reduce using rule 100 (f_popOperator -> .)
    GREATER_THAN    reduce using rule 100 (f_popOperator -> .)
    LESS_THAN       reduce using rule 100 (f_popOperator -> .)
    LESS_EQUAL_THAN reduce using rule 100 (f_popOperator -> .)
    GREATER_EQUAL_THAN reduce using rule 100 (f_popOperator -> .)
    NOT_EQUAL_THAN  reduce using rule 100 (f_popOperator -> .)
    SAME_AS         reduce using rule 100 (f_popOperator -> .)
    NEWLINE         reduce using rule 100 (f_popOperator -> .)
    RPAREN          reduce using rule 100 (f_popOperator -> .)
    COMMA           reduce using rule 100 (f_popOperator -> .)
    COLON           reduce using rule 100 (f_popOperator -> .)

    f_popOperator                  shift and go to state 156

state 141

    (71) funct -> ID f_checkProc LPAREN RPAREN .

    DIVIDE          reduce using rule 71 (funct -> ID f_checkProc LPAREN RPAREN .)
    TIMES           reduce using rule 71 (funct -> ID f_checkProc LPAREN RPAREN .)
    MOD             reduce using rule 71 (funct -> ID f_checkProc LPAREN RPAREN .)
    PLUS            reduce using rule 71 (funct -> ID f_checkProc LPAREN RPAREN .)
    MINUS           reduce using rule 71 (funct -> ID f_checkProc LPAREN RPAREN .)
    GREATER_THAN    reduce using rule 71 (funct -> ID f_checkProc LPAREN RPAREN .)
    LESS_THAN       reduce using rule 71 (funct -> ID f_checkProc LPAREN RPAREN .)
    LESS_EQUAL_THAN reduce using rule 71 (funct -> ID f_checkProc LPAREN RPAREN .)
    GREATER_EQUAL_THAN reduce using rule 71 (funct -> ID f_checkProc LPAREN RPAREN .)
    NOT_EQUAL_THAN  reduce using rule 71 (funct -> ID f_checkProc LPAREN RPAREN .)
    SAME_AS         reduce using rule 71 (funct -> ID f_checkProc LPAREN RPAREN .)
    NEWLINE         reduce using rule 71 (funct -> ID f_checkProc LPAREN RPAREN .)
    RPAREN          reduce using rule 71 (funct -> ID f_checkProc LPAREN RPAREN .)
    COMMA           reduce using rule 71 (funct -> ID f_checkProc LPAREN RPAREN .)
    COLON           reduce using rule 71 (funct -> ID f_checkProc LPAREN RPAREN .)


state 142

    (72) funct -> ID f_checkProc LPAREN expression . f_genParam expressionList RPAREN
    (76) f_genParam -> .

    COMMA           reduce using rule 76 (f_genParam -> .)
    RPAREN          reduce using rule 76 (f_genParam -> .)

    f_genParam                     shift and go to state 157

state 143

    (88) moreTerms -> PLUS f_pushOperator term . f_popTerm moreTerms
    (90) f_popTerm -> .

    PLUS            reduce using rule 90 (f_popTerm -> .)
    MINUS           reduce using rule 90 (f_popTerm -> .)
    GREATER_THAN    reduce using rule 90 (f_popTerm -> .)
    LESS_THAN       reduce using rule 90 (f_popTerm -> .)
    LESS_EQUAL_THAN reduce using rule 90 (f_popTerm -> .)
    GREATER_EQUAL_THAN reduce using rule 90 (f_popTerm -> .)
    NOT_EQUAL_THAN  reduce using rule 90 (f_popTerm -> .)
    SAME_AS         reduce using rule 90 (f_popTerm -> .)
    NEWLINE         reduce using rule 90 (f_popTerm -> .)
    RPAREN          reduce using rule 90 (f_popTerm -> .)
    COMMA           reduce using rule 90 (f_popTerm -> .)
    COLON           reduce using rule 90 (f_popTerm -> .)

    f_popTerm                      shift and go to state 158

state 144

    (89) moreTerms -> MINUS f_pushOperator term . f_popTerm moreTerms
    (90) f_popTerm -> .

    PLUS            reduce using rule 90 (f_popTerm -> .)
    MINUS           reduce using rule 90 (f_popTerm -> .)
    GREATER_THAN    reduce using rule 90 (f_popTerm -> .)
    LESS_THAN       reduce using rule 90 (f_popTerm -> .)
    LESS_EQUAL_THAN reduce using rule 90 (f_popTerm -> .)
    GREATER_EQUAL_THAN reduce using rule 90 (f_popTerm -> .)
    NOT_EQUAL_THAN  reduce using rule 90 (f_popTerm -> .)
    SAME_AS         reduce using rule 90 (f_popTerm -> .)
    NEWLINE         reduce using rule 90 (f_popTerm -> .)
    RPAREN          reduce using rule 90 (f_popTerm -> .)
    COMMA           reduce using rule 90 (f_popTerm -> .)
    COLON           reduce using rule 90 (f_popTerm -> .)

    f_popTerm                      shift and go to state 159

state 145

    (78) expression -> exp compareToken exp f_popComparation .

    NEWLINE         reduce using rule 78 (expression -> exp compareToken exp f_popComparation .)
    COMMA           reduce using rule 78 (expression -> exp compareToken exp f_popComparation .)
    RPAREN          reduce using rule 78 (expression -> exp compareToken exp f_popComparation .)
    COLON           reduce using rule 78 (expression -> exp compareToken exp f_popComparation .)


state 146

    (39) assign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual . assign
    (39) assign -> . f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual assign
    (40) assign -> . empty
    (54) f_checkTab -> .
    (3) empty -> .

    ID              reduce using rule 54 (f_checkTab -> .)
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)
    TAB             reduce using rule 3 (empty -> .)
    WHILE           reduce using rule 3 (empty -> .)
    ELSE            reduce using rule 3 (empty -> .)

    f_checkTab                     shift and go to state 20
    assign                         shift and go to state 160
    empty                          shift and go to state 22

state 147

    (31) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID . f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (38) f_addToParam -> .

    COMMA           reduce using rule 38 (f_addToParam -> .)
    RPAREN          reduce using rule 38 (f_addToParam -> .)

    f_addToParam                   shift and go to state 161

state 148

    (30) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON . NEWLINE f_resetTab f_incTab block f_endModule functions

    NEWLINE         shift and go to state 162


state 149

    (29) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID . f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (38) f_addToParam -> .

    COMMA           reduce using rule 38 (f_addToParam -> .)
    RPAREN          reduce using rule 38 (f_addToParam -> .)

    f_addToParam                   shift and go to state 163

state 150

    (28) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON . NEWLINE f_resetTab f_incTab block f_endModule functions

    NEWLINE         shift and go to state 164


state 151

    (26) functions -> DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE . f_resetTab f_incTab block f_endModule functions
    (53) f_resetTab -> .

    TAB             reduce using rule 53 (f_resetTab -> .)
    DEF             reduce using rule 53 (f_resetTab -> .)
    $end            reduce using rule 53 (f_resetTab -> .)

    f_resetTab                     shift and go to state 165

state 152

    (27) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam . parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (36) parameterList -> . empty
    (37) parameterList -> . COMMA tipo ID f_addToParam parameterList
    (3) empty -> .

    COMMA           shift and go to state 168
    RPAREN          reduce using rule 3 (empty -> .)

    parameterList                  shift and go to state 166
    empty                          shift and go to state 167

state 153

    (93) moreFactors -> DIVIDE f_pushOperator factor f_popFactor . moreFactors
    (92) moreFactors -> . empty
    (93) moreFactors -> . DIVIDE f_pushOperator factor f_popFactor moreFactors
    (94) moreFactors -> . TIMES f_pushOperator factor f_popFactor moreFactors
    (95) moreFactors -> . MOD f_pushOperator factor f_popFactor moreFactors
    (3) empty -> .

    DIVIDE          shift and go to state 97
    TIMES           shift and go to state 98
    MOD             shift and go to state 100
    PLUS            reduce using rule 3 (empty -> .)
    MINUS           reduce using rule 3 (empty -> .)
    GREATER_THAN    reduce using rule 3 (empty -> .)
    LESS_THAN       reduce using rule 3 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 3 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 3 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 3 (empty -> .)
    SAME_AS         reduce using rule 3 (empty -> .)
    NEWLINE         reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    COLON           reduce using rule 3 (empty -> .)

    moreFactors                    shift and go to state 169
    empty                          shift and go to state 99

state 154

    (94) moreFactors -> TIMES f_pushOperator factor f_popFactor . moreFactors
    (92) moreFactors -> . empty
    (93) moreFactors -> . DIVIDE f_pushOperator factor f_popFactor moreFactors
    (94) moreFactors -> . TIMES f_pushOperator factor f_popFactor moreFactors
    (95) moreFactors -> . MOD f_pushOperator factor f_popFactor moreFactors
    (3) empty -> .

    DIVIDE          shift and go to state 97
    TIMES           shift and go to state 98
    MOD             shift and go to state 100
    PLUS            reduce using rule 3 (empty -> .)
    MINUS           reduce using rule 3 (empty -> .)
    GREATER_THAN    reduce using rule 3 (empty -> .)
    LESS_THAN       reduce using rule 3 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 3 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 3 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 3 (empty -> .)
    SAME_AS         reduce using rule 3 (empty -> .)
    NEWLINE         reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    COLON           reduce using rule 3 (empty -> .)

    moreFactors                    shift and go to state 170
    empty                          shift and go to state 99

state 155

    (95) moreFactors -> MOD f_pushOperator factor f_popFactor . moreFactors
    (92) moreFactors -> . empty
    (93) moreFactors -> . DIVIDE f_pushOperator factor f_popFactor moreFactors
    (94) moreFactors -> . TIMES f_pushOperator factor f_popFactor moreFactors
    (95) moreFactors -> . MOD f_pushOperator factor f_popFactor moreFactors
    (3) empty -> .

    DIVIDE          shift and go to state 97
    TIMES           shift and go to state 98
    MOD             shift and go to state 100
    PLUS            reduce using rule 3 (empty -> .)
    MINUS           reduce using rule 3 (empty -> .)
    GREATER_THAN    reduce using rule 3 (empty -> .)
    LESS_THAN       reduce using rule 3 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 3 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 3 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 3 (empty -> .)
    SAME_AS         reduce using rule 3 (empty -> .)
    NEWLINE         reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    COLON           reduce using rule 3 (empty -> .)

    moreFactors                    shift and go to state 171
    empty                          shift and go to state 99

state 156

    (96) factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .

    DIVIDE          reduce using rule 96 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    TIMES           reduce using rule 96 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    MOD             reduce using rule 96 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    PLUS            reduce using rule 96 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    MINUS           reduce using rule 96 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    GREATER_THAN    reduce using rule 96 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    LESS_THAN       reduce using rule 96 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    LESS_EQUAL_THAN reduce using rule 96 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    GREATER_EQUAL_THAN reduce using rule 96 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    NOT_EQUAL_THAN  reduce using rule 96 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    SAME_AS         reduce using rule 96 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    RPAREN          reduce using rule 96 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    NEWLINE         reduce using rule 96 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    COMMA           reduce using rule 96 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    COLON           reduce using rule 96 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)


state 157

    (72) funct -> ID f_checkProc LPAREN expression f_genParam . expressionList RPAREN
    (74) expressionList -> . empty
    (75) expressionList -> . COMMA expression f_genParam expressionList
    (3) empty -> .

    COMMA           shift and go to state 173
    RPAREN          reduce using rule 3 (empty -> .)

    empty                          shift and go to state 174
    expressionList                 shift and go to state 172

state 158

    (88) moreTerms -> PLUS f_pushOperator term f_popTerm . moreTerms
    (87) moreTerms -> . empty
    (88) moreTerms -> . PLUS f_pushOperator term f_popTerm moreTerms
    (89) moreTerms -> . MINUS f_pushOperator term f_popTerm moreTerms
    (3) empty -> .

    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    GREATER_THAN    reduce using rule 3 (empty -> .)
    LESS_THAN       reduce using rule 3 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 3 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 3 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 3 (empty -> .)
    SAME_AS         reduce using rule 3 (empty -> .)
    NEWLINE         reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    COLON           reduce using rule 3 (empty -> .)

    moreTerms                      shift and go to state 175
    empty                          shift and go to state 109

state 159

    (89) moreTerms -> MINUS f_pushOperator term f_popTerm . moreTerms
    (87) moreTerms -> . empty
    (88) moreTerms -> . PLUS f_pushOperator term f_popTerm moreTerms
    (89) moreTerms -> . MINUS f_pushOperator term f_popTerm moreTerms
    (3) empty -> .

    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    GREATER_THAN    reduce using rule 3 (empty -> .)
    LESS_THAN       reduce using rule 3 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 3 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 3 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 3 (empty -> .)
    SAME_AS         reduce using rule 3 (empty -> .)
    NEWLINE         reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    COLON           reduce using rule 3 (empty -> .)

    moreTerms                      shift and go to state 176
    empty                          shift and go to state 109

state 160

    (39) assign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual assign .

    TAB             reduce using rule 39 (assign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual assign .)
    DEF             reduce using rule 39 (assign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual assign .)
    $end            reduce using rule 39 (assign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual assign .)
    WHILE           reduce using rule 39 (assign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual assign .)
    ELSE            reduce using rule 39 (assign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual assign .)


state 161

    (31) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam . parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (36) parameterList -> . empty
    (37) parameterList -> . COMMA tipo ID f_addToParam parameterList
    (3) empty -> .

    COMMA           shift and go to state 168
    RPAREN          reduce using rule 3 (empty -> .)

    parameterList                  shift and go to state 177
    empty                          shift and go to state 167

state 162

    (30) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE . f_resetTab f_incTab block f_endModule functions
    (53) f_resetTab -> .

    TAB             reduce using rule 53 (f_resetTab -> .)
    DEF             reduce using rule 53 (f_resetTab -> .)
    $end            reduce using rule 53 (f_resetTab -> .)

    f_resetTab                     shift and go to state 178

state 163

    (29) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam . parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (36) parameterList -> . empty
    (37) parameterList -> . COMMA tipo ID f_addToParam parameterList
    (3) empty -> .

    COMMA           shift and go to state 168
    RPAREN          reduce using rule 3 (empty -> .)

    parameterList                  shift and go to state 179
    empty                          shift and go to state 167

state 164

    (28) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE . f_resetTab f_incTab block f_endModule functions
    (53) f_resetTab -> .

    TAB             reduce using rule 53 (f_resetTab -> .)
    DEF             reduce using rule 53 (f_resetTab -> .)
    $end            reduce using rule 53 (f_resetTab -> .)

    f_resetTab                     shift and go to state 180

state 165

    (26) functions -> DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab . f_incTab block f_endModule functions
    (51) f_incTab -> .

    TAB             reduce using rule 51 (f_incTab -> .)
    DEF             reduce using rule 51 (f_incTab -> .)
    $end            reduce using rule 51 (f_incTab -> .)

    f_incTab                       shift and go to state 181

state 166

    (27) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList . RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    RPAREN          shift and go to state 182


state 167

    (36) parameterList -> empty .

    RPAREN          reduce using rule 36 (parameterList -> empty .)


state 168

    (37) parameterList -> COMMA . tipo ID f_addToParam parameterList
    (21) tipo -> . BOOL f_saveType
    (22) tipo -> . INT f_saveType
    (23) tipo -> . FLOAT f_saveType
    (24) tipo -> . STRING f_saveType
    (25) tipo -> . IMAGE f_saveType

    BOOL            shift and go to state 25
    INT             shift and go to state 24
    FLOAT           shift and go to state 23
    STRING          shift and go to state 26
    IMAGE           shift and go to state 27

    tipo                           shift and go to state 183

state 169

    (93) moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .

    PLUS            reduce using rule 93 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    MINUS           reduce using rule 93 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    GREATER_THAN    reduce using rule 93 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    LESS_THAN       reduce using rule 93 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    LESS_EQUAL_THAN reduce using rule 93 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    GREATER_EQUAL_THAN reduce using rule 93 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    NOT_EQUAL_THAN  reduce using rule 93 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    SAME_AS         reduce using rule 93 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    NEWLINE         reduce using rule 93 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    RPAREN          reduce using rule 93 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    COMMA           reduce using rule 93 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    COLON           reduce using rule 93 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)


state 170

    (94) moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .

    PLUS            reduce using rule 94 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    MINUS           reduce using rule 94 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    GREATER_THAN    reduce using rule 94 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    LESS_THAN       reduce using rule 94 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    LESS_EQUAL_THAN reduce using rule 94 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    GREATER_EQUAL_THAN reduce using rule 94 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    NOT_EQUAL_THAN  reduce using rule 94 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    SAME_AS         reduce using rule 94 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    NEWLINE         reduce using rule 94 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    RPAREN          reduce using rule 94 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    COMMA           reduce using rule 94 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    COLON           reduce using rule 94 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)


state 171

    (95) moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .

    PLUS            reduce using rule 95 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    MINUS           reduce using rule 95 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    GREATER_THAN    reduce using rule 95 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    LESS_THAN       reduce using rule 95 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    LESS_EQUAL_THAN reduce using rule 95 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    GREATER_EQUAL_THAN reduce using rule 95 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    NOT_EQUAL_THAN  reduce using rule 95 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    SAME_AS         reduce using rule 95 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    NEWLINE         reduce using rule 95 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    RPAREN          reduce using rule 95 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    COMMA           reduce using rule 95 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    COLON           reduce using rule 95 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)


state 172

    (72) funct -> ID f_checkProc LPAREN expression f_genParam expressionList . RPAREN

    RPAREN          shift and go to state 184


state 173

    (75) expressionList -> COMMA . expression f_genParam expressionList
    (77) expression -> . exp
    (78) expression -> . exp compareToken exp f_popComparation
    (86) exp -> . term moreTerms
    (91) term -> . factor moreFactors
    (96) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (97) factor -> . cvar
    (98) factor -> . funct
    (102) cvar -> . ID f_isID
    (103) cvar -> . C_BOOL f_isConst
    (104) cvar -> . C_INT f_isConst
    (105) cvar -> . C_FLOAT f_isConst
    (106) cvar -> . C_STRING f_isConst
    (71) funct -> . ID f_checkProc LPAREN RPAREN
    (72) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 83
    ID              shift and go to state 85
    C_BOOL          shift and go to state 81
    C_INT           shift and go to state 84
    C_FLOAT         shift and go to state 79
    C_STRING        shift and go to state 86

    term                           shift and go to state 87
    funct                          shift and go to state 80
    exp                            shift and go to state 88
    factor                         shift and go to state 82
    cvar                           shift and go to state 78
    expression                     shift and go to state 185

state 174

    (74) expressionList -> empty .

    RPAREN          reduce using rule 74 (expressionList -> empty .)


state 175

    (88) moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .

    GREATER_THAN    reduce using rule 88 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    LESS_THAN       reduce using rule 88 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    LESS_EQUAL_THAN reduce using rule 88 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    GREATER_EQUAL_THAN reduce using rule 88 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    NOT_EQUAL_THAN  reduce using rule 88 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    SAME_AS         reduce using rule 88 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    NEWLINE         reduce using rule 88 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    RPAREN          reduce using rule 88 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    COMMA           reduce using rule 88 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    COLON           reduce using rule 88 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)


state 176

    (89) moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .

    GREATER_THAN    reduce using rule 89 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    LESS_THAN       reduce using rule 89 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    LESS_EQUAL_THAN reduce using rule 89 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    GREATER_EQUAL_THAN reduce using rule 89 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    NOT_EQUAL_THAN  reduce using rule 89 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    SAME_AS         reduce using rule 89 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    NEWLINE         reduce using rule 89 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    RPAREN          reduce using rule 89 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    COMMA           reduce using rule 89 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    COLON           reduce using rule 89 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)


state 177

    (31) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList . RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    RPAREN          shift and go to state 186


state 178

    (30) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab . f_incTab block f_endModule functions
    (51) f_incTab -> .

    TAB             reduce using rule 51 (f_incTab -> .)
    DEF             reduce using rule 51 (f_incTab -> .)
    $end            reduce using rule 51 (f_incTab -> .)

    f_incTab                       shift and go to state 187

state 179

    (29) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList . RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    RPAREN          shift and go to state 188


state 180

    (28) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab . f_incTab block f_endModule functions
    (51) f_incTab -> .

    TAB             reduce using rule 51 (f_incTab -> .)
    DEF             reduce using rule 51 (f_incTab -> .)
    $end            reduce using rule 51 (f_incTab -> .)

    f_incTab                       shift and go to state 189

state 181

    (26) functions -> DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab . block f_endModule functions
    (44) block -> . empty
    (45) block -> . TAB f_addTab moreTabs statement moreStatements
    (3) empty -> .

    TAB             shift and go to state 192
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)

    empty                          shift and go to state 190
    block                          shift and go to state 191

state 182

    (27) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN . COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    COLON           shift and go to state 193


state 183

    (37) parameterList -> COMMA tipo . ID f_addToParam parameterList

    ID              shift and go to state 194


state 184

    (72) funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .

    DIVIDE          reduce using rule 72 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    TIMES           reduce using rule 72 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    MOD             reduce using rule 72 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    PLUS            reduce using rule 72 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    MINUS           reduce using rule 72 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    GREATER_THAN    reduce using rule 72 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    LESS_THAN       reduce using rule 72 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    LESS_EQUAL_THAN reduce using rule 72 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    GREATER_EQUAL_THAN reduce using rule 72 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    NOT_EQUAL_THAN  reduce using rule 72 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    SAME_AS         reduce using rule 72 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    NEWLINE         reduce using rule 72 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    RPAREN          reduce using rule 72 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    COMMA           reduce using rule 72 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)
    COLON           reduce using rule 72 (funct -> ID f_checkProc LPAREN expression f_genParam expressionList RPAREN .)


state 185

    (75) expressionList -> COMMA expression . f_genParam expressionList
    (76) f_genParam -> .

    COMMA           reduce using rule 76 (f_genParam -> .)
    RPAREN          reduce using rule 76 (f_genParam -> .)

    f_genParam                     shift and go to state 195

state 186

    (31) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN . COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    COLON           shift and go to state 196


state 187

    (30) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab . block f_endModule functions
    (44) block -> . empty
    (45) block -> . TAB f_addTab moreTabs statement moreStatements
    (3) empty -> .

    TAB             shift and go to state 192
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)

    empty                          shift and go to state 190
    block                          shift and go to state 197

state 188

    (29) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN . COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    COLON           shift and go to state 198


state 189

    (28) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab . block f_endModule functions
    (44) block -> . empty
    (45) block -> . TAB f_addTab moreTabs statement moreStatements
    (3) empty -> .

    TAB             shift and go to state 192
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)

    empty                          shift and go to state 190
    block                          shift and go to state 199

state 190

    (44) block -> empty .

    WHILE           reduce using rule 44 (block -> empty .)
    DEF             reduce using rule 44 (block -> empty .)
    $end            reduce using rule 44 (block -> empty .)
    TAB             reduce using rule 44 (block -> empty .)
    ELSE            reduce using rule 44 (block -> empty .)


state 191

    (26) functions -> DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block . f_endModule functions
    (34) f_endModule -> .

    DEF             reduce using rule 34 (f_endModule -> .)
    $end            reduce using rule 34 (f_endModule -> .)

    f_endModule                    shift and go to state 200

state 192

    (45) block -> TAB . f_addTab moreTabs statement moreStatements
    (52) f_addTab -> .

    TAB             reduce using rule 52 (f_addTab -> .)
    NEWLINE         reduce using rule 52 (f_addTab -> .)
    RETURN          reduce using rule 52 (f_addTab -> .)
    ID              reduce using rule 52 (f_addTab -> .)
    IF              reduce using rule 52 (f_addTab -> .)
    WHILE           reduce using rule 52 (f_addTab -> .)
    DO              reduce using rule 52 (f_addTab -> .)
    BOOL            reduce using rule 52 (f_addTab -> .)
    INT             reduce using rule 52 (f_addTab -> .)
    FLOAT           reduce using rule 52 (f_addTab -> .)
    STRING          reduce using rule 52 (f_addTab -> .)
    IMAGE           reduce using rule 52 (f_addTab -> .)
    DEF             reduce using rule 52 (f_addTab -> .)
    $end            reduce using rule 52 (f_addTab -> .)
    ELSE            reduce using rule 52 (f_addTab -> .)

    f_addTab                       shift and go to state 201

state 193

    (27) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON . NEWLINE f_resetTab f_incTab block f_endModule functions

    NEWLINE         shift and go to state 202


state 194

    (37) parameterList -> COMMA tipo ID . f_addToParam parameterList
    (38) f_addToParam -> .

    COMMA           reduce using rule 38 (f_addToParam -> .)
    RPAREN          reduce using rule 38 (f_addToParam -> .)

    f_addToParam                   shift and go to state 203

state 195

    (75) expressionList -> COMMA expression f_genParam . expressionList
    (74) expressionList -> . empty
    (75) expressionList -> . COMMA expression f_genParam expressionList
    (3) empty -> .

    COMMA           shift and go to state 173
    RPAREN          reduce using rule 3 (empty -> .)

    expressionList                 shift and go to state 204
    empty                          shift and go to state 174

state 196

    (31) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON . NEWLINE f_resetTab f_incTab block f_endModule functions

    NEWLINE         shift and go to state 205


state 197

    (30) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block . f_endModule functions
    (34) f_endModule -> .

    DEF             reduce using rule 34 (f_endModule -> .)
    $end            reduce using rule 34 (f_endModule -> .)

    f_endModule                    shift and go to state 206

state 198

    (29) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON . NEWLINE f_resetTab f_incTab block f_endModule functions

    NEWLINE         shift and go to state 207


state 199

    (28) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block . f_endModule functions
    (34) f_endModule -> .

    DEF             reduce using rule 34 (f_endModule -> .)
    $end            reduce using rule 34 (f_endModule -> .)

    f_endModule                    shift and go to state 208

state 200

    (26) functions -> DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule . functions
    (26) functions -> . DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (27) functions -> . DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (28) functions -> . DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (29) functions -> . DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (30) functions -> . DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (31) functions -> . DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (32) functions -> . empty
    (3) empty -> .

    DEF             shift and go to state 36
    $end            reduce using rule 3 (empty -> .)

    functions                      shift and go to state 209
    empty                          shift and go to state 38

state 201

    (45) block -> TAB f_addTab . moreTabs statement moreStatements
    (48) moreTabs -> . empty
    (49) moreTabs -> . TAB f_addTab moreTabs
    (50) moreTabs -> . NEWLINE f_resetTab TAB f_addTab moreTabs
    (3) empty -> .

  ! shift/reduce conflict for TAB resolved as shift
    TAB             shift and go to state 211
    NEWLINE         shift and go to state 212
    RETURN          reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)
    IF              reduce using rule 3 (empty -> .)
    WHILE           reduce using rule 3 (empty -> .)
    DO              reduce using rule 3 (empty -> .)
    BOOL            reduce using rule 3 (empty -> .)
    INT             reduce using rule 3 (empty -> .)
    FLOAT           reduce using rule 3 (empty -> .)
    STRING          reduce using rule 3 (empty -> .)
    IMAGE           reduce using rule 3 (empty -> .)
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)
    ELSE            reduce using rule 3 (empty -> .)

  ! TAB             [ reduce using rule 3 (empty -> .) ]

    moreTabs                       shift and go to state 210
    empty                          shift and go to state 213

state 202

    (27) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE . f_resetTab f_incTab block f_endModule functions
    (53) f_resetTab -> .

    TAB             reduce using rule 53 (f_resetTab -> .)
    DEF             reduce using rule 53 (f_resetTab -> .)
    $end            reduce using rule 53 (f_resetTab -> .)

    f_resetTab                     shift and go to state 214

state 203

    (37) parameterList -> COMMA tipo ID f_addToParam . parameterList
    (36) parameterList -> . empty
    (37) parameterList -> . COMMA tipo ID f_addToParam parameterList
    (3) empty -> .

    COMMA           shift and go to state 168
    RPAREN          reduce using rule 3 (empty -> .)

    parameterList                  shift and go to state 215
    empty                          shift and go to state 167

state 204

    (75) expressionList -> COMMA expression f_genParam expressionList .

    RPAREN          reduce using rule 75 (expressionList -> COMMA expression f_genParam expressionList .)


state 205

    (31) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE . f_resetTab f_incTab block f_endModule functions
    (53) f_resetTab -> .

    TAB             reduce using rule 53 (f_resetTab -> .)
    DEF             reduce using rule 53 (f_resetTab -> .)
    $end            reduce using rule 53 (f_resetTab -> .)

    f_resetTab                     shift and go to state 216

state 206

    (30) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule . functions
    (26) functions -> . DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (27) functions -> . DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (28) functions -> . DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (29) functions -> . DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (30) functions -> . DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (31) functions -> . DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (32) functions -> . empty
    (3) empty -> .

    DEF             shift and go to state 36
    $end            reduce using rule 3 (empty -> .)

    functions                      shift and go to state 217
    empty                          shift and go to state 38

state 207

    (29) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE . f_resetTab f_incTab block f_endModule functions
    (53) f_resetTab -> .

    TAB             reduce using rule 53 (f_resetTab -> .)
    DEF             reduce using rule 53 (f_resetTab -> .)
    $end            reduce using rule 53 (f_resetTab -> .)

    f_resetTab                     shift and go to state 218

state 208

    (28) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule . functions
    (26) functions -> . DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (27) functions -> . DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (28) functions -> . DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (29) functions -> . DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (30) functions -> . DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (31) functions -> . DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (32) functions -> . empty
    (3) empty -> .

    DEF             shift and go to state 36
    $end            reduce using rule 3 (empty -> .)

    functions                      shift and go to state 219
    empty                          shift and go to state 38

state 209

    (26) functions -> DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions .

    $end            reduce using rule 26 (functions -> DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions .)


state 210

    (45) block -> TAB f_addTab moreTabs . statement moreStatements
    (55) statement -> . vars
    (56) statement -> . assign
    (57) statement -> . f_checkTab condition
    (58) statement -> . f_checkTab cycle
    (59) statement -> . f_checkTab doCycle
    (60) statement -> . f_checkTab funct NEWLINE f_resetTab
    (61) statement -> . f_checkTab RETURN expression f_return NEWLINE f_resetTab
    (16) vars -> . f_checkTab tipo idList NEWLINE f_resetTab vars
    (17) vars -> . empty
    (39) assign -> . f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual assign
    (40) assign -> . empty
    (54) f_checkTab -> .
    (3) empty -> .

  ! reduce/reduce conflict for WHILE resolved using rule 3 (empty -> .)
    RETURN          reduce using rule 54 (f_checkTab -> .)
    ID              reduce using rule 54 (f_checkTab -> .)
    IF              reduce using rule 54 (f_checkTab -> .)
    DO              reduce using rule 54 (f_checkTab -> .)
    BOOL            reduce using rule 54 (f_checkTab -> .)
    INT             reduce using rule 54 (f_checkTab -> .)
    FLOAT           reduce using rule 54 (f_checkTab -> .)
    STRING          reduce using rule 54 (f_checkTab -> .)
    IMAGE           reduce using rule 54 (f_checkTab -> .)
    TAB             reduce using rule 3 (empty -> .)
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)
    WHILE           reduce using rule 3 (empty -> .)
    ELSE            reduce using rule 3 (empty -> .)

  ! WHILE           [ reduce using rule 54 (f_checkTab -> .) ]

    vars                           shift and go to state 220
    f_checkTab                     shift and go to state 221
    empty                          shift and go to state 222
    statement                      shift and go to state 223
    assign                         shift and go to state 224

state 211

    (49) moreTabs -> TAB . f_addTab moreTabs
    (52) f_addTab -> .

    TAB             reduce using rule 52 (f_addTab -> .)
    NEWLINE         reduce using rule 52 (f_addTab -> .)
    RETURN          reduce using rule 52 (f_addTab -> .)
    ID              reduce using rule 52 (f_addTab -> .)
    IF              reduce using rule 52 (f_addTab -> .)
    WHILE           reduce using rule 52 (f_addTab -> .)
    DO              reduce using rule 52 (f_addTab -> .)
    BOOL            reduce using rule 52 (f_addTab -> .)
    INT             reduce using rule 52 (f_addTab -> .)
    FLOAT           reduce using rule 52 (f_addTab -> .)
    STRING          reduce using rule 52 (f_addTab -> .)
    IMAGE           reduce using rule 52 (f_addTab -> .)
    DEF             reduce using rule 52 (f_addTab -> .)
    $end            reduce using rule 52 (f_addTab -> .)
    ELSE            reduce using rule 52 (f_addTab -> .)

    f_addTab                       shift and go to state 225

state 212

    (50) moreTabs -> NEWLINE . f_resetTab TAB f_addTab moreTabs
    (53) f_resetTab -> .

    TAB             reduce using rule 53 (f_resetTab -> .)

    f_resetTab                     shift and go to state 226

state 213

    (48) moreTabs -> empty .

    TAB             reduce using rule 48 (moreTabs -> empty .)
    RETURN          reduce using rule 48 (moreTabs -> empty .)
    ID              reduce using rule 48 (moreTabs -> empty .)
    IF              reduce using rule 48 (moreTabs -> empty .)
    WHILE           reduce using rule 48 (moreTabs -> empty .)
    DO              reduce using rule 48 (moreTabs -> empty .)
    BOOL            reduce using rule 48 (moreTabs -> empty .)
    INT             reduce using rule 48 (moreTabs -> empty .)
    FLOAT           reduce using rule 48 (moreTabs -> empty .)
    STRING          reduce using rule 48 (moreTabs -> empty .)
    IMAGE           reduce using rule 48 (moreTabs -> empty .)
    DEF             reduce using rule 48 (moreTabs -> empty .)
    $end            reduce using rule 48 (moreTabs -> empty .)
    ELSE            reduce using rule 48 (moreTabs -> empty .)


state 214

    (27) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab . f_incTab block f_endModule functions
    (51) f_incTab -> .

    TAB             reduce using rule 51 (f_incTab -> .)
    DEF             reduce using rule 51 (f_incTab -> .)
    $end            reduce using rule 51 (f_incTab -> .)

    f_incTab                       shift and go to state 227

state 215

    (37) parameterList -> COMMA tipo ID f_addToParam parameterList .

    RPAREN          reduce using rule 37 (parameterList -> COMMA tipo ID f_addToParam parameterList .)


state 216

    (31) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab . f_incTab block f_endModule functions
    (51) f_incTab -> .

    TAB             reduce using rule 51 (f_incTab -> .)
    DEF             reduce using rule 51 (f_incTab -> .)
    $end            reduce using rule 51 (f_incTab -> .)

    f_incTab                       shift and go to state 228

state 217

    (30) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions .

    $end            reduce using rule 30 (functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions .)


state 218

    (29) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab . f_incTab block f_endModule functions
    (51) f_incTab -> .

    TAB             reduce using rule 51 (f_incTab -> .)
    DEF             reduce using rule 51 (f_incTab -> .)
    $end            reduce using rule 51 (f_incTab -> .)

    f_incTab                       shift and go to state 229

state 219

    (28) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions .

    $end            reduce using rule 28 (functions -> DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions .)


state 220

    (55) statement -> vars .

    TAB             reduce using rule 55 (statement -> vars .)
    DEF             reduce using rule 55 (statement -> vars .)
    $end            reduce using rule 55 (statement -> vars .)
    WHILE           reduce using rule 55 (statement -> vars .)
    ELSE            reduce using rule 55 (statement -> vars .)


state 221

    (57) statement -> f_checkTab . condition
    (58) statement -> f_checkTab . cycle
    (59) statement -> f_checkTab . doCycle
    (60) statement -> f_checkTab . funct NEWLINE f_resetTab
    (61) statement -> f_checkTab . RETURN expression f_return NEWLINE f_resetTab
    (16) vars -> f_checkTab . tipo idList NEWLINE f_resetTab vars
    (39) assign -> f_checkTab . ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual assign
    (63) condition -> . IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block
    (64) condition -> . IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block
    (65) cycle -> . WHILE f_isCondition expression COLON NEWLINE f_resetTab f_incTab block
    (66) doCycle -> . DO f_pushDo COLON NEWLINE f_resetTab f_incTab block WHILE f_isDoWhile f_isCondition expression NEWLINE f_resetTab
    (71) funct -> . ID f_checkProc LPAREN RPAREN
    (72) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN
    (21) tipo -> . BOOL f_saveType
    (22) tipo -> . INT f_saveType
    (23) tipo -> . FLOAT f_saveType
    (24) tipo -> . STRING f_saveType
    (25) tipo -> . IMAGE f_saveType

    RETURN          shift and go to state 231
    ID              shift and go to state 236
    IF              shift and go to state 238
    WHILE           shift and go to state 233
    DO              shift and go to state 230
    BOOL            shift and go to state 25
    INT             shift and go to state 24
    FLOAT           shift and go to state 23
    STRING          shift and go to state 26
    IMAGE           shift and go to state 27

    funct                          shift and go to state 232
    tipo                           shift and go to state 28
    doCycle                        shift and go to state 234
    condition                      shift and go to state 237
    cycle                          shift and go to state 235

state 222

    (17) vars -> empty .
    (40) assign -> empty .

  ! reduce/reduce conflict for TAB resolved using rule 17 (vars -> empty .)
  ! reduce/reduce conflict for DEF resolved using rule 17 (vars -> empty .)
  ! reduce/reduce conflict for $end resolved using rule 17 (vars -> empty .)
  ! reduce/reduce conflict for WHILE resolved using rule 17 (vars -> empty .)
  ! reduce/reduce conflict for ELSE resolved using rule 17 (vars -> empty .)
    TAB             reduce using rule 17 (vars -> empty .)
    DEF             reduce using rule 17 (vars -> empty .)
    $end            reduce using rule 17 (vars -> empty .)
    WHILE           reduce using rule 17 (vars -> empty .)
    ELSE            reduce using rule 17 (vars -> empty .)

  ! TAB             [ reduce using rule 40 (assign -> empty .) ]
  ! DEF             [ reduce using rule 40 (assign -> empty .) ]
  ! $end            [ reduce using rule 40 (assign -> empty .) ]
  ! WHILE           [ reduce using rule 40 (assign -> empty .) ]
  ! ELSE            [ reduce using rule 40 (assign -> empty .) ]


state 223

    (45) block -> TAB f_addTab moreTabs statement . moreStatements
    (46) moreStatements -> . empty
    (47) moreStatements -> . TAB f_addTab moreTabs statement moreStatements
    (3) empty -> .

  ! shift/reduce conflict for TAB resolved as shift
    TAB             shift and go to state 239
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)
    WHILE           reduce using rule 3 (empty -> .)
    ELSE            reduce using rule 3 (empty -> .)

  ! TAB             [ reduce using rule 3 (empty -> .) ]

    empty                          shift and go to state 240
    moreStatements                 shift and go to state 241

state 224

    (56) statement -> assign .

    TAB             reduce using rule 56 (statement -> assign .)
    DEF             reduce using rule 56 (statement -> assign .)
    $end            reduce using rule 56 (statement -> assign .)
    WHILE           reduce using rule 56 (statement -> assign .)
    ELSE            reduce using rule 56 (statement -> assign .)


state 225

    (49) moreTabs -> TAB f_addTab . moreTabs
    (48) moreTabs -> . empty
    (49) moreTabs -> . TAB f_addTab moreTabs
    (50) moreTabs -> . NEWLINE f_resetTab TAB f_addTab moreTabs
    (3) empty -> .

  ! shift/reduce conflict for TAB resolved as shift
    TAB             shift and go to state 211
    NEWLINE         shift and go to state 212
    RETURN          reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)
    IF              reduce using rule 3 (empty -> .)
    WHILE           reduce using rule 3 (empty -> .)
    DO              reduce using rule 3 (empty -> .)
    BOOL            reduce using rule 3 (empty -> .)
    INT             reduce using rule 3 (empty -> .)
    FLOAT           reduce using rule 3 (empty -> .)
    STRING          reduce using rule 3 (empty -> .)
    IMAGE           reduce using rule 3 (empty -> .)
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)
    ELSE            reduce using rule 3 (empty -> .)

  ! TAB             [ reduce using rule 3 (empty -> .) ]

    empty                          shift and go to state 213
    moreTabs                       shift and go to state 242

state 226

    (50) moreTabs -> NEWLINE f_resetTab . TAB f_addTab moreTabs

    TAB             shift and go to state 243


state 227

    (27) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab . block f_endModule functions
    (44) block -> . empty
    (45) block -> . TAB f_addTab moreTabs statement moreStatements
    (3) empty -> .

    TAB             shift and go to state 192
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)

    empty                          shift and go to state 190
    block                          shift and go to state 244

state 228

    (31) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab . block f_endModule functions
    (44) block -> . empty
    (45) block -> . TAB f_addTab moreTabs statement moreStatements
    (3) empty -> .

    TAB             shift and go to state 192
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)

    empty                          shift and go to state 190
    block                          shift and go to state 245

state 229

    (29) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab . block f_endModule functions
    (44) block -> . empty
    (45) block -> . TAB f_addTab moreTabs statement moreStatements
    (3) empty -> .

    TAB             shift and go to state 192
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)

    empty                          shift and go to state 190
    block                          shift and go to state 246

state 230

    (66) doCycle -> DO . f_pushDo COLON NEWLINE f_resetTab f_incTab block WHILE f_isDoWhile f_isCondition expression NEWLINE f_resetTab
    (68) f_pushDo -> .

    COLON           reduce using rule 68 (f_pushDo -> .)

    f_pushDo                       shift and go to state 247

state 231

    (61) statement -> f_checkTab RETURN . expression f_return NEWLINE f_resetTab
    (77) expression -> . exp
    (78) expression -> . exp compareToken exp f_popComparation
    (86) exp -> . term moreTerms
    (91) term -> . factor moreFactors
    (96) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (97) factor -> . cvar
    (98) factor -> . funct
    (102) cvar -> . ID f_isID
    (103) cvar -> . C_BOOL f_isConst
    (104) cvar -> . C_INT f_isConst
    (105) cvar -> . C_FLOAT f_isConst
    (106) cvar -> . C_STRING f_isConst
    (71) funct -> . ID f_checkProc LPAREN RPAREN
    (72) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 83
    ID              shift and go to state 85
    C_BOOL          shift and go to state 81
    C_INT           shift and go to state 84
    C_FLOAT         shift and go to state 79
    C_STRING        shift and go to state 86

    term                           shift and go to state 87
    funct                          shift and go to state 80
    exp                            shift and go to state 88
    factor                         shift and go to state 82
    cvar                           shift and go to state 78
    expression                     shift and go to state 248

state 232

    (60) statement -> f_checkTab funct . NEWLINE f_resetTab

    NEWLINE         shift and go to state 249


state 233

    (65) cycle -> WHILE . f_isCondition expression COLON NEWLINE f_resetTab f_incTab block
    (70) f_isCondition -> .

    LPAREN          reduce using rule 70 (f_isCondition -> .)
    ID              reduce using rule 70 (f_isCondition -> .)
    C_BOOL          reduce using rule 70 (f_isCondition -> .)
    C_INT           reduce using rule 70 (f_isCondition -> .)
    C_FLOAT         reduce using rule 70 (f_isCondition -> .)
    C_STRING        reduce using rule 70 (f_isCondition -> .)

    f_isCondition                  shift and go to state 250

state 234

    (59) statement -> f_checkTab doCycle .

    TAB             reduce using rule 59 (statement -> f_checkTab doCycle .)
    DEF             reduce using rule 59 (statement -> f_checkTab doCycle .)
    $end            reduce using rule 59 (statement -> f_checkTab doCycle .)
    WHILE           reduce using rule 59 (statement -> f_checkTab doCycle .)
    ELSE            reduce using rule 59 (statement -> f_checkTab doCycle .)


state 235

    (58) statement -> f_checkTab cycle .

    TAB             reduce using rule 58 (statement -> f_checkTab cycle .)
    DEF             reduce using rule 58 (statement -> f_checkTab cycle .)
    $end            reduce using rule 58 (statement -> f_checkTab cycle .)
    WHILE           reduce using rule 58 (statement -> f_checkTab cycle .)
    ELSE            reduce using rule 58 (statement -> f_checkTab cycle .)


state 236

    (39) assign -> f_checkTab ID . f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual assign
    (71) funct -> ID . f_checkProc LPAREN RPAREN
    (72) funct -> ID . f_checkProc LPAREN expression f_genParam expressionList RPAREN
    (43) f_checkID -> .
    (73) f_checkProc -> .

    EQUAL           reduce using rule 43 (f_checkID -> .)
    LPAREN          reduce using rule 73 (f_checkProc -> .)

    f_checkProc                    shift and go to state 103
    f_checkID                      shift and go to state 54

state 237

    (57) statement -> f_checkTab condition .

    TAB             reduce using rule 57 (statement -> f_checkTab condition .)
    DEF             reduce using rule 57 (statement -> f_checkTab condition .)
    $end            reduce using rule 57 (statement -> f_checkTab condition .)
    WHILE           reduce using rule 57 (statement -> f_checkTab condition .)
    ELSE            reduce using rule 57 (statement -> f_checkTab condition .)


state 238

    (63) condition -> IF . f_isCondition expression COLON NEWLINE f_resetTab f_incTab block
    (64) condition -> IF . f_isCondition expression COLON NEWLINE f_resetTab f_incTab block ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block
    (70) f_isCondition -> .

    LPAREN          reduce using rule 70 (f_isCondition -> .)
    ID              reduce using rule 70 (f_isCondition -> .)
    C_BOOL          reduce using rule 70 (f_isCondition -> .)
    C_INT           reduce using rule 70 (f_isCondition -> .)
    C_FLOAT         reduce using rule 70 (f_isCondition -> .)
    C_STRING        reduce using rule 70 (f_isCondition -> .)

    f_isCondition                  shift and go to state 251

state 239

    (47) moreStatements -> TAB . f_addTab moreTabs statement moreStatements
    (52) f_addTab -> .

    TAB             reduce using rule 52 (f_addTab -> .)
    NEWLINE         reduce using rule 52 (f_addTab -> .)
    RETURN          reduce using rule 52 (f_addTab -> .)
    ID              reduce using rule 52 (f_addTab -> .)
    IF              reduce using rule 52 (f_addTab -> .)
    WHILE           reduce using rule 52 (f_addTab -> .)
    DO              reduce using rule 52 (f_addTab -> .)
    BOOL            reduce using rule 52 (f_addTab -> .)
    INT             reduce using rule 52 (f_addTab -> .)
    FLOAT           reduce using rule 52 (f_addTab -> .)
    STRING          reduce using rule 52 (f_addTab -> .)
    IMAGE           reduce using rule 52 (f_addTab -> .)
    DEF             reduce using rule 52 (f_addTab -> .)
    $end            reduce using rule 52 (f_addTab -> .)
    ELSE            reduce using rule 52 (f_addTab -> .)

    f_addTab                       shift and go to state 252

state 240

    (46) moreStatements -> empty .

    TAB             reduce using rule 46 (moreStatements -> empty .)
    DEF             reduce using rule 46 (moreStatements -> empty .)
    $end            reduce using rule 46 (moreStatements -> empty .)
    WHILE           reduce using rule 46 (moreStatements -> empty .)
    ELSE            reduce using rule 46 (moreStatements -> empty .)


state 241

    (45) block -> TAB f_addTab moreTabs statement moreStatements .

    WHILE           reduce using rule 45 (block -> TAB f_addTab moreTabs statement moreStatements .)
    DEF             reduce using rule 45 (block -> TAB f_addTab moreTabs statement moreStatements .)
    $end            reduce using rule 45 (block -> TAB f_addTab moreTabs statement moreStatements .)
    TAB             reduce using rule 45 (block -> TAB f_addTab moreTabs statement moreStatements .)
    ELSE            reduce using rule 45 (block -> TAB f_addTab moreTabs statement moreStatements .)


state 242

    (49) moreTabs -> TAB f_addTab moreTabs .

    TAB             reduce using rule 49 (moreTabs -> TAB f_addTab moreTabs .)
    RETURN          reduce using rule 49 (moreTabs -> TAB f_addTab moreTabs .)
    ID              reduce using rule 49 (moreTabs -> TAB f_addTab moreTabs .)
    IF              reduce using rule 49 (moreTabs -> TAB f_addTab moreTabs .)
    WHILE           reduce using rule 49 (moreTabs -> TAB f_addTab moreTabs .)
    DO              reduce using rule 49 (moreTabs -> TAB f_addTab moreTabs .)
    BOOL            reduce using rule 49 (moreTabs -> TAB f_addTab moreTabs .)
    INT             reduce using rule 49 (moreTabs -> TAB f_addTab moreTabs .)
    FLOAT           reduce using rule 49 (moreTabs -> TAB f_addTab moreTabs .)
    STRING          reduce using rule 49 (moreTabs -> TAB f_addTab moreTabs .)
    IMAGE           reduce using rule 49 (moreTabs -> TAB f_addTab moreTabs .)
    DEF             reduce using rule 49 (moreTabs -> TAB f_addTab moreTabs .)
    $end            reduce using rule 49 (moreTabs -> TAB f_addTab moreTabs .)
    ELSE            reduce using rule 49 (moreTabs -> TAB f_addTab moreTabs .)


state 243

    (50) moreTabs -> NEWLINE f_resetTab TAB . f_addTab moreTabs
    (52) f_addTab -> .

    TAB             reduce using rule 52 (f_addTab -> .)
    NEWLINE         reduce using rule 52 (f_addTab -> .)
    RETURN          reduce using rule 52 (f_addTab -> .)
    ID              reduce using rule 52 (f_addTab -> .)
    IF              reduce using rule 52 (f_addTab -> .)
    WHILE           reduce using rule 52 (f_addTab -> .)
    DO              reduce using rule 52 (f_addTab -> .)
    BOOL            reduce using rule 52 (f_addTab -> .)
    INT             reduce using rule 52 (f_addTab -> .)
    FLOAT           reduce using rule 52 (f_addTab -> .)
    STRING          reduce using rule 52 (f_addTab -> .)
    IMAGE           reduce using rule 52 (f_addTab -> .)
    DEF             reduce using rule 52 (f_addTab -> .)
    $end            reduce using rule 52 (f_addTab -> .)
    ELSE            reduce using rule 52 (f_addTab -> .)

    f_addTab                       shift and go to state 253

state 244

    (27) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block . f_endModule functions
    (34) f_endModule -> .

    DEF             reduce using rule 34 (f_endModule -> .)
    $end            reduce using rule 34 (f_endModule -> .)

    f_endModule                    shift and go to state 254

state 245

    (31) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block . f_endModule functions
    (34) f_endModule -> .

    DEF             reduce using rule 34 (f_endModule -> .)
    $end            reduce using rule 34 (f_endModule -> .)

    f_endModule                    shift and go to state 255

state 246

    (29) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block . f_endModule functions
    (34) f_endModule -> .

    DEF             reduce using rule 34 (f_endModule -> .)
    $end            reduce using rule 34 (f_endModule -> .)

    f_endModule                    shift and go to state 256

state 247

    (66) doCycle -> DO f_pushDo . COLON NEWLINE f_resetTab f_incTab block WHILE f_isDoWhile f_isCondition expression NEWLINE f_resetTab

    COLON           shift and go to state 257


state 248

    (61) statement -> f_checkTab RETURN expression . f_return NEWLINE f_resetTab
    (62) f_return -> .

    NEWLINE         reduce using rule 62 (f_return -> .)

    f_return                       shift and go to state 258

state 249

    (60) statement -> f_checkTab funct NEWLINE . f_resetTab
    (53) f_resetTab -> .

    TAB             reduce using rule 53 (f_resetTab -> .)
    DEF             reduce using rule 53 (f_resetTab -> .)
    $end            reduce using rule 53 (f_resetTab -> .)
    WHILE           reduce using rule 53 (f_resetTab -> .)
    ELSE            reduce using rule 53 (f_resetTab -> .)

    f_resetTab                     shift and go to state 259

state 250

    (65) cycle -> WHILE f_isCondition . expression COLON NEWLINE f_resetTab f_incTab block
    (77) expression -> . exp
    (78) expression -> . exp compareToken exp f_popComparation
    (86) exp -> . term moreTerms
    (91) term -> . factor moreFactors
    (96) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (97) factor -> . cvar
    (98) factor -> . funct
    (102) cvar -> . ID f_isID
    (103) cvar -> . C_BOOL f_isConst
    (104) cvar -> . C_INT f_isConst
    (105) cvar -> . C_FLOAT f_isConst
    (106) cvar -> . C_STRING f_isConst
    (71) funct -> . ID f_checkProc LPAREN RPAREN
    (72) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 83
    ID              shift and go to state 85
    C_BOOL          shift and go to state 81
    C_INT           shift and go to state 84
    C_FLOAT         shift and go to state 79
    C_STRING        shift and go to state 86

    term                           shift and go to state 87
    funct                          shift and go to state 80
    exp                            shift and go to state 88
    factor                         shift and go to state 82
    cvar                           shift and go to state 78
    expression                     shift and go to state 260

state 251

    (63) condition -> IF f_isCondition . expression COLON NEWLINE f_resetTab f_incTab block
    (64) condition -> IF f_isCondition . expression COLON NEWLINE f_resetTab f_incTab block ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block
    (77) expression -> . exp
    (78) expression -> . exp compareToken exp f_popComparation
    (86) exp -> . term moreTerms
    (91) term -> . factor moreFactors
    (96) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (97) factor -> . cvar
    (98) factor -> . funct
    (102) cvar -> . ID f_isID
    (103) cvar -> . C_BOOL f_isConst
    (104) cvar -> . C_INT f_isConst
    (105) cvar -> . C_FLOAT f_isConst
    (106) cvar -> . C_STRING f_isConst
    (71) funct -> . ID f_checkProc LPAREN RPAREN
    (72) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 83
    ID              shift and go to state 85
    C_BOOL          shift and go to state 81
    C_INT           shift and go to state 84
    C_FLOAT         shift and go to state 79
    C_STRING        shift and go to state 86

    cvar                           shift and go to state 78
    funct                          shift and go to state 80
    factor                         shift and go to state 82
    term                           shift and go to state 87
    exp                            shift and go to state 88
    expression                     shift and go to state 261

state 252

    (47) moreStatements -> TAB f_addTab . moreTabs statement moreStatements
    (48) moreTabs -> . empty
    (49) moreTabs -> . TAB f_addTab moreTabs
    (50) moreTabs -> . NEWLINE f_resetTab TAB f_addTab moreTabs
    (3) empty -> .

  ! shift/reduce conflict for TAB resolved as shift
    TAB             shift and go to state 211
    NEWLINE         shift and go to state 212
    RETURN          reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)
    IF              reduce using rule 3 (empty -> .)
    WHILE           reduce using rule 3 (empty -> .)
    DO              reduce using rule 3 (empty -> .)
    BOOL            reduce using rule 3 (empty -> .)
    INT             reduce using rule 3 (empty -> .)
    FLOAT           reduce using rule 3 (empty -> .)
    STRING          reduce using rule 3 (empty -> .)
    IMAGE           reduce using rule 3 (empty -> .)
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)
    ELSE            reduce using rule 3 (empty -> .)

  ! TAB             [ reduce using rule 3 (empty -> .) ]

    moreTabs                       shift and go to state 262
    empty                          shift and go to state 213

state 253

    (50) moreTabs -> NEWLINE f_resetTab TAB f_addTab . moreTabs
    (48) moreTabs -> . empty
    (49) moreTabs -> . TAB f_addTab moreTabs
    (50) moreTabs -> . NEWLINE f_resetTab TAB f_addTab moreTabs
    (3) empty -> .

  ! shift/reduce conflict for TAB resolved as shift
    TAB             shift and go to state 211
    NEWLINE         shift and go to state 212
    RETURN          reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)
    IF              reduce using rule 3 (empty -> .)
    WHILE           reduce using rule 3 (empty -> .)
    DO              reduce using rule 3 (empty -> .)
    BOOL            reduce using rule 3 (empty -> .)
    INT             reduce using rule 3 (empty -> .)
    FLOAT           reduce using rule 3 (empty -> .)
    STRING          reduce using rule 3 (empty -> .)
    IMAGE           reduce using rule 3 (empty -> .)
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)
    ELSE            reduce using rule 3 (empty -> .)

  ! TAB             [ reduce using rule 3 (empty -> .) ]

    empty                          shift and go to state 213
    moreTabs                       shift and go to state 263

state 254

    (27) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule . functions
    (26) functions -> . DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (27) functions -> . DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (28) functions -> . DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (29) functions -> . DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (30) functions -> . DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (31) functions -> . DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (32) functions -> . empty
    (3) empty -> .

    DEF             shift and go to state 36
    $end            reduce using rule 3 (empty -> .)

    functions                      shift and go to state 264
    empty                          shift and go to state 38

state 255

    (31) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule . functions
    (26) functions -> . DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (27) functions -> . DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (28) functions -> . DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (29) functions -> . DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (30) functions -> . DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (31) functions -> . DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (32) functions -> . empty
    (3) empty -> .

    DEF             shift and go to state 36
    $end            reduce using rule 3 (empty -> .)

    functions                      shift and go to state 265
    empty                          shift and go to state 38

state 256

    (29) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule . functions
    (26) functions -> . DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (27) functions -> . DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (28) functions -> . DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (29) functions -> . DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (30) functions -> . DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (31) functions -> . DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (32) functions -> . empty
    (3) empty -> .

    DEF             shift and go to state 36
    $end            reduce using rule 3 (empty -> .)

    functions                      shift and go to state 266
    empty                          shift and go to state 38

state 257

    (66) doCycle -> DO f_pushDo COLON . NEWLINE f_resetTab f_incTab block WHILE f_isDoWhile f_isCondition expression NEWLINE f_resetTab

    NEWLINE         shift and go to state 267


state 258

    (61) statement -> f_checkTab RETURN expression f_return . NEWLINE f_resetTab

    NEWLINE         shift and go to state 268


state 259

    (60) statement -> f_checkTab funct NEWLINE f_resetTab .

    TAB             reduce using rule 60 (statement -> f_checkTab funct NEWLINE f_resetTab .)
    DEF             reduce using rule 60 (statement -> f_checkTab funct NEWLINE f_resetTab .)
    $end            reduce using rule 60 (statement -> f_checkTab funct NEWLINE f_resetTab .)
    WHILE           reduce using rule 60 (statement -> f_checkTab funct NEWLINE f_resetTab .)
    ELSE            reduce using rule 60 (statement -> f_checkTab funct NEWLINE f_resetTab .)


state 260

    (65) cycle -> WHILE f_isCondition expression . COLON NEWLINE f_resetTab f_incTab block

    COLON           shift and go to state 269


state 261

    (63) condition -> IF f_isCondition expression . COLON NEWLINE f_resetTab f_incTab block
    (64) condition -> IF f_isCondition expression . COLON NEWLINE f_resetTab f_incTab block ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block

    COLON           shift and go to state 270


state 262

    (47) moreStatements -> TAB f_addTab moreTabs . statement moreStatements
    (55) statement -> . vars
    (56) statement -> . assign
    (57) statement -> . f_checkTab condition
    (58) statement -> . f_checkTab cycle
    (59) statement -> . f_checkTab doCycle
    (60) statement -> . f_checkTab funct NEWLINE f_resetTab
    (61) statement -> . f_checkTab RETURN expression f_return NEWLINE f_resetTab
    (16) vars -> . f_checkTab tipo idList NEWLINE f_resetTab vars
    (17) vars -> . empty
    (39) assign -> . f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual assign
    (40) assign -> . empty
    (54) f_checkTab -> .
    (3) empty -> .

  ! reduce/reduce conflict for WHILE resolved using rule 3 (empty -> .)
    RETURN          reduce using rule 54 (f_checkTab -> .)
    ID              reduce using rule 54 (f_checkTab -> .)
    IF              reduce using rule 54 (f_checkTab -> .)
    DO              reduce using rule 54 (f_checkTab -> .)
    BOOL            reduce using rule 54 (f_checkTab -> .)
    INT             reduce using rule 54 (f_checkTab -> .)
    FLOAT           reduce using rule 54 (f_checkTab -> .)
    STRING          reduce using rule 54 (f_checkTab -> .)
    IMAGE           reduce using rule 54 (f_checkTab -> .)
    TAB             reduce using rule 3 (empty -> .)
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)
    WHILE           reduce using rule 3 (empty -> .)
    ELSE            reduce using rule 3 (empty -> .)

  ! WHILE           [ reduce using rule 54 (f_checkTab -> .) ]

    vars                           shift and go to state 220
    f_checkTab                     shift and go to state 221
    empty                          shift and go to state 222
    statement                      shift and go to state 271
    assign                         shift and go to state 224

state 263

    (50) moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .

    TAB             reduce using rule 50 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    RETURN          reduce using rule 50 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    ID              reduce using rule 50 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    IF              reduce using rule 50 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    WHILE           reduce using rule 50 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    DO              reduce using rule 50 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    BOOL            reduce using rule 50 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    INT             reduce using rule 50 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    FLOAT           reduce using rule 50 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    STRING          reduce using rule 50 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    IMAGE           reduce using rule 50 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    DEF             reduce using rule 50 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    $end            reduce using rule 50 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    ELSE            reduce using rule 50 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)


state 264

    (27) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions .

    $end            reduce using rule 27 (functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions .)


state 265

    (31) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions .

    $end            reduce using rule 31 (functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions .)


state 266

    (29) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions .

    $end            reduce using rule 29 (functions -> DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions .)


state 267

    (66) doCycle -> DO f_pushDo COLON NEWLINE . f_resetTab f_incTab block WHILE f_isDoWhile f_isCondition expression NEWLINE f_resetTab
    (53) f_resetTab -> .

    TAB             reduce using rule 53 (f_resetTab -> .)
    WHILE           reduce using rule 53 (f_resetTab -> .)

    f_resetTab                     shift and go to state 272

state 268

    (61) statement -> f_checkTab RETURN expression f_return NEWLINE . f_resetTab
    (53) f_resetTab -> .

    TAB             reduce using rule 53 (f_resetTab -> .)
    DEF             reduce using rule 53 (f_resetTab -> .)
    $end            reduce using rule 53 (f_resetTab -> .)
    WHILE           reduce using rule 53 (f_resetTab -> .)
    ELSE            reduce using rule 53 (f_resetTab -> .)

    f_resetTab                     shift and go to state 273

state 269

    (65) cycle -> WHILE f_isCondition expression COLON . NEWLINE f_resetTab f_incTab block

    NEWLINE         shift and go to state 274


state 270

    (63) condition -> IF f_isCondition expression COLON . NEWLINE f_resetTab f_incTab block
    (64) condition -> IF f_isCondition expression COLON . NEWLINE f_resetTab f_incTab block ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block

    NEWLINE         shift and go to state 275


state 271

    (47) moreStatements -> TAB f_addTab moreTabs statement . moreStatements
    (46) moreStatements -> . empty
    (47) moreStatements -> . TAB f_addTab moreTabs statement moreStatements
    (3) empty -> .

  ! shift/reduce conflict for TAB resolved as shift
    TAB             shift and go to state 239
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)
    WHILE           reduce using rule 3 (empty -> .)
    ELSE            reduce using rule 3 (empty -> .)

  ! TAB             [ reduce using rule 3 (empty -> .) ]

    empty                          shift and go to state 240
    moreStatements                 shift and go to state 276

state 272

    (66) doCycle -> DO f_pushDo COLON NEWLINE f_resetTab . f_incTab block WHILE f_isDoWhile f_isCondition expression NEWLINE f_resetTab
    (51) f_incTab -> .

    TAB             reduce using rule 51 (f_incTab -> .)
    WHILE           reduce using rule 51 (f_incTab -> .)

    f_incTab                       shift and go to state 277

state 273

    (61) statement -> f_checkTab RETURN expression f_return NEWLINE f_resetTab .

    TAB             reduce using rule 61 (statement -> f_checkTab RETURN expression f_return NEWLINE f_resetTab .)
    DEF             reduce using rule 61 (statement -> f_checkTab RETURN expression f_return NEWLINE f_resetTab .)
    $end            reduce using rule 61 (statement -> f_checkTab RETURN expression f_return NEWLINE f_resetTab .)
    WHILE           reduce using rule 61 (statement -> f_checkTab RETURN expression f_return NEWLINE f_resetTab .)
    ELSE            reduce using rule 61 (statement -> f_checkTab RETURN expression f_return NEWLINE f_resetTab .)


state 274

    (65) cycle -> WHILE f_isCondition expression COLON NEWLINE . f_resetTab f_incTab block
    (53) f_resetTab -> .

    TAB             reduce using rule 53 (f_resetTab -> .)
    DEF             reduce using rule 53 (f_resetTab -> .)
    $end            reduce using rule 53 (f_resetTab -> .)
    WHILE           reduce using rule 53 (f_resetTab -> .)
    ELSE            reduce using rule 53 (f_resetTab -> .)

    f_resetTab                     shift and go to state 278

state 275

    (63) condition -> IF f_isCondition expression COLON NEWLINE . f_resetTab f_incTab block
    (64) condition -> IF f_isCondition expression COLON NEWLINE . f_resetTab f_incTab block ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block
    (53) f_resetTab -> .

    TAB             reduce using rule 53 (f_resetTab -> .)
    ELSE            reduce using rule 53 (f_resetTab -> .)
    DEF             reduce using rule 53 (f_resetTab -> .)
    $end            reduce using rule 53 (f_resetTab -> .)
    WHILE           reduce using rule 53 (f_resetTab -> .)

    f_resetTab                     shift and go to state 279

state 276

    (47) moreStatements -> TAB f_addTab moreTabs statement moreStatements .

    TAB             reduce using rule 47 (moreStatements -> TAB f_addTab moreTabs statement moreStatements .)
    DEF             reduce using rule 47 (moreStatements -> TAB f_addTab moreTabs statement moreStatements .)
    $end            reduce using rule 47 (moreStatements -> TAB f_addTab moreTabs statement moreStatements .)
    WHILE           reduce using rule 47 (moreStatements -> TAB f_addTab moreTabs statement moreStatements .)
    ELSE            reduce using rule 47 (moreStatements -> TAB f_addTab moreTabs statement moreStatements .)


state 277

    (66) doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab . block WHILE f_isDoWhile f_isCondition expression NEWLINE f_resetTab
    (44) block -> . empty
    (45) block -> . TAB f_addTab moreTabs statement moreStatements
    (3) empty -> .

    TAB             shift and go to state 192
    WHILE           reduce using rule 3 (empty -> .)

    empty                          shift and go to state 190
    block                          shift and go to state 280

state 278

    (65) cycle -> WHILE f_isCondition expression COLON NEWLINE f_resetTab . f_incTab block
    (51) f_incTab -> .

    TAB             reduce using rule 51 (f_incTab -> .)
    DEF             reduce using rule 51 (f_incTab -> .)
    $end            reduce using rule 51 (f_incTab -> .)
    WHILE           reduce using rule 51 (f_incTab -> .)
    ELSE            reduce using rule 51 (f_incTab -> .)

    f_incTab                       shift and go to state 281

state 279

    (63) condition -> IF f_isCondition expression COLON NEWLINE f_resetTab . f_incTab block
    (64) condition -> IF f_isCondition expression COLON NEWLINE f_resetTab . f_incTab block ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block
    (51) f_incTab -> .

    TAB             reduce using rule 51 (f_incTab -> .)
    ELSE            reduce using rule 51 (f_incTab -> .)
    DEF             reduce using rule 51 (f_incTab -> .)
    $end            reduce using rule 51 (f_incTab -> .)
    WHILE           reduce using rule 51 (f_incTab -> .)

    f_incTab                       shift and go to state 282

state 280

    (66) doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block . WHILE f_isDoWhile f_isCondition expression NEWLINE f_resetTab

    WHILE           shift and go to state 283


state 281

    (65) cycle -> WHILE f_isCondition expression COLON NEWLINE f_resetTab f_incTab . block
    (44) block -> . empty
    (45) block -> . TAB f_addTab moreTabs statement moreStatements
    (3) empty -> .

  ! shift/reduce conflict for TAB resolved as shift
    TAB             shift and go to state 192
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)
    WHILE           reduce using rule 3 (empty -> .)
    ELSE            reduce using rule 3 (empty -> .)

  ! TAB             [ reduce using rule 3 (empty -> .) ]

    block                          shift and go to state 284
    empty                          shift and go to state 190

state 282

    (63) condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab . block
    (64) condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab . block ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block
    (44) block -> . empty
    (45) block -> . TAB f_addTab moreTabs statement moreStatements
    (3) empty -> .

  ! shift/reduce conflict for TAB resolved as shift
    TAB             shift and go to state 192
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)
    WHILE           reduce using rule 3 (empty -> .)
    ELSE            reduce using rule 3 (empty -> .)

  ! TAB             [ reduce using rule 3 (empty -> .) ]

    empty                          shift and go to state 190
    block                          shift and go to state 285

state 283

    (66) doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block WHILE . f_isDoWhile f_isCondition expression NEWLINE f_resetTab
    (69) f_isDoWhile -> .

    LPAREN          reduce using rule 69 (f_isDoWhile -> .)
    ID              reduce using rule 69 (f_isDoWhile -> .)
    C_BOOL          reduce using rule 69 (f_isDoWhile -> .)
    C_INT           reduce using rule 69 (f_isDoWhile -> .)
    C_FLOAT         reduce using rule 69 (f_isDoWhile -> .)
    C_STRING        reduce using rule 69 (f_isDoWhile -> .)

    f_isDoWhile                    shift and go to state 286

state 284

    (65) cycle -> WHILE f_isCondition expression COLON NEWLINE f_resetTab f_incTab block .

    TAB             reduce using rule 65 (cycle -> WHILE f_isCondition expression COLON NEWLINE f_resetTab f_incTab block .)
    DEF             reduce using rule 65 (cycle -> WHILE f_isCondition expression COLON NEWLINE f_resetTab f_incTab block .)
    $end            reduce using rule 65 (cycle -> WHILE f_isCondition expression COLON NEWLINE f_resetTab f_incTab block .)
    WHILE           reduce using rule 65 (cycle -> WHILE f_isCondition expression COLON NEWLINE f_resetTab f_incTab block .)
    ELSE            reduce using rule 65 (cycle -> WHILE f_isCondition expression COLON NEWLINE f_resetTab f_incTab block .)


state 285

    (63) condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block .
    (64) condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block . ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block

  ! shift/reduce conflict for ELSE resolved as shift
    TAB             reduce using rule 63 (condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block .)
    DEF             reduce using rule 63 (condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block .)
    $end            reduce using rule 63 (condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block .)
    WHILE           reduce using rule 63 (condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block .)
    ELSE            shift and go to state 287

  ! ELSE            [ reduce using rule 63 (condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block .) ]


state 286

    (66) doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block WHILE f_isDoWhile . f_isCondition expression NEWLINE f_resetTab
    (70) f_isCondition -> .

    LPAREN          reduce using rule 70 (f_isCondition -> .)
    ID              reduce using rule 70 (f_isCondition -> .)
    C_BOOL          reduce using rule 70 (f_isCondition -> .)
    C_INT           reduce using rule 70 (f_isCondition -> .)
    C_FLOAT         reduce using rule 70 (f_isCondition -> .)
    C_STRING        reduce using rule 70 (f_isCondition -> .)

    f_isCondition                  shift and go to state 288

state 287

    (64) condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block ELSE . f_popIf COLON NEWLINE f_resetTab f_incTab block
    (67) f_popIf -> .

    COLON           reduce using rule 67 (f_popIf -> .)

    f_popIf                        shift and go to state 289

state 288

    (66) doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block WHILE f_isDoWhile f_isCondition . expression NEWLINE f_resetTab
    (77) expression -> . exp
    (78) expression -> . exp compareToken exp f_popComparation
    (86) exp -> . term moreTerms
    (91) term -> . factor moreFactors
    (96) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (97) factor -> . cvar
    (98) factor -> . funct
    (102) cvar -> . ID f_isID
    (103) cvar -> . C_BOOL f_isConst
    (104) cvar -> . C_INT f_isConst
    (105) cvar -> . C_FLOAT f_isConst
    (106) cvar -> . C_STRING f_isConst
    (71) funct -> . ID f_checkProc LPAREN RPAREN
    (72) funct -> . ID f_checkProc LPAREN expression f_genParam expressionList RPAREN

    LPAREN          shift and go to state 83
    ID              shift and go to state 85
    C_BOOL          shift and go to state 81
    C_INT           shift and go to state 84
    C_FLOAT         shift and go to state 79
    C_STRING        shift and go to state 86

    funct                          shift and go to state 80
    cvar                           shift and go to state 78
    factor                         shift and go to state 82
    term                           shift and go to state 87
    exp                            shift and go to state 88
    expression                     shift and go to state 290

state 289

    (64) condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block ELSE f_popIf . COLON NEWLINE f_resetTab f_incTab block

    COLON           shift and go to state 291


state 290

    (66) doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block WHILE f_isDoWhile f_isCondition expression . NEWLINE f_resetTab

    NEWLINE         shift and go to state 292


state 291

    (64) condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block ELSE f_popIf COLON . NEWLINE f_resetTab f_incTab block

    NEWLINE         shift and go to state 293


state 292

    (66) doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block WHILE f_isDoWhile f_isCondition expression NEWLINE . f_resetTab
    (53) f_resetTab -> .

    TAB             reduce using rule 53 (f_resetTab -> .)
    DEF             reduce using rule 53 (f_resetTab -> .)
    $end            reduce using rule 53 (f_resetTab -> .)
    WHILE           reduce using rule 53 (f_resetTab -> .)
    ELSE            reduce using rule 53 (f_resetTab -> .)

    f_resetTab                     shift and go to state 294

state 293

    (64) condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block ELSE f_popIf COLON NEWLINE . f_resetTab f_incTab block
    (53) f_resetTab -> .

    TAB             reduce using rule 53 (f_resetTab -> .)
    DEF             reduce using rule 53 (f_resetTab -> .)
    $end            reduce using rule 53 (f_resetTab -> .)
    WHILE           reduce using rule 53 (f_resetTab -> .)
    ELSE            reduce using rule 53 (f_resetTab -> .)

    f_resetTab                     shift and go to state 295

state 294

    (66) doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block WHILE f_isDoWhile f_isCondition expression NEWLINE f_resetTab .

    TAB             reduce using rule 66 (doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block WHILE f_isDoWhile f_isCondition expression NEWLINE f_resetTab .)
    DEF             reduce using rule 66 (doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block WHILE f_isDoWhile f_isCondition expression NEWLINE f_resetTab .)
    $end            reduce using rule 66 (doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block WHILE f_isDoWhile f_isCondition expression NEWLINE f_resetTab .)
    WHILE           reduce using rule 66 (doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block WHILE f_isDoWhile f_isCondition expression NEWLINE f_resetTab .)
    ELSE            reduce using rule 66 (doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block WHILE f_isDoWhile f_isCondition expression NEWLINE f_resetTab .)


state 295

    (64) condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block ELSE f_popIf COLON NEWLINE f_resetTab . f_incTab block
    (51) f_incTab -> .

    TAB             reduce using rule 51 (f_incTab -> .)
    DEF             reduce using rule 51 (f_incTab -> .)
    $end            reduce using rule 51 (f_incTab -> .)
    WHILE           reduce using rule 51 (f_incTab -> .)
    ELSE            reduce using rule 51 (f_incTab -> .)

    f_incTab                       shift and go to state 296

state 296

    (64) condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block ELSE f_popIf COLON NEWLINE f_resetTab f_incTab . block
    (44) block -> . empty
    (45) block -> . TAB f_addTab moreTabs statement moreStatements
    (3) empty -> .

  ! shift/reduce conflict for TAB resolved as shift
    TAB             shift and go to state 192
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)
    WHILE           reduce using rule 3 (empty -> .)
    ELSE            reduce using rule 3 (empty -> .)

  ! TAB             [ reduce using rule 3 (empty -> .) ]

    empty                          shift and go to state 190
    block                          shift and go to state 297

state 297

    (64) condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block .

    TAB             reduce using rule 64 (condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block .)
    DEF             reduce using rule 64 (condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block .)
    $end            reduce using rule 64 (condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block .)
    WHILE           reduce using rule 64 (condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block .)
    ELSE            reduce using rule 64 (condition -> IF f_isCondition expression COLON NEWLINE f_resetTab f_incTab block ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for TAB in state 201 resolved as shift
WARNING: shift/reduce conflict for TAB in state 223 resolved as shift
WARNING: shift/reduce conflict for TAB in state 225 resolved as shift
WARNING: shift/reduce conflict for TAB in state 252 resolved as shift
WARNING: shift/reduce conflict for TAB in state 253 resolved as shift
WARNING: shift/reduce conflict for TAB in state 271 resolved as shift
WARNING: shift/reduce conflict for TAB in state 281 resolved as shift
WARNING: shift/reduce conflict for TAB in state 282 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 285 resolved as shift
WARNING: shift/reduce conflict for TAB in state 296 resolved as shift
WARNING: reduce/reduce conflict in state 210 resolved using rule (empty -> <empty>)
WARNING: rejected rule (f_checkTab -> <empty>) in state 210
WARNING: reduce/reduce conflict in state 222 resolved using rule (vars -> empty)
WARNING: rejected rule (assign -> empty) in state 222
WARNING: reduce/reduce conflict in state 262 resolved using rule (empty -> <empty>)
WARNING: rejected rule (f_checkTab -> <empty>) in state 262
