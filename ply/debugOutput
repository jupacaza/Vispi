Illegal character ';' in line '17'
Illegal character ';' in line '18'
Illegal character ';' in line '19'
programa exitoso
{'main': 'void', 'Fibonacci': 'int', 'Vispi': 'prog'}


{'main': [0, 2, 0, 0, 0, 0, 1, 0, 0, 0], 'Fibonacci': [0, 5, 0, 0, 0, 5, 2, 0, 0, 0], 'Vispi': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}


{'main': 24, 'Fibonacci': 1, 'Vispi': 0}


{'main': [[], {'Temporal7': 'int', 'x': 'int', 'result': 'int'}, {'Temporal7': 3200, 'x': 2201, 'result': 2200}], 'Fibonacci': [['int'], {'oldResult': 'int', 'i': 'int', 'preOldResult': 'int', 'n': 'int', 'result': 'int', 'Temporal6': 'int', 'Temporal5': 'int', 'Temporal4': 'bool', 'Temporal3': 'bool', 'Temporal2': 'bool', 'Temporal1': 'bool', 'Temporal0': 'bool'}, {'oldResult': 2202, 'i': 2204, 'preOldResult': 2203, 'n': 2200, 'result': 2201, 'Temporal6': 3201, 'Temporal5': 3200, 'Temporal4': 3004, 'Temporal3': 3003, 'Temporal2': 3002, 'Temporal1': 3001, 'Temporal0': 3000}], 'Vispi': [[], {0: 'int', 1: 'int', 2: 'int', 3: 'int', 5: 'int', 'imLoad': 'image', 'takePicture': 'image', 'imBW': 'image', 'Fibonacci': 'int', 'print': 'void', 'main': 'void', 'filterColor': 'image', 'imGray': 'image'}, {0: 1200, 1: 1202, 2: 1203, 3: 1201, 5: 1204, 'imLoad': 800, 'takePicture': 801, 'imBW': 802, 'Fibonacci': 200, 'print': 900, 'main': 901, 'filterColor': 803, 'imGray': 804}]}




{0: ['GOTO', -1, 'main', -1], 1: ['<=', 2200, 1200, 3000], 2: ['GOTOF', 3000, 'if', 4], 3: ['RETURN', 1200, -1, 200], 4: ['>', 2200, 1200, 3001], 5: ['<', 2200, 1201, 3002], 6: ['&&', 3001, 3002, 3003], 7: ['GOTOF', 3003, 'if', 9], 8: ['RETURN', 1202, -1, 200], 9: ['=', 1200, -1, 2201], 10: ['=', 1202, -1, 2203], 11: ['=', 1202, -1, 2202], 12: ['=', 1203, -1, 2204], 13: ['<', 2204, 2200, 3004], 14: ['GOTOF', 3004, 'while', 22], 15: ['+', 2203, 2202, 3200], 16: ['=', 3200, -1, 2201], 17: ['=', 2202, -1, 2203], 18: ['=', 2201, -1, 2202], 19: ['+', 2204, 1202, 3201], 20: ['=', 3201, -1, 2204], 21: ['GOTO', -1, 'while', 13], 22: ['RETURN', 2201, -1, 200], 23: ['RET', -1, -1, -1], 24: ['=', 1204, -1, 2201], 25: ['ERA', 'Fibonacci', -1, -1], 26: ['PARAM', 2201, -1, 0], 27: ['GOSUB', 1, -1, -1], 28: ['=', 200, -1, 3200], 29: ['=', 3200, -1, 2200], 30: ['ERA', 'print', -1, -1], 31: ['PARAM', 2200, -1, 0], 32: ['CALL', 'print', -1, -1], 33: ['RET', -1, -1, -1], 34: ['ENDPROC', -1, -1, -1]}


operatorsStack
[]


operandsStack
[]


typesStack
[]


branchStack
[]


0
1000
[0, 200, 400, 600, 800, 900]
[199, 399, 599, 799, 899, 999]
{24: 'main', 1: 'Fibonacci', 0: 'Vispi'}
{800: 'imLoad', 801: 'takePicture', 802: 'imBW', 803: 'filterColor', 900: 'print', 901: 'main', 200: 'Fibonacci', 1200: 'dSozF', 1201: 'CEhPV', 1202: 'DZhXq', 1203: 'iHLvJ', 1204: 'TpDgq', 804: 'imGray'}
[['GOTO', -1, 'main', -1], ['<=', 2200, 1200, 3000], ['GOTOF', 3000, 'if', 4], ['RETURN', 1200, -1, 200], ['>', 2200, 1200, 3001], ['<', 2200, 1201, 3002], ['&&', 3001, 3002, 3003], ['GOTOF', 3003, 'if', 9], ['RETURN', 1202, -1, 200], ['=', 1200, -1, 2201], ['=', 1202, -1, 2203], ['=', 1202, -1, 2202], ['=', 1203, -1, 2204], ['<', 2204, 2200, 3004], ['GOTOF', 3004, 'while', 22], ['+', 2203, 2202, 3200], ['=', 3200, -1, 2201], ['=', 2202, -1, 2203], ['=', 2201, -1, 2202], ['+', 2204, 1202, 3201], ['=', 3201, -1, 2204], ['GOTO', -1, 'while', 13], ['RETURN', 2201, -1, 200], ['RET', -1, -1, -1], ['=', 1204, -1, 2201], ['ERA', 'Fibonacci', -1, -1], ['PARAM', 2201, -1, 0], ['GOSUB', 1, -1, -1], ['=', 200, -1, 3200], ['=', 3200, -1, 2200], ['ERA', 'print', -1, -1], ['PARAM', 2200, -1, 0], ['CALL', 'print', -1, -1], ['RET', -1, -1, -1], ['ENDPROC', -1, -1, -1]]
