Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    PERIOD
    AND
    NOT
    OR

Grammar

Rule 0     S' -> program
Rule 1     program -> programName hardware vars assign functions
Rule 2     programName -> PROGRAM ID NEWLINE
Rule 3     empty -> <empty>
Rule 4     hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration
Rule 5     camDeclaration -> empty
Rule 6     camDeclaration -> CAM WEBCAM COLON ID NEWLINE
Rule 7     camDeclaration -> CAM PICAM COLON ID NEWLINE
Rule 8     inputsDeclaration -> empty
Rule 9     inputsDeclaration -> INPUT f_saveType pinList NEWLINE
Rule 10    outputsDeclaration -> empty
Rule 11    outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE
Rule 12    pwmDeclaration -> empty
Rule 13    pwmDeclaration -> PWM f_saveType pinList NEWLINE
Rule 14    pinList -> C_INT COLON ID
Rule 15    pinList -> C_INT COLON ID COMMA pinList
Rule 16    vars -> tipo idList NEWLINE vars
Rule 17    vars -> empty
Rule 18    f_saveType -> <empty>
Rule 19    idList -> ID
Rule 20    idList -> ID COMMA idList
Rule 21    tipo -> BOOL f_saveType
Rule 22    tipo -> INT f_saveType
Rule 23    tipo -> FLOAT f_saveType
Rule 24    tipo -> STRING f_saveType
Rule 25    tipo -> IMAGE f_saveType
Rule 26    functions -> DEF tipo ID f_saveModule LPAREN RPAREN block functions
Rule 27    functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN block functions
Rule 28    functions -> DEF VOID ID f_saveModule LPAREN RPAREN block functions
Rule 29    functions -> DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN block functions
Rule 30    functions -> DEF VOID MAIN f_saveModule LPAREN RPAREN block functions
Rule 31    functions -> DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN block functions
Rule 32    functions -> empty
Rule 33    f_saveModule -> <empty>
Rule 34    parameterList -> empty
Rule 35    parameterList -> COMMA tipo ID f_addToParam parameterList
Rule 36    f_addToParam -> <empty>
Rule 37    assign -> ID f_checkID EQUAL expression NEWLINE f_generateEqual
Rule 38    assign -> empty
Rule 39    f_generateEqual -> <empty>
Rule 40    f_checkID -> <empty>
Rule 41    block -> COLON NEWLINE statement moreStatements NEWLINE SEMICOLON NEWLINE
Rule 42    block -> COLON NEWLINE statement moreStatements SEMICOLON NEWLINE
Rule 43    block -> COLON statement moreStatements NEWLINE SEMICOLON NEWLINE
Rule 44    block -> COLON statement moreStatements SEMICOLON NEWLINE
Rule 45    moreStatements -> empty
Rule 46    moreStatements -> statement moreStatements
Rule 47    statement -> vars
Rule 48    statement -> assign
Rule 49    statement -> condition
Rule 50    statement -> cycle
Rule 51    statement -> funct NEWLINE
Rule 52    statement -> RETURN expression NEWLINE
Rule 53    condition -> IF f_isCondition expression block
Rule 54    condition -> IF f_isCondition expression block ELSE block
Rule 55    cycle -> WHILE f_isCondition expression block
Rule 56    cycle -> DO block WHILE f_isCondition expression NEWLINE
Rule 57    f_isCondition -> <empty>
Rule 58    funct -> CALL ID LPAREN RPAREN
Rule 59    funct -> CALL ID LPAREN expression expressionList RPAREN
Rule 60    expressionList -> empty
Rule 61    expressionList -> COMMA expression expressionList
Rule 62    expression -> exp
Rule 63    expression -> exp compareToken exp f_popComparation
Rule 64    f_popComparation -> <empty>
Rule 65    compareToken -> GREATER_THAN
Rule 66    compareToken -> LESS_THAN
Rule 67    compareToken -> LESS_EQUAL_THAN
Rule 68    compareToken -> GREATER_EQUAL_THAN
Rule 69    compareToken -> NOT_EQUAL_THAN
Rule 70    compareToken -> SAME_AS
Rule 71    exp -> term moreTerms
Rule 72    moreTerms -> empty
Rule 73    moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms
Rule 74    moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms
Rule 75    f_popTerm -> <empty>
Rule 76    term -> factor moreFactors
Rule 77    moreFactors -> empty
Rule 78    moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors
Rule 79    moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors
Rule 80    moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors
Rule 81    factor -> LPAREN f_pushOperator expression RPAREN f_popOperator
Rule 82    factor -> cvar
Rule 83    factor -> funct
Rule 84    f_pushOperator -> <empty>
Rule 85    f_popOperator -> <empty>
Rule 86    f_popFactor -> <empty>
Rule 87    cvar -> ID f_isID
Rule 88    cvar -> C_BOOL f_isConst
Rule 89    cvar -> C_INT f_isConst
Rule 90    cvar -> C_FLOAT f_isConst
Rule 91    cvar -> C_STRING f_isConst
Rule 92    f_isID -> <empty>
Rule 93    f_isConst -> <empty>

Terminals, with rules where they appear

AND                  : 
BOOL                 : 21
CALL                 : 58 59
CAM                  : 6 7
COLON                : 6 7 14 15 41 42 43 44
COMMA                : 15 20 35 61
C_BOOL               : 88
C_FLOAT              : 90
C_INT                : 14 15 89
C_STRING             : 91
DEF                  : 26 27 28 29 30 31
DIVIDE               : 78
DO                   : 56
ELSE                 : 54
EQUAL                : 37
FLOAT                : 23
GREATER_EQUAL_THAN   : 68
GREATER_THAN         : 65
ID                   : 2 6 7 14 15 19 20 26 27 27 28 29 29 31 35 37 58 59 87
IF                   : 53 54
IMAGE                : 25
INPUT                : 9
INT                  : 22
LESS_EQUAL_THAN      : 67
LESS_THAN            : 66
LPAREN               : 26 27 28 29 30 31 58 59 81
MAIN                 : 30 31
MINUS                : 74
MOD                  : 80
NEWLINE              : 2 6 7 9 11 13 16 37 41 41 41 42 42 43 43 44 51 52 56
NOT                  : 
NOT_EQUAL_THAN       : 69
OR                   : 
OUTPUT               : 11
PERIOD               : 
PICAM                : 7
PLUS                 : 73
PROGRAM              : 2
PWM                  : 13
RETURN               : 52
RPAREN               : 26 27 28 29 30 31 58 59 81
SAME_AS              : 70
SEMICOLON            : 41 42 43 44
STRING               : 24
TIMES                : 79
VOID                 : 28 29 30 31
WEBCAM               : 6
WHILE                : 55 56
error                : 

Nonterminals, with rules where they appear

assign               : 1 48
block                : 26 27 28 29 30 31 53 54 54 55 56
camDeclaration       : 4
compareToken         : 63
condition            : 49
cvar                 : 82
cycle                : 50
empty                : 5 8 10 12 17 32 34 38 45 60 72 77
exp                  : 62 63 63
expression           : 37 52 53 54 55 56 59 61 81
expressionList       : 59 61
f_addToParam         : 27 29 31 35
f_checkID            : 37
f_generateEqual      : 37
f_isCondition        : 53 54 55 56
f_isConst            : 88 89 90 91
f_isID               : 87
f_popComparation     : 63
f_popFactor          : 78 79 80
f_popOperator        : 81
f_popTerm            : 73 74
f_pushOperator       : 73 74 78 79 80 81
f_saveModule         : 26 27 28 29 30 31
f_saveType           : 9 11 13 21 22 23 24 25
factor               : 76 78 79 80
funct                : 51 83
functions            : 1 26 27 28 29 30 31
hardware             : 1
idList               : 16 20
inputsDeclaration    : 4
moreFactors          : 76 78 79 80
moreStatements       : 41 42 43 44 46
moreTerms            : 71 73 74
outputsDeclaration   : 4
parameterList        : 27 29 31 35
pinList              : 9 11 13 15
program              : 0
programName          : 1
pwmDeclaration       : 4
statement            : 41 42 43 44 46
term                 : 71 73 74
tipo                 : 16 26 27 27 29 31 35
vars                 : 1 16 47

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . programName hardware vars assign functions
    (2) programName -> . PROGRAM ID NEWLINE

    PROGRAM         shift and go to state 3

    program                        shift and go to state 1
    programName                    shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> programName . hardware vars assign functions
    (4) hardware -> . camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration
    (5) camDeclaration -> . empty
    (6) camDeclaration -> . CAM WEBCAM COLON ID NEWLINE
    (7) camDeclaration -> . CAM PICAM COLON ID NEWLINE
    (3) empty -> .

    CAM             shift and go to state 4
    INPUT           reduce using rule 3 (empty -> .)
    OUTPUT          reduce using rule 3 (empty -> .)
    PWM             reduce using rule 3 (empty -> .)
    BOOL            reduce using rule 3 (empty -> .)
    INT             reduce using rule 3 (empty -> .)
    FLOAT           reduce using rule 3 (empty -> .)
    STRING          reduce using rule 3 (empty -> .)
    IMAGE           reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)

    hardware                       shift and go to state 5
    camDeclaration                 shift and go to state 6
    empty                          shift and go to state 7

state 3

    (2) programName -> PROGRAM . ID NEWLINE

    ID              shift and go to state 8


state 4

    (6) camDeclaration -> CAM . WEBCAM COLON ID NEWLINE
    (7) camDeclaration -> CAM . PICAM COLON ID NEWLINE

    WEBCAM          shift and go to state 9
    PICAM           shift and go to state 10


state 5

    (1) program -> programName hardware . vars assign functions
    (16) vars -> . tipo idList NEWLINE vars
    (17) vars -> . empty
    (21) tipo -> . BOOL f_saveType
    (22) tipo -> . INT f_saveType
    (23) tipo -> . FLOAT f_saveType
    (24) tipo -> . STRING f_saveType
    (25) tipo -> . IMAGE f_saveType
    (3) empty -> .

    BOOL            shift and go to state 16
    INT             shift and go to state 14
    FLOAT           shift and go to state 11
    STRING          shift and go to state 17
    IMAGE           shift and go to state 15
    ID              reduce using rule 3 (empty -> .)
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)

    vars                           shift and go to state 12
    tipo                           shift and go to state 13
    empty                          shift and go to state 18

state 6

    (4) hardware -> camDeclaration . inputsDeclaration outputsDeclaration pwmDeclaration
    (8) inputsDeclaration -> . empty
    (9) inputsDeclaration -> . INPUT f_saveType pinList NEWLINE
    (3) empty -> .

    INPUT           shift and go to state 20
    OUTPUT          reduce using rule 3 (empty -> .)
    PWM             reduce using rule 3 (empty -> .)
    BOOL            reduce using rule 3 (empty -> .)
    INT             reduce using rule 3 (empty -> .)
    FLOAT           reduce using rule 3 (empty -> .)
    STRING          reduce using rule 3 (empty -> .)
    IMAGE           reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)

    inputsDeclaration              shift and go to state 19
    empty                          shift and go to state 21

state 7

    (5) camDeclaration -> empty .

    INPUT           reduce using rule 5 (camDeclaration -> empty .)
    OUTPUT          reduce using rule 5 (camDeclaration -> empty .)
    PWM             reduce using rule 5 (camDeclaration -> empty .)
    BOOL            reduce using rule 5 (camDeclaration -> empty .)
    INT             reduce using rule 5 (camDeclaration -> empty .)
    FLOAT           reduce using rule 5 (camDeclaration -> empty .)
    STRING          reduce using rule 5 (camDeclaration -> empty .)
    IMAGE           reduce using rule 5 (camDeclaration -> empty .)
    ID              reduce using rule 5 (camDeclaration -> empty .)
    DEF             reduce using rule 5 (camDeclaration -> empty .)
    $end            reduce using rule 5 (camDeclaration -> empty .)


state 8

    (2) programName -> PROGRAM ID . NEWLINE

    NEWLINE         shift and go to state 22


state 9

    (6) camDeclaration -> CAM WEBCAM . COLON ID NEWLINE

    COLON           shift and go to state 23


state 10

    (7) camDeclaration -> CAM PICAM . COLON ID NEWLINE

    COLON           shift and go to state 24


state 11

    (23) tipo -> FLOAT . f_saveType
    (18) f_saveType -> .

    ID              reduce using rule 18 (f_saveType -> .)

    f_saveType                     shift and go to state 25

state 12

    (1) program -> programName hardware vars . assign functions
    (37) assign -> . ID f_checkID EQUAL expression NEWLINE f_generateEqual
    (38) assign -> . empty
    (3) empty -> .

    ID              shift and go to state 27
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)

    assign                         shift and go to state 26
    empty                          shift and go to state 28

state 13

    (16) vars -> tipo . idList NEWLINE vars
    (19) idList -> . ID
    (20) idList -> . ID COMMA idList

    ID              shift and go to state 30

    idList                         shift and go to state 29

state 14

    (22) tipo -> INT . f_saveType
    (18) f_saveType -> .

    ID              reduce using rule 18 (f_saveType -> .)

    f_saveType                     shift and go to state 31

state 15

    (25) tipo -> IMAGE . f_saveType
    (18) f_saveType -> .

    ID              reduce using rule 18 (f_saveType -> .)

    f_saveType                     shift and go to state 32

state 16

    (21) tipo -> BOOL . f_saveType
    (18) f_saveType -> .

    ID              reduce using rule 18 (f_saveType -> .)

    f_saveType                     shift and go to state 33

state 17

    (24) tipo -> STRING . f_saveType
    (18) f_saveType -> .

    ID              reduce using rule 18 (f_saveType -> .)

    f_saveType                     shift and go to state 34

state 18

    (17) vars -> empty .

    ID              reduce using rule 17 (vars -> empty .)
    DEF             reduce using rule 17 (vars -> empty .)
    $end            reduce using rule 17 (vars -> empty .)
    RETURN          reduce using rule 17 (vars -> empty .)
    IF              reduce using rule 17 (vars -> empty .)
    WHILE           reduce using rule 17 (vars -> empty .)
    DO              reduce using rule 17 (vars -> empty .)
    CALL            reduce using rule 17 (vars -> empty .)
    BOOL            reduce using rule 17 (vars -> empty .)
    INT             reduce using rule 17 (vars -> empty .)
    FLOAT           reduce using rule 17 (vars -> empty .)
    STRING          reduce using rule 17 (vars -> empty .)
    IMAGE           reduce using rule 17 (vars -> empty .)
    NEWLINE         reduce using rule 17 (vars -> empty .)
    SEMICOLON       reduce using rule 17 (vars -> empty .)


state 19

    (4) hardware -> camDeclaration inputsDeclaration . outputsDeclaration pwmDeclaration
    (10) outputsDeclaration -> . empty
    (11) outputsDeclaration -> . OUTPUT f_saveType pinList NEWLINE
    (3) empty -> .

    OUTPUT          shift and go to state 36
    PWM             reduce using rule 3 (empty -> .)
    BOOL            reduce using rule 3 (empty -> .)
    INT             reduce using rule 3 (empty -> .)
    FLOAT           reduce using rule 3 (empty -> .)
    STRING          reduce using rule 3 (empty -> .)
    IMAGE           reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)

    outputsDeclaration             shift and go to state 35
    empty                          shift and go to state 37

state 20

    (9) inputsDeclaration -> INPUT . f_saveType pinList NEWLINE
    (18) f_saveType -> .

    C_INT           reduce using rule 18 (f_saveType -> .)

    f_saveType                     shift and go to state 38

state 21

    (8) inputsDeclaration -> empty .

    OUTPUT          reduce using rule 8 (inputsDeclaration -> empty .)
    PWM             reduce using rule 8 (inputsDeclaration -> empty .)
    BOOL            reduce using rule 8 (inputsDeclaration -> empty .)
    INT             reduce using rule 8 (inputsDeclaration -> empty .)
    FLOAT           reduce using rule 8 (inputsDeclaration -> empty .)
    STRING          reduce using rule 8 (inputsDeclaration -> empty .)
    IMAGE           reduce using rule 8 (inputsDeclaration -> empty .)
    ID              reduce using rule 8 (inputsDeclaration -> empty .)
    DEF             reduce using rule 8 (inputsDeclaration -> empty .)
    $end            reduce using rule 8 (inputsDeclaration -> empty .)


state 22

    (2) programName -> PROGRAM ID NEWLINE .

    CAM             reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)
    BOOL            reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)
    INT             reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)
    FLOAT           reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)
    STRING          reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)
    IMAGE           reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)
    ID              reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)
    DEF             reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)
    INPUT           reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)
    OUTPUT          reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)
    PWM             reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)
    $end            reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)


state 23

    (6) camDeclaration -> CAM WEBCAM COLON . ID NEWLINE

    ID              shift and go to state 39


state 24

    (7) camDeclaration -> CAM PICAM COLON . ID NEWLINE

    ID              shift and go to state 40


state 25

    (23) tipo -> FLOAT f_saveType .

    ID              reduce using rule 23 (tipo -> FLOAT f_saveType .)


state 26

    (1) program -> programName hardware vars assign . functions
    (26) functions -> . DEF tipo ID f_saveModule LPAREN RPAREN block functions
    (27) functions -> . DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN block functions
    (28) functions -> . DEF VOID ID f_saveModule LPAREN RPAREN block functions
    (29) functions -> . DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN block functions
    (30) functions -> . DEF VOID MAIN f_saveModule LPAREN RPAREN block functions
    (31) functions -> . DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN block functions
    (32) functions -> . empty
    (3) empty -> .

    DEF             shift and go to state 43
    $end            reduce using rule 3 (empty -> .)

    functions                      shift and go to state 41
    empty                          shift and go to state 42

state 27

    (37) assign -> ID . f_checkID EQUAL expression NEWLINE f_generateEqual
    (40) f_checkID -> .

    EQUAL           reduce using rule 40 (f_checkID -> .)

    f_checkID                      shift and go to state 44

state 28

    (38) assign -> empty .

    DEF             reduce using rule 38 (assign -> empty .)
    $end            reduce using rule 38 (assign -> empty .)


state 29

    (16) vars -> tipo idList . NEWLINE vars

    NEWLINE         shift and go to state 45


state 30

    (19) idList -> ID .
    (20) idList -> ID . COMMA idList

    NEWLINE         reduce using rule 19 (idList -> ID .)
    COMMA           shift and go to state 46


state 31

    (22) tipo -> INT f_saveType .

    ID              reduce using rule 22 (tipo -> INT f_saveType .)


state 32

    (25) tipo -> IMAGE f_saveType .

    ID              reduce using rule 25 (tipo -> IMAGE f_saveType .)


state 33

    (21) tipo -> BOOL f_saveType .

    ID              reduce using rule 21 (tipo -> BOOL f_saveType .)


state 34

    (24) tipo -> STRING f_saveType .

    ID              reduce using rule 24 (tipo -> STRING f_saveType .)


state 35

    (4) hardware -> camDeclaration inputsDeclaration outputsDeclaration . pwmDeclaration
    (12) pwmDeclaration -> . empty
    (13) pwmDeclaration -> . PWM f_saveType pinList NEWLINE
    (3) empty -> .

    PWM             shift and go to state 48
    BOOL            reduce using rule 3 (empty -> .)
    INT             reduce using rule 3 (empty -> .)
    FLOAT           reduce using rule 3 (empty -> .)
    STRING          reduce using rule 3 (empty -> .)
    IMAGE           reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)

    pwmDeclaration                 shift and go to state 47
    empty                          shift and go to state 49

state 36

    (11) outputsDeclaration -> OUTPUT . f_saveType pinList NEWLINE
    (18) f_saveType -> .

    C_INT           reduce using rule 18 (f_saveType -> .)

    f_saveType                     shift and go to state 50

state 37

    (10) outputsDeclaration -> empty .

    PWM             reduce using rule 10 (outputsDeclaration -> empty .)
    BOOL            reduce using rule 10 (outputsDeclaration -> empty .)
    INT             reduce using rule 10 (outputsDeclaration -> empty .)
    FLOAT           reduce using rule 10 (outputsDeclaration -> empty .)
    STRING          reduce using rule 10 (outputsDeclaration -> empty .)
    IMAGE           reduce using rule 10 (outputsDeclaration -> empty .)
    ID              reduce using rule 10 (outputsDeclaration -> empty .)
    DEF             reduce using rule 10 (outputsDeclaration -> empty .)
    $end            reduce using rule 10 (outputsDeclaration -> empty .)


state 38

    (9) inputsDeclaration -> INPUT f_saveType . pinList NEWLINE
    (14) pinList -> . C_INT COLON ID
    (15) pinList -> . C_INT COLON ID COMMA pinList

    C_INT           shift and go to state 52

    pinList                        shift and go to state 51

state 39

    (6) camDeclaration -> CAM WEBCAM COLON ID . NEWLINE

    NEWLINE         shift and go to state 53


state 40

    (7) camDeclaration -> CAM PICAM COLON ID . NEWLINE

    NEWLINE         shift and go to state 54


state 41

    (1) program -> programName hardware vars assign functions .

    $end            reduce using rule 1 (program -> programName hardware vars assign functions .)


state 42

    (32) functions -> empty .

    $end            reduce using rule 32 (functions -> empty .)


state 43

    (26) functions -> DEF . tipo ID f_saveModule LPAREN RPAREN block functions
    (27) functions -> DEF . tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN block functions
    (28) functions -> DEF . VOID ID f_saveModule LPAREN RPAREN block functions
    (29) functions -> DEF . VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN block functions
    (30) functions -> DEF . VOID MAIN f_saveModule LPAREN RPAREN block functions
    (31) functions -> DEF . VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN block functions
    (21) tipo -> . BOOL f_saveType
    (22) tipo -> . INT f_saveType
    (23) tipo -> . FLOAT f_saveType
    (24) tipo -> . STRING f_saveType
    (25) tipo -> . IMAGE f_saveType

    VOID            shift and go to state 56
    BOOL            shift and go to state 16
    INT             shift and go to state 14
    FLOAT           shift and go to state 11
    STRING          shift and go to state 17
    IMAGE           shift and go to state 15

    tipo                           shift and go to state 55

state 44

    (37) assign -> ID f_checkID . EQUAL expression NEWLINE f_generateEqual

    EQUAL           shift and go to state 57


state 45

    (16) vars -> tipo idList NEWLINE . vars
    (16) vars -> . tipo idList NEWLINE vars
    (17) vars -> . empty
    (21) tipo -> . BOOL f_saveType
    (22) tipo -> . INT f_saveType
    (23) tipo -> . FLOAT f_saveType
    (24) tipo -> . STRING f_saveType
    (25) tipo -> . IMAGE f_saveType
    (3) empty -> .

  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for IMAGE resolved as shift
    BOOL            shift and go to state 16
    INT             shift and go to state 14
    FLOAT           shift and go to state 11
    STRING          shift and go to state 17
    IMAGE           shift and go to state 15
    ID              reduce using rule 3 (empty -> .)
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)
    RETURN          reduce using rule 3 (empty -> .)
    IF              reduce using rule 3 (empty -> .)
    WHILE           reduce using rule 3 (empty -> .)
    DO              reduce using rule 3 (empty -> .)
    CALL            reduce using rule 3 (empty -> .)
    NEWLINE         reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)

  ! BOOL            [ reduce using rule 3 (empty -> .) ]
  ! INT             [ reduce using rule 3 (empty -> .) ]
  ! FLOAT           [ reduce using rule 3 (empty -> .) ]
  ! STRING          [ reduce using rule 3 (empty -> .) ]
  ! IMAGE           [ reduce using rule 3 (empty -> .) ]

    vars                           shift and go to state 58
    empty                          shift and go to state 18
    tipo                           shift and go to state 13

state 46

    (20) idList -> ID COMMA . idList
    (19) idList -> . ID
    (20) idList -> . ID COMMA idList

    ID              shift and go to state 30

    idList                         shift and go to state 59

state 47

    (4) hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .

    BOOL            reduce using rule 4 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    INT             reduce using rule 4 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    FLOAT           reduce using rule 4 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    STRING          reduce using rule 4 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    IMAGE           reduce using rule 4 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    ID              reduce using rule 4 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    DEF             reduce using rule 4 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    $end            reduce using rule 4 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)


state 48

    (13) pwmDeclaration -> PWM . f_saveType pinList NEWLINE
    (18) f_saveType -> .

    C_INT           reduce using rule 18 (f_saveType -> .)

    f_saveType                     shift and go to state 60

state 49

    (12) pwmDeclaration -> empty .

    BOOL            reduce using rule 12 (pwmDeclaration -> empty .)
    INT             reduce using rule 12 (pwmDeclaration -> empty .)
    FLOAT           reduce using rule 12 (pwmDeclaration -> empty .)
    STRING          reduce using rule 12 (pwmDeclaration -> empty .)
    IMAGE           reduce using rule 12 (pwmDeclaration -> empty .)
    ID              reduce using rule 12 (pwmDeclaration -> empty .)
    DEF             reduce using rule 12 (pwmDeclaration -> empty .)
    $end            reduce using rule 12 (pwmDeclaration -> empty .)


state 50

    (11) outputsDeclaration -> OUTPUT f_saveType . pinList NEWLINE
    (14) pinList -> . C_INT COLON ID
    (15) pinList -> . C_INT COLON ID COMMA pinList

    C_INT           shift and go to state 52

    pinList                        shift and go to state 61

state 51

    (9) inputsDeclaration -> INPUT f_saveType pinList . NEWLINE

    NEWLINE         shift and go to state 62


state 52

    (14) pinList -> C_INT . COLON ID
    (15) pinList -> C_INT . COLON ID COMMA pinList

    COLON           shift and go to state 63


state 53

    (6) camDeclaration -> CAM WEBCAM COLON ID NEWLINE .

    INPUT           reduce using rule 6 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    OUTPUT          reduce using rule 6 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    PWM             reduce using rule 6 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    BOOL            reduce using rule 6 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    INT             reduce using rule 6 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    FLOAT           reduce using rule 6 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    STRING          reduce using rule 6 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    IMAGE           reduce using rule 6 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    ID              reduce using rule 6 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    DEF             reduce using rule 6 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    $end            reduce using rule 6 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)


state 54

    (7) camDeclaration -> CAM PICAM COLON ID NEWLINE .

    INPUT           reduce using rule 7 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    OUTPUT          reduce using rule 7 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    PWM             reduce using rule 7 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    BOOL            reduce using rule 7 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    INT             reduce using rule 7 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    FLOAT           reduce using rule 7 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    STRING          reduce using rule 7 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    IMAGE           reduce using rule 7 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    ID              reduce using rule 7 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    DEF             reduce using rule 7 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    $end            reduce using rule 7 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)


state 55

    (26) functions -> DEF tipo . ID f_saveModule LPAREN RPAREN block functions
    (27) functions -> DEF tipo . ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN block functions

    ID              shift and go to state 64


state 56

    (28) functions -> DEF VOID . ID f_saveModule LPAREN RPAREN block functions
    (29) functions -> DEF VOID . ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN block functions
    (30) functions -> DEF VOID . MAIN f_saveModule LPAREN RPAREN block functions
    (31) functions -> DEF VOID . MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN block functions

    ID              shift and go to state 66
    MAIN            shift and go to state 65


state 57

    (37) assign -> ID f_checkID EQUAL . expression NEWLINE f_generateEqual
    (62) expression -> . exp
    (63) expression -> . exp compareToken exp f_popComparation
    (71) exp -> . term moreTerms
    (76) term -> . factor moreFactors
    (81) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (82) factor -> . cvar
    (83) factor -> . funct
    (87) cvar -> . ID f_isID
    (88) cvar -> . C_BOOL f_isConst
    (89) cvar -> . C_INT f_isConst
    (90) cvar -> . C_FLOAT f_isConst
    (91) cvar -> . C_STRING f_isConst
    (58) funct -> . CALL ID LPAREN RPAREN
    (59) funct -> . CALL ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 72
    ID              shift and go to state 74
    C_BOOL          shift and go to state 70
    C_INT           shift and go to state 73
    C_FLOAT         shift and go to state 68
    C_STRING        shift and go to state 75
    CALL            shift and go to state 77

    term                           shift and go to state 76
    funct                          shift and go to state 69
    exp                            shift and go to state 78
    factor                         shift and go to state 71
    cvar                           shift and go to state 67
    expression                     shift and go to state 79

state 58

    (16) vars -> tipo idList NEWLINE vars .

    RETURN          reduce using rule 16 (vars -> tipo idList NEWLINE vars .)
    ID              reduce using rule 16 (vars -> tipo idList NEWLINE vars .)
    IF              reduce using rule 16 (vars -> tipo idList NEWLINE vars .)
    WHILE           reduce using rule 16 (vars -> tipo idList NEWLINE vars .)
    DO              reduce using rule 16 (vars -> tipo idList NEWLINE vars .)
    CALL            reduce using rule 16 (vars -> tipo idList NEWLINE vars .)
    BOOL            reduce using rule 16 (vars -> tipo idList NEWLINE vars .)
    INT             reduce using rule 16 (vars -> tipo idList NEWLINE vars .)
    FLOAT           reduce using rule 16 (vars -> tipo idList NEWLINE vars .)
    STRING          reduce using rule 16 (vars -> tipo idList NEWLINE vars .)
    IMAGE           reduce using rule 16 (vars -> tipo idList NEWLINE vars .)
    NEWLINE         reduce using rule 16 (vars -> tipo idList NEWLINE vars .)
    SEMICOLON       reduce using rule 16 (vars -> tipo idList NEWLINE vars .)
    DEF             reduce using rule 16 (vars -> tipo idList NEWLINE vars .)
    $end            reduce using rule 16 (vars -> tipo idList NEWLINE vars .)


state 59

    (20) idList -> ID COMMA idList .

    NEWLINE         reduce using rule 20 (idList -> ID COMMA idList .)


state 60

    (13) pwmDeclaration -> PWM f_saveType . pinList NEWLINE
    (14) pinList -> . C_INT COLON ID
    (15) pinList -> . C_INT COLON ID COMMA pinList

    C_INT           shift and go to state 52

    pinList                        shift and go to state 80

state 61

    (11) outputsDeclaration -> OUTPUT f_saveType pinList . NEWLINE

    NEWLINE         shift and go to state 81


state 62

    (9) inputsDeclaration -> INPUT f_saveType pinList NEWLINE .

    OUTPUT          reduce using rule 9 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    PWM             reduce using rule 9 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    BOOL            reduce using rule 9 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    INT             reduce using rule 9 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    FLOAT           reduce using rule 9 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    STRING          reduce using rule 9 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    IMAGE           reduce using rule 9 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    ID              reduce using rule 9 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    DEF             reduce using rule 9 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    $end            reduce using rule 9 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)


state 63

    (14) pinList -> C_INT COLON . ID
    (15) pinList -> C_INT COLON . ID COMMA pinList

    ID              shift and go to state 82


state 64

    (26) functions -> DEF tipo ID . f_saveModule LPAREN RPAREN block functions
    (27) functions -> DEF tipo ID . f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN block functions
    (33) f_saveModule -> .

    LPAREN          reduce using rule 33 (f_saveModule -> .)

    f_saveModule                   shift and go to state 83

state 65

    (30) functions -> DEF VOID MAIN . f_saveModule LPAREN RPAREN block functions
    (31) functions -> DEF VOID MAIN . f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN block functions
    (33) f_saveModule -> .

    LPAREN          reduce using rule 33 (f_saveModule -> .)

    f_saveModule                   shift and go to state 84

state 66

    (28) functions -> DEF VOID ID . f_saveModule LPAREN RPAREN block functions
    (29) functions -> DEF VOID ID . f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN block functions
    (33) f_saveModule -> .

    LPAREN          reduce using rule 33 (f_saveModule -> .)

    f_saveModule                   shift and go to state 85

state 67

    (82) factor -> cvar .

    DIVIDE          reduce using rule 82 (factor -> cvar .)
    TIMES           reduce using rule 82 (factor -> cvar .)
    MOD             reduce using rule 82 (factor -> cvar .)
    PLUS            reduce using rule 82 (factor -> cvar .)
    MINUS           reduce using rule 82 (factor -> cvar .)
    GREATER_THAN    reduce using rule 82 (factor -> cvar .)
    LESS_THAN       reduce using rule 82 (factor -> cvar .)
    LESS_EQUAL_THAN reduce using rule 82 (factor -> cvar .)
    GREATER_EQUAL_THAN reduce using rule 82 (factor -> cvar .)
    NOT_EQUAL_THAN  reduce using rule 82 (factor -> cvar .)
    SAME_AS         reduce using rule 82 (factor -> cvar .)
    COMMA           reduce using rule 82 (factor -> cvar .)
    RPAREN          reduce using rule 82 (factor -> cvar .)
    NEWLINE         reduce using rule 82 (factor -> cvar .)
    COLON           reduce using rule 82 (factor -> cvar .)


state 68

    (90) cvar -> C_FLOAT . f_isConst
    (93) f_isConst -> .

    DIVIDE          reduce using rule 93 (f_isConst -> .)
    TIMES           reduce using rule 93 (f_isConst -> .)
    MOD             reduce using rule 93 (f_isConst -> .)
    PLUS            reduce using rule 93 (f_isConst -> .)
    MINUS           reduce using rule 93 (f_isConst -> .)
    GREATER_THAN    reduce using rule 93 (f_isConst -> .)
    LESS_THAN       reduce using rule 93 (f_isConst -> .)
    LESS_EQUAL_THAN reduce using rule 93 (f_isConst -> .)
    GREATER_EQUAL_THAN reduce using rule 93 (f_isConst -> .)
    NOT_EQUAL_THAN  reduce using rule 93 (f_isConst -> .)
    SAME_AS         reduce using rule 93 (f_isConst -> .)
    NEWLINE         reduce using rule 93 (f_isConst -> .)
    RPAREN          reduce using rule 93 (f_isConst -> .)
    COMMA           reduce using rule 93 (f_isConst -> .)
    COLON           reduce using rule 93 (f_isConst -> .)

    f_isConst                      shift and go to state 86

state 69

    (83) factor -> funct .

    DIVIDE          reduce using rule 83 (factor -> funct .)
    TIMES           reduce using rule 83 (factor -> funct .)
    MOD             reduce using rule 83 (factor -> funct .)
    PLUS            reduce using rule 83 (factor -> funct .)
    MINUS           reduce using rule 83 (factor -> funct .)
    GREATER_THAN    reduce using rule 83 (factor -> funct .)
    LESS_THAN       reduce using rule 83 (factor -> funct .)
    LESS_EQUAL_THAN reduce using rule 83 (factor -> funct .)
    GREATER_EQUAL_THAN reduce using rule 83 (factor -> funct .)
    NOT_EQUAL_THAN  reduce using rule 83 (factor -> funct .)
    SAME_AS         reduce using rule 83 (factor -> funct .)
    COMMA           reduce using rule 83 (factor -> funct .)
    RPAREN          reduce using rule 83 (factor -> funct .)
    NEWLINE         reduce using rule 83 (factor -> funct .)
    COLON           reduce using rule 83 (factor -> funct .)


state 70

    (88) cvar -> C_BOOL . f_isConst
    (93) f_isConst -> .

    DIVIDE          reduce using rule 93 (f_isConst -> .)
    TIMES           reduce using rule 93 (f_isConst -> .)
    MOD             reduce using rule 93 (f_isConst -> .)
    PLUS            reduce using rule 93 (f_isConst -> .)
    MINUS           reduce using rule 93 (f_isConst -> .)
    GREATER_THAN    reduce using rule 93 (f_isConst -> .)
    LESS_THAN       reduce using rule 93 (f_isConst -> .)
    LESS_EQUAL_THAN reduce using rule 93 (f_isConst -> .)
    GREATER_EQUAL_THAN reduce using rule 93 (f_isConst -> .)
    NOT_EQUAL_THAN  reduce using rule 93 (f_isConst -> .)
    SAME_AS         reduce using rule 93 (f_isConst -> .)
    NEWLINE         reduce using rule 93 (f_isConst -> .)
    RPAREN          reduce using rule 93 (f_isConst -> .)
    COMMA           reduce using rule 93 (f_isConst -> .)
    COLON           reduce using rule 93 (f_isConst -> .)

    f_isConst                      shift and go to state 87

state 71

    (76) term -> factor . moreFactors
    (77) moreFactors -> . empty
    (78) moreFactors -> . DIVIDE f_pushOperator factor f_popFactor moreFactors
    (79) moreFactors -> . TIMES f_pushOperator factor f_popFactor moreFactors
    (80) moreFactors -> . MOD f_pushOperator factor f_popFactor moreFactors
    (3) empty -> .

    DIVIDE          shift and go to state 89
    TIMES           shift and go to state 90
    MOD             shift and go to state 92
    PLUS            reduce using rule 3 (empty -> .)
    MINUS           reduce using rule 3 (empty -> .)
    GREATER_THAN    reduce using rule 3 (empty -> .)
    LESS_THAN       reduce using rule 3 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 3 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 3 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 3 (empty -> .)
    SAME_AS         reduce using rule 3 (empty -> .)
    NEWLINE         reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    COLON           reduce using rule 3 (empty -> .)

    moreFactors                    shift and go to state 88
    empty                          shift and go to state 91

state 72

    (81) factor -> LPAREN . f_pushOperator expression RPAREN f_popOperator
    (84) f_pushOperator -> .

    LPAREN          reduce using rule 84 (f_pushOperator -> .)
    ID              reduce using rule 84 (f_pushOperator -> .)
    C_BOOL          reduce using rule 84 (f_pushOperator -> .)
    C_INT           reduce using rule 84 (f_pushOperator -> .)
    C_FLOAT         reduce using rule 84 (f_pushOperator -> .)
    C_STRING        reduce using rule 84 (f_pushOperator -> .)
    CALL            reduce using rule 84 (f_pushOperator -> .)

    f_pushOperator                 shift and go to state 93

state 73

    (89) cvar -> C_INT . f_isConst
    (93) f_isConst -> .

    DIVIDE          reduce using rule 93 (f_isConst -> .)
    TIMES           reduce using rule 93 (f_isConst -> .)
    MOD             reduce using rule 93 (f_isConst -> .)
    PLUS            reduce using rule 93 (f_isConst -> .)
    MINUS           reduce using rule 93 (f_isConst -> .)
    GREATER_THAN    reduce using rule 93 (f_isConst -> .)
    LESS_THAN       reduce using rule 93 (f_isConst -> .)
    LESS_EQUAL_THAN reduce using rule 93 (f_isConst -> .)
    GREATER_EQUAL_THAN reduce using rule 93 (f_isConst -> .)
    NOT_EQUAL_THAN  reduce using rule 93 (f_isConst -> .)
    SAME_AS         reduce using rule 93 (f_isConst -> .)
    NEWLINE         reduce using rule 93 (f_isConst -> .)
    RPAREN          reduce using rule 93 (f_isConst -> .)
    COMMA           reduce using rule 93 (f_isConst -> .)
    COLON           reduce using rule 93 (f_isConst -> .)

    f_isConst                      shift and go to state 94

state 74

    (87) cvar -> ID . f_isID
    (92) f_isID -> .

    DIVIDE          reduce using rule 92 (f_isID -> .)
    TIMES           reduce using rule 92 (f_isID -> .)
    MOD             reduce using rule 92 (f_isID -> .)
    PLUS            reduce using rule 92 (f_isID -> .)
    MINUS           reduce using rule 92 (f_isID -> .)
    GREATER_THAN    reduce using rule 92 (f_isID -> .)
    LESS_THAN       reduce using rule 92 (f_isID -> .)
    LESS_EQUAL_THAN reduce using rule 92 (f_isID -> .)
    GREATER_EQUAL_THAN reduce using rule 92 (f_isID -> .)
    NOT_EQUAL_THAN  reduce using rule 92 (f_isID -> .)
    SAME_AS         reduce using rule 92 (f_isID -> .)
    NEWLINE         reduce using rule 92 (f_isID -> .)
    RPAREN          reduce using rule 92 (f_isID -> .)
    COMMA           reduce using rule 92 (f_isID -> .)
    COLON           reduce using rule 92 (f_isID -> .)

    f_isID                         shift and go to state 95

state 75

    (91) cvar -> C_STRING . f_isConst
    (93) f_isConst -> .

    DIVIDE          reduce using rule 93 (f_isConst -> .)
    TIMES           reduce using rule 93 (f_isConst -> .)
    MOD             reduce using rule 93 (f_isConst -> .)
    PLUS            reduce using rule 93 (f_isConst -> .)
    MINUS           reduce using rule 93 (f_isConst -> .)
    GREATER_THAN    reduce using rule 93 (f_isConst -> .)
    LESS_THAN       reduce using rule 93 (f_isConst -> .)
    LESS_EQUAL_THAN reduce using rule 93 (f_isConst -> .)
    GREATER_EQUAL_THAN reduce using rule 93 (f_isConst -> .)
    NOT_EQUAL_THAN  reduce using rule 93 (f_isConst -> .)
    SAME_AS         reduce using rule 93 (f_isConst -> .)
    NEWLINE         reduce using rule 93 (f_isConst -> .)
    RPAREN          reduce using rule 93 (f_isConst -> .)
    COMMA           reduce using rule 93 (f_isConst -> .)
    COLON           reduce using rule 93 (f_isConst -> .)

    f_isConst                      shift and go to state 96

state 76

    (71) exp -> term . moreTerms
    (72) moreTerms -> . empty
    (73) moreTerms -> . PLUS f_pushOperator term f_popTerm moreTerms
    (74) moreTerms -> . MINUS f_pushOperator term f_popTerm moreTerms
    (3) empty -> .

    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    GREATER_THAN    reduce using rule 3 (empty -> .)
    LESS_THAN       reduce using rule 3 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 3 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 3 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 3 (empty -> .)
    SAME_AS         reduce using rule 3 (empty -> .)
    NEWLINE         reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    COLON           reduce using rule 3 (empty -> .)

    moreTerms                      shift and go to state 97
    empty                          shift and go to state 100

state 77

    (58) funct -> CALL . ID LPAREN RPAREN
    (59) funct -> CALL . ID LPAREN expression expressionList RPAREN

    ID              shift and go to state 101


state 78

    (62) expression -> exp .
    (63) expression -> exp . compareToken exp f_popComparation
    (65) compareToken -> . GREATER_THAN
    (66) compareToken -> . LESS_THAN
    (67) compareToken -> . LESS_EQUAL_THAN
    (68) compareToken -> . GREATER_EQUAL_THAN
    (69) compareToken -> . NOT_EQUAL_THAN
    (70) compareToken -> . SAME_AS

    COMMA           reduce using rule 62 (expression -> exp .)
    RPAREN          reduce using rule 62 (expression -> exp .)
    COLON           reduce using rule 62 (expression -> exp .)
    NEWLINE         reduce using rule 62 (expression -> exp .)
    GREATER_THAN    shift and go to state 107
    LESS_THAN       shift and go to state 108
    LESS_EQUAL_THAN shift and go to state 104
    GREATER_EQUAL_THAN shift and go to state 103
    NOT_EQUAL_THAN  shift and go to state 106
    SAME_AS         shift and go to state 105

    compareToken                   shift and go to state 102

state 79

    (37) assign -> ID f_checkID EQUAL expression . NEWLINE f_generateEqual

    NEWLINE         shift and go to state 109


state 80

    (13) pwmDeclaration -> PWM f_saveType pinList . NEWLINE

    NEWLINE         shift and go to state 110


state 81

    (11) outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .

    PWM             reduce using rule 11 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    BOOL            reduce using rule 11 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    INT             reduce using rule 11 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    FLOAT           reduce using rule 11 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    STRING          reduce using rule 11 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    IMAGE           reduce using rule 11 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    ID              reduce using rule 11 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    DEF             reduce using rule 11 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    $end            reduce using rule 11 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)


state 82

    (14) pinList -> C_INT COLON ID .
    (15) pinList -> C_INT COLON ID . COMMA pinList

    NEWLINE         reduce using rule 14 (pinList -> C_INT COLON ID .)
    COMMA           shift and go to state 111


state 83

    (26) functions -> DEF tipo ID f_saveModule . LPAREN RPAREN block functions
    (27) functions -> DEF tipo ID f_saveModule . LPAREN tipo ID f_addToParam parameterList RPAREN block functions

    LPAREN          shift and go to state 112


state 84

    (30) functions -> DEF VOID MAIN f_saveModule . LPAREN RPAREN block functions
    (31) functions -> DEF VOID MAIN f_saveModule . LPAREN tipo ID f_addToParam parameterList RPAREN block functions

    LPAREN          shift and go to state 113


state 85

    (28) functions -> DEF VOID ID f_saveModule . LPAREN RPAREN block functions
    (29) functions -> DEF VOID ID f_saveModule . LPAREN tipo ID f_addToParam parameterList RPAREN block functions

    LPAREN          shift and go to state 114


state 86

    (90) cvar -> C_FLOAT f_isConst .

    DIVIDE          reduce using rule 90 (cvar -> C_FLOAT f_isConst .)
    TIMES           reduce using rule 90 (cvar -> C_FLOAT f_isConst .)
    MOD             reduce using rule 90 (cvar -> C_FLOAT f_isConst .)
    PLUS            reduce using rule 90 (cvar -> C_FLOAT f_isConst .)
    MINUS           reduce using rule 90 (cvar -> C_FLOAT f_isConst .)
    GREATER_THAN    reduce using rule 90 (cvar -> C_FLOAT f_isConst .)
    LESS_THAN       reduce using rule 90 (cvar -> C_FLOAT f_isConst .)
    LESS_EQUAL_THAN reduce using rule 90 (cvar -> C_FLOAT f_isConst .)
    GREATER_EQUAL_THAN reduce using rule 90 (cvar -> C_FLOAT f_isConst .)
    NOT_EQUAL_THAN  reduce using rule 90 (cvar -> C_FLOAT f_isConst .)
    SAME_AS         reduce using rule 90 (cvar -> C_FLOAT f_isConst .)
    NEWLINE         reduce using rule 90 (cvar -> C_FLOAT f_isConst .)
    RPAREN          reduce using rule 90 (cvar -> C_FLOAT f_isConst .)
    COMMA           reduce using rule 90 (cvar -> C_FLOAT f_isConst .)
    COLON           reduce using rule 90 (cvar -> C_FLOAT f_isConst .)


state 87

    (88) cvar -> C_BOOL f_isConst .

    DIVIDE          reduce using rule 88 (cvar -> C_BOOL f_isConst .)
    TIMES           reduce using rule 88 (cvar -> C_BOOL f_isConst .)
    MOD             reduce using rule 88 (cvar -> C_BOOL f_isConst .)
    PLUS            reduce using rule 88 (cvar -> C_BOOL f_isConst .)
    MINUS           reduce using rule 88 (cvar -> C_BOOL f_isConst .)
    GREATER_THAN    reduce using rule 88 (cvar -> C_BOOL f_isConst .)
    LESS_THAN       reduce using rule 88 (cvar -> C_BOOL f_isConst .)
    LESS_EQUAL_THAN reduce using rule 88 (cvar -> C_BOOL f_isConst .)
    GREATER_EQUAL_THAN reduce using rule 88 (cvar -> C_BOOL f_isConst .)
    NOT_EQUAL_THAN  reduce using rule 88 (cvar -> C_BOOL f_isConst .)
    SAME_AS         reduce using rule 88 (cvar -> C_BOOL f_isConst .)
    NEWLINE         reduce using rule 88 (cvar -> C_BOOL f_isConst .)
    RPAREN          reduce using rule 88 (cvar -> C_BOOL f_isConst .)
    COMMA           reduce using rule 88 (cvar -> C_BOOL f_isConst .)
    COLON           reduce using rule 88 (cvar -> C_BOOL f_isConst .)


state 88

    (76) term -> factor moreFactors .

    PLUS            reduce using rule 76 (term -> factor moreFactors .)
    MINUS           reduce using rule 76 (term -> factor moreFactors .)
    GREATER_THAN    reduce using rule 76 (term -> factor moreFactors .)
    LESS_THAN       reduce using rule 76 (term -> factor moreFactors .)
    LESS_EQUAL_THAN reduce using rule 76 (term -> factor moreFactors .)
    GREATER_EQUAL_THAN reduce using rule 76 (term -> factor moreFactors .)
    NOT_EQUAL_THAN  reduce using rule 76 (term -> factor moreFactors .)
    SAME_AS         reduce using rule 76 (term -> factor moreFactors .)
    NEWLINE         reduce using rule 76 (term -> factor moreFactors .)
    RPAREN          reduce using rule 76 (term -> factor moreFactors .)
    COMMA           reduce using rule 76 (term -> factor moreFactors .)
    COLON           reduce using rule 76 (term -> factor moreFactors .)


state 89

    (78) moreFactors -> DIVIDE . f_pushOperator factor f_popFactor moreFactors
    (84) f_pushOperator -> .

    LPAREN          reduce using rule 84 (f_pushOperator -> .)
    ID              reduce using rule 84 (f_pushOperator -> .)
    C_BOOL          reduce using rule 84 (f_pushOperator -> .)
    C_INT           reduce using rule 84 (f_pushOperator -> .)
    C_FLOAT         reduce using rule 84 (f_pushOperator -> .)
    C_STRING        reduce using rule 84 (f_pushOperator -> .)
    CALL            reduce using rule 84 (f_pushOperator -> .)

    f_pushOperator                 shift and go to state 115

state 90

    (79) moreFactors -> TIMES . f_pushOperator factor f_popFactor moreFactors
    (84) f_pushOperator -> .

    LPAREN          reduce using rule 84 (f_pushOperator -> .)
    ID              reduce using rule 84 (f_pushOperator -> .)
    C_BOOL          reduce using rule 84 (f_pushOperator -> .)
    C_INT           reduce using rule 84 (f_pushOperator -> .)
    C_FLOAT         reduce using rule 84 (f_pushOperator -> .)
    C_STRING        reduce using rule 84 (f_pushOperator -> .)
    CALL            reduce using rule 84 (f_pushOperator -> .)

    f_pushOperator                 shift and go to state 116

state 91

    (77) moreFactors -> empty .

    PLUS            reduce using rule 77 (moreFactors -> empty .)
    MINUS           reduce using rule 77 (moreFactors -> empty .)
    GREATER_THAN    reduce using rule 77 (moreFactors -> empty .)
    LESS_THAN       reduce using rule 77 (moreFactors -> empty .)
    LESS_EQUAL_THAN reduce using rule 77 (moreFactors -> empty .)
    GREATER_EQUAL_THAN reduce using rule 77 (moreFactors -> empty .)
    NOT_EQUAL_THAN  reduce using rule 77 (moreFactors -> empty .)
    SAME_AS         reduce using rule 77 (moreFactors -> empty .)
    NEWLINE         reduce using rule 77 (moreFactors -> empty .)
    RPAREN          reduce using rule 77 (moreFactors -> empty .)
    COMMA           reduce using rule 77 (moreFactors -> empty .)
    COLON           reduce using rule 77 (moreFactors -> empty .)


state 92

    (80) moreFactors -> MOD . f_pushOperator factor f_popFactor moreFactors
    (84) f_pushOperator -> .

    LPAREN          reduce using rule 84 (f_pushOperator -> .)
    ID              reduce using rule 84 (f_pushOperator -> .)
    C_BOOL          reduce using rule 84 (f_pushOperator -> .)
    C_INT           reduce using rule 84 (f_pushOperator -> .)
    C_FLOAT         reduce using rule 84 (f_pushOperator -> .)
    C_STRING        reduce using rule 84 (f_pushOperator -> .)
    CALL            reduce using rule 84 (f_pushOperator -> .)

    f_pushOperator                 shift and go to state 117

state 93

    (81) factor -> LPAREN f_pushOperator . expression RPAREN f_popOperator
    (62) expression -> . exp
    (63) expression -> . exp compareToken exp f_popComparation
    (71) exp -> . term moreTerms
    (76) term -> . factor moreFactors
    (81) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (82) factor -> . cvar
    (83) factor -> . funct
    (87) cvar -> . ID f_isID
    (88) cvar -> . C_BOOL f_isConst
    (89) cvar -> . C_INT f_isConst
    (90) cvar -> . C_FLOAT f_isConst
    (91) cvar -> . C_STRING f_isConst
    (58) funct -> . CALL ID LPAREN RPAREN
    (59) funct -> . CALL ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 72
    ID              shift and go to state 74
    C_BOOL          shift and go to state 70
    C_INT           shift and go to state 73
    C_FLOAT         shift and go to state 68
    C_STRING        shift and go to state 75
    CALL            shift and go to state 77

    term                           shift and go to state 76
    funct                          shift and go to state 69
    exp                            shift and go to state 78
    factor                         shift and go to state 71
    cvar                           shift and go to state 67
    expression                     shift and go to state 118

state 94

    (89) cvar -> C_INT f_isConst .

    DIVIDE          reduce using rule 89 (cvar -> C_INT f_isConst .)
    TIMES           reduce using rule 89 (cvar -> C_INT f_isConst .)
    MOD             reduce using rule 89 (cvar -> C_INT f_isConst .)
    PLUS            reduce using rule 89 (cvar -> C_INT f_isConst .)
    MINUS           reduce using rule 89 (cvar -> C_INT f_isConst .)
    GREATER_THAN    reduce using rule 89 (cvar -> C_INT f_isConst .)
    LESS_THAN       reduce using rule 89 (cvar -> C_INT f_isConst .)
    LESS_EQUAL_THAN reduce using rule 89 (cvar -> C_INT f_isConst .)
    GREATER_EQUAL_THAN reduce using rule 89 (cvar -> C_INT f_isConst .)
    NOT_EQUAL_THAN  reduce using rule 89 (cvar -> C_INT f_isConst .)
    SAME_AS         reduce using rule 89 (cvar -> C_INT f_isConst .)
    NEWLINE         reduce using rule 89 (cvar -> C_INT f_isConst .)
    RPAREN          reduce using rule 89 (cvar -> C_INT f_isConst .)
    COMMA           reduce using rule 89 (cvar -> C_INT f_isConst .)
    COLON           reduce using rule 89 (cvar -> C_INT f_isConst .)


state 95

    (87) cvar -> ID f_isID .

    DIVIDE          reduce using rule 87 (cvar -> ID f_isID .)
    TIMES           reduce using rule 87 (cvar -> ID f_isID .)
    MOD             reduce using rule 87 (cvar -> ID f_isID .)
    PLUS            reduce using rule 87 (cvar -> ID f_isID .)
    MINUS           reduce using rule 87 (cvar -> ID f_isID .)
    GREATER_THAN    reduce using rule 87 (cvar -> ID f_isID .)
    LESS_THAN       reduce using rule 87 (cvar -> ID f_isID .)
    LESS_EQUAL_THAN reduce using rule 87 (cvar -> ID f_isID .)
    GREATER_EQUAL_THAN reduce using rule 87 (cvar -> ID f_isID .)
    NOT_EQUAL_THAN  reduce using rule 87 (cvar -> ID f_isID .)
    SAME_AS         reduce using rule 87 (cvar -> ID f_isID .)
    NEWLINE         reduce using rule 87 (cvar -> ID f_isID .)
    RPAREN          reduce using rule 87 (cvar -> ID f_isID .)
    COMMA           reduce using rule 87 (cvar -> ID f_isID .)
    COLON           reduce using rule 87 (cvar -> ID f_isID .)


state 96

    (91) cvar -> C_STRING f_isConst .

    DIVIDE          reduce using rule 91 (cvar -> C_STRING f_isConst .)
    TIMES           reduce using rule 91 (cvar -> C_STRING f_isConst .)
    MOD             reduce using rule 91 (cvar -> C_STRING f_isConst .)
    PLUS            reduce using rule 91 (cvar -> C_STRING f_isConst .)
    MINUS           reduce using rule 91 (cvar -> C_STRING f_isConst .)
    GREATER_THAN    reduce using rule 91 (cvar -> C_STRING f_isConst .)
    LESS_THAN       reduce using rule 91 (cvar -> C_STRING f_isConst .)
    LESS_EQUAL_THAN reduce using rule 91 (cvar -> C_STRING f_isConst .)
    GREATER_EQUAL_THAN reduce using rule 91 (cvar -> C_STRING f_isConst .)
    NOT_EQUAL_THAN  reduce using rule 91 (cvar -> C_STRING f_isConst .)
    SAME_AS         reduce using rule 91 (cvar -> C_STRING f_isConst .)
    NEWLINE         reduce using rule 91 (cvar -> C_STRING f_isConst .)
    RPAREN          reduce using rule 91 (cvar -> C_STRING f_isConst .)
    COMMA           reduce using rule 91 (cvar -> C_STRING f_isConst .)
    COLON           reduce using rule 91 (cvar -> C_STRING f_isConst .)


state 97

    (71) exp -> term moreTerms .

    GREATER_THAN    reduce using rule 71 (exp -> term moreTerms .)
    LESS_THAN       reduce using rule 71 (exp -> term moreTerms .)
    LESS_EQUAL_THAN reduce using rule 71 (exp -> term moreTerms .)
    GREATER_EQUAL_THAN reduce using rule 71 (exp -> term moreTerms .)
    NOT_EQUAL_THAN  reduce using rule 71 (exp -> term moreTerms .)
    SAME_AS         reduce using rule 71 (exp -> term moreTerms .)
    NEWLINE         reduce using rule 71 (exp -> term moreTerms .)
    COMMA           reduce using rule 71 (exp -> term moreTerms .)
    RPAREN          reduce using rule 71 (exp -> term moreTerms .)
    COLON           reduce using rule 71 (exp -> term moreTerms .)


state 98

    (73) moreTerms -> PLUS . f_pushOperator term f_popTerm moreTerms
    (84) f_pushOperator -> .

    LPAREN          reduce using rule 84 (f_pushOperator -> .)
    ID              reduce using rule 84 (f_pushOperator -> .)
    C_BOOL          reduce using rule 84 (f_pushOperator -> .)
    C_INT           reduce using rule 84 (f_pushOperator -> .)
    C_FLOAT         reduce using rule 84 (f_pushOperator -> .)
    C_STRING        reduce using rule 84 (f_pushOperator -> .)
    CALL            reduce using rule 84 (f_pushOperator -> .)

    f_pushOperator                 shift and go to state 119

state 99

    (74) moreTerms -> MINUS . f_pushOperator term f_popTerm moreTerms
    (84) f_pushOperator -> .

    LPAREN          reduce using rule 84 (f_pushOperator -> .)
    ID              reduce using rule 84 (f_pushOperator -> .)
    C_BOOL          reduce using rule 84 (f_pushOperator -> .)
    C_INT           reduce using rule 84 (f_pushOperator -> .)
    C_FLOAT         reduce using rule 84 (f_pushOperator -> .)
    C_STRING        reduce using rule 84 (f_pushOperator -> .)
    CALL            reduce using rule 84 (f_pushOperator -> .)

    f_pushOperator                 shift and go to state 120

state 100

    (72) moreTerms -> empty .

    GREATER_THAN    reduce using rule 72 (moreTerms -> empty .)
    LESS_THAN       reduce using rule 72 (moreTerms -> empty .)
    LESS_EQUAL_THAN reduce using rule 72 (moreTerms -> empty .)
    GREATER_EQUAL_THAN reduce using rule 72 (moreTerms -> empty .)
    NOT_EQUAL_THAN  reduce using rule 72 (moreTerms -> empty .)
    SAME_AS         reduce using rule 72 (moreTerms -> empty .)
    NEWLINE         reduce using rule 72 (moreTerms -> empty .)
    RPAREN          reduce using rule 72 (moreTerms -> empty .)
    COMMA           reduce using rule 72 (moreTerms -> empty .)
    COLON           reduce using rule 72 (moreTerms -> empty .)


state 101

    (58) funct -> CALL ID . LPAREN RPAREN
    (59) funct -> CALL ID . LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 121


state 102

    (63) expression -> exp compareToken . exp f_popComparation
    (71) exp -> . term moreTerms
    (76) term -> . factor moreFactors
    (81) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (82) factor -> . cvar
    (83) factor -> . funct
    (87) cvar -> . ID f_isID
    (88) cvar -> . C_BOOL f_isConst
    (89) cvar -> . C_INT f_isConst
    (90) cvar -> . C_FLOAT f_isConst
    (91) cvar -> . C_STRING f_isConst
    (58) funct -> . CALL ID LPAREN RPAREN
    (59) funct -> . CALL ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 72
    ID              shift and go to state 74
    C_BOOL          shift and go to state 70
    C_INT           shift and go to state 73
    C_FLOAT         shift and go to state 68
    C_STRING        shift and go to state 75
    CALL            shift and go to state 77

    term                           shift and go to state 76
    funct                          shift and go to state 69
    exp                            shift and go to state 122
    factor                         shift and go to state 71
    cvar                           shift and go to state 67

state 103

    (68) compareToken -> GREATER_EQUAL_THAN .

    LPAREN          reduce using rule 68 (compareToken -> GREATER_EQUAL_THAN .)
    ID              reduce using rule 68 (compareToken -> GREATER_EQUAL_THAN .)
    C_BOOL          reduce using rule 68 (compareToken -> GREATER_EQUAL_THAN .)
    C_INT           reduce using rule 68 (compareToken -> GREATER_EQUAL_THAN .)
    C_FLOAT         reduce using rule 68 (compareToken -> GREATER_EQUAL_THAN .)
    C_STRING        reduce using rule 68 (compareToken -> GREATER_EQUAL_THAN .)
    CALL            reduce using rule 68 (compareToken -> GREATER_EQUAL_THAN .)


state 104

    (67) compareToken -> LESS_EQUAL_THAN .

    LPAREN          reduce using rule 67 (compareToken -> LESS_EQUAL_THAN .)
    ID              reduce using rule 67 (compareToken -> LESS_EQUAL_THAN .)
    C_BOOL          reduce using rule 67 (compareToken -> LESS_EQUAL_THAN .)
    C_INT           reduce using rule 67 (compareToken -> LESS_EQUAL_THAN .)
    C_FLOAT         reduce using rule 67 (compareToken -> LESS_EQUAL_THAN .)
    C_STRING        reduce using rule 67 (compareToken -> LESS_EQUAL_THAN .)
    CALL            reduce using rule 67 (compareToken -> LESS_EQUAL_THAN .)


state 105

    (70) compareToken -> SAME_AS .

    LPAREN          reduce using rule 70 (compareToken -> SAME_AS .)
    ID              reduce using rule 70 (compareToken -> SAME_AS .)
    C_BOOL          reduce using rule 70 (compareToken -> SAME_AS .)
    C_INT           reduce using rule 70 (compareToken -> SAME_AS .)
    C_FLOAT         reduce using rule 70 (compareToken -> SAME_AS .)
    C_STRING        reduce using rule 70 (compareToken -> SAME_AS .)
    CALL            reduce using rule 70 (compareToken -> SAME_AS .)


state 106

    (69) compareToken -> NOT_EQUAL_THAN .

    LPAREN          reduce using rule 69 (compareToken -> NOT_EQUAL_THAN .)
    ID              reduce using rule 69 (compareToken -> NOT_EQUAL_THAN .)
    C_BOOL          reduce using rule 69 (compareToken -> NOT_EQUAL_THAN .)
    C_INT           reduce using rule 69 (compareToken -> NOT_EQUAL_THAN .)
    C_FLOAT         reduce using rule 69 (compareToken -> NOT_EQUAL_THAN .)
    C_STRING        reduce using rule 69 (compareToken -> NOT_EQUAL_THAN .)
    CALL            reduce using rule 69 (compareToken -> NOT_EQUAL_THAN .)


state 107

    (65) compareToken -> GREATER_THAN .

    LPAREN          reduce using rule 65 (compareToken -> GREATER_THAN .)
    ID              reduce using rule 65 (compareToken -> GREATER_THAN .)
    C_BOOL          reduce using rule 65 (compareToken -> GREATER_THAN .)
    C_INT           reduce using rule 65 (compareToken -> GREATER_THAN .)
    C_FLOAT         reduce using rule 65 (compareToken -> GREATER_THAN .)
    C_STRING        reduce using rule 65 (compareToken -> GREATER_THAN .)
    CALL            reduce using rule 65 (compareToken -> GREATER_THAN .)


state 108

    (66) compareToken -> LESS_THAN .

    LPAREN          reduce using rule 66 (compareToken -> LESS_THAN .)
    ID              reduce using rule 66 (compareToken -> LESS_THAN .)
    C_BOOL          reduce using rule 66 (compareToken -> LESS_THAN .)
    C_INT           reduce using rule 66 (compareToken -> LESS_THAN .)
    C_FLOAT         reduce using rule 66 (compareToken -> LESS_THAN .)
    C_STRING        reduce using rule 66 (compareToken -> LESS_THAN .)
    CALL            reduce using rule 66 (compareToken -> LESS_THAN .)


state 109

    (37) assign -> ID f_checkID EQUAL expression NEWLINE . f_generateEqual
    (39) f_generateEqual -> .

    DEF             reduce using rule 39 (f_generateEqual -> .)
    $end            reduce using rule 39 (f_generateEqual -> .)
    RETURN          reduce using rule 39 (f_generateEqual -> .)
    ID              reduce using rule 39 (f_generateEqual -> .)
    IF              reduce using rule 39 (f_generateEqual -> .)
    WHILE           reduce using rule 39 (f_generateEqual -> .)
    DO              reduce using rule 39 (f_generateEqual -> .)
    CALL            reduce using rule 39 (f_generateEqual -> .)
    BOOL            reduce using rule 39 (f_generateEqual -> .)
    INT             reduce using rule 39 (f_generateEqual -> .)
    FLOAT           reduce using rule 39 (f_generateEqual -> .)
    STRING          reduce using rule 39 (f_generateEqual -> .)
    IMAGE           reduce using rule 39 (f_generateEqual -> .)
    NEWLINE         reduce using rule 39 (f_generateEqual -> .)
    SEMICOLON       reduce using rule 39 (f_generateEqual -> .)

    f_generateEqual                shift and go to state 123

state 110

    (13) pwmDeclaration -> PWM f_saveType pinList NEWLINE .

    BOOL            reduce using rule 13 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)
    INT             reduce using rule 13 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)
    FLOAT           reduce using rule 13 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)
    STRING          reduce using rule 13 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)
    IMAGE           reduce using rule 13 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)
    ID              reduce using rule 13 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)
    DEF             reduce using rule 13 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)
    $end            reduce using rule 13 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)


state 111

    (15) pinList -> C_INT COLON ID COMMA . pinList
    (14) pinList -> . C_INT COLON ID
    (15) pinList -> . C_INT COLON ID COMMA pinList

    C_INT           shift and go to state 52

    pinList                        shift and go to state 124

state 112

    (26) functions -> DEF tipo ID f_saveModule LPAREN . RPAREN block functions
    (27) functions -> DEF tipo ID f_saveModule LPAREN . tipo ID f_addToParam parameterList RPAREN block functions
    (21) tipo -> . BOOL f_saveType
    (22) tipo -> . INT f_saveType
    (23) tipo -> . FLOAT f_saveType
    (24) tipo -> . STRING f_saveType
    (25) tipo -> . IMAGE f_saveType

    RPAREN          shift and go to state 125
    BOOL            shift and go to state 16
    INT             shift and go to state 14
    FLOAT           shift and go to state 11
    STRING          shift and go to state 17
    IMAGE           shift and go to state 15

    tipo                           shift and go to state 126

state 113

    (30) functions -> DEF VOID MAIN f_saveModule LPAREN . RPAREN block functions
    (31) functions -> DEF VOID MAIN f_saveModule LPAREN . tipo ID f_addToParam parameterList RPAREN block functions
    (21) tipo -> . BOOL f_saveType
    (22) tipo -> . INT f_saveType
    (23) tipo -> . FLOAT f_saveType
    (24) tipo -> . STRING f_saveType
    (25) tipo -> . IMAGE f_saveType

    RPAREN          shift and go to state 127
    BOOL            shift and go to state 16
    INT             shift and go to state 14
    FLOAT           shift and go to state 11
    STRING          shift and go to state 17
    IMAGE           shift and go to state 15

    tipo                           shift and go to state 128

state 114

    (28) functions -> DEF VOID ID f_saveModule LPAREN . RPAREN block functions
    (29) functions -> DEF VOID ID f_saveModule LPAREN . tipo ID f_addToParam parameterList RPAREN block functions
    (21) tipo -> . BOOL f_saveType
    (22) tipo -> . INT f_saveType
    (23) tipo -> . FLOAT f_saveType
    (24) tipo -> . STRING f_saveType
    (25) tipo -> . IMAGE f_saveType

    RPAREN          shift and go to state 129
    BOOL            shift and go to state 16
    INT             shift and go to state 14
    FLOAT           shift and go to state 11
    STRING          shift and go to state 17
    IMAGE           shift and go to state 15

    tipo                           shift and go to state 130

state 115

    (78) moreFactors -> DIVIDE f_pushOperator . factor f_popFactor moreFactors
    (81) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (82) factor -> . cvar
    (83) factor -> . funct
    (87) cvar -> . ID f_isID
    (88) cvar -> . C_BOOL f_isConst
    (89) cvar -> . C_INT f_isConst
    (90) cvar -> . C_FLOAT f_isConst
    (91) cvar -> . C_STRING f_isConst
    (58) funct -> . CALL ID LPAREN RPAREN
    (59) funct -> . CALL ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 72
    ID              shift and go to state 74
    C_BOOL          shift and go to state 70
    C_INT           shift and go to state 73
    C_FLOAT         shift and go to state 68
    C_STRING        shift and go to state 75
    CALL            shift and go to state 77

    funct                          shift and go to state 69
    cvar                           shift and go to state 67
    factor                         shift and go to state 131

state 116

    (79) moreFactors -> TIMES f_pushOperator . factor f_popFactor moreFactors
    (81) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (82) factor -> . cvar
    (83) factor -> . funct
    (87) cvar -> . ID f_isID
    (88) cvar -> . C_BOOL f_isConst
    (89) cvar -> . C_INT f_isConst
    (90) cvar -> . C_FLOAT f_isConst
    (91) cvar -> . C_STRING f_isConst
    (58) funct -> . CALL ID LPAREN RPAREN
    (59) funct -> . CALL ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 72
    ID              shift and go to state 74
    C_BOOL          shift and go to state 70
    C_INT           shift and go to state 73
    C_FLOAT         shift and go to state 68
    C_STRING        shift and go to state 75
    CALL            shift and go to state 77

    funct                          shift and go to state 69
    cvar                           shift and go to state 67
    factor                         shift and go to state 132

state 117

    (80) moreFactors -> MOD f_pushOperator . factor f_popFactor moreFactors
    (81) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (82) factor -> . cvar
    (83) factor -> . funct
    (87) cvar -> . ID f_isID
    (88) cvar -> . C_BOOL f_isConst
    (89) cvar -> . C_INT f_isConst
    (90) cvar -> . C_FLOAT f_isConst
    (91) cvar -> . C_STRING f_isConst
    (58) funct -> . CALL ID LPAREN RPAREN
    (59) funct -> . CALL ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 72
    ID              shift and go to state 74
    C_BOOL          shift and go to state 70
    C_INT           shift and go to state 73
    C_FLOAT         shift and go to state 68
    C_STRING        shift and go to state 75
    CALL            shift and go to state 77

    funct                          shift and go to state 69
    cvar                           shift and go to state 67
    factor                         shift and go to state 133

state 118

    (81) factor -> LPAREN f_pushOperator expression . RPAREN f_popOperator

    RPAREN          shift and go to state 134


state 119

    (73) moreTerms -> PLUS f_pushOperator . term f_popTerm moreTerms
    (76) term -> . factor moreFactors
    (81) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (82) factor -> . cvar
    (83) factor -> . funct
    (87) cvar -> . ID f_isID
    (88) cvar -> . C_BOOL f_isConst
    (89) cvar -> . C_INT f_isConst
    (90) cvar -> . C_FLOAT f_isConst
    (91) cvar -> . C_STRING f_isConst
    (58) funct -> . CALL ID LPAREN RPAREN
    (59) funct -> . CALL ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 72
    ID              shift and go to state 74
    C_BOOL          shift and go to state 70
    C_INT           shift and go to state 73
    C_FLOAT         shift and go to state 68
    C_STRING        shift and go to state 75
    CALL            shift and go to state 77

    term                           shift and go to state 135
    funct                          shift and go to state 69
    factor                         shift and go to state 71
    cvar                           shift and go to state 67

state 120

    (74) moreTerms -> MINUS f_pushOperator . term f_popTerm moreTerms
    (76) term -> . factor moreFactors
    (81) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (82) factor -> . cvar
    (83) factor -> . funct
    (87) cvar -> . ID f_isID
    (88) cvar -> . C_BOOL f_isConst
    (89) cvar -> . C_INT f_isConst
    (90) cvar -> . C_FLOAT f_isConst
    (91) cvar -> . C_STRING f_isConst
    (58) funct -> . CALL ID LPAREN RPAREN
    (59) funct -> . CALL ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 72
    ID              shift and go to state 74
    C_BOOL          shift and go to state 70
    C_INT           shift and go to state 73
    C_FLOAT         shift and go to state 68
    C_STRING        shift and go to state 75
    CALL            shift and go to state 77

    term                           shift and go to state 136
    funct                          shift and go to state 69
    factor                         shift and go to state 71
    cvar                           shift and go to state 67

state 121

    (58) funct -> CALL ID LPAREN . RPAREN
    (59) funct -> CALL ID LPAREN . expression expressionList RPAREN
    (62) expression -> . exp
    (63) expression -> . exp compareToken exp f_popComparation
    (71) exp -> . term moreTerms
    (76) term -> . factor moreFactors
    (81) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (82) factor -> . cvar
    (83) factor -> . funct
    (87) cvar -> . ID f_isID
    (88) cvar -> . C_BOOL f_isConst
    (89) cvar -> . C_INT f_isConst
    (90) cvar -> . C_FLOAT f_isConst
    (91) cvar -> . C_STRING f_isConst
    (58) funct -> . CALL ID LPAREN RPAREN
    (59) funct -> . CALL ID LPAREN expression expressionList RPAREN

    RPAREN          shift and go to state 137
    LPAREN          shift and go to state 72
    ID              shift and go to state 74
    C_BOOL          shift and go to state 70
    C_INT           shift and go to state 73
    C_FLOAT         shift and go to state 68
    C_STRING        shift and go to state 75
    CALL            shift and go to state 77

    term                           shift and go to state 76
    funct                          shift and go to state 69
    exp                            shift and go to state 78
    factor                         shift and go to state 71
    cvar                           shift and go to state 67
    expression                     shift and go to state 138

state 122

    (63) expression -> exp compareToken exp . f_popComparation
    (64) f_popComparation -> .

    NEWLINE         reduce using rule 64 (f_popComparation -> .)
    RPAREN          reduce using rule 64 (f_popComparation -> .)
    COMMA           reduce using rule 64 (f_popComparation -> .)
    COLON           reduce using rule 64 (f_popComparation -> .)

    f_popComparation               shift and go to state 139

state 123

    (37) assign -> ID f_checkID EQUAL expression NEWLINE f_generateEqual .

    RETURN          reduce using rule 37 (assign -> ID f_checkID EQUAL expression NEWLINE f_generateEqual .)
    ID              reduce using rule 37 (assign -> ID f_checkID EQUAL expression NEWLINE f_generateEqual .)
    IF              reduce using rule 37 (assign -> ID f_checkID EQUAL expression NEWLINE f_generateEqual .)
    WHILE           reduce using rule 37 (assign -> ID f_checkID EQUAL expression NEWLINE f_generateEqual .)
    DO              reduce using rule 37 (assign -> ID f_checkID EQUAL expression NEWLINE f_generateEqual .)
    CALL            reduce using rule 37 (assign -> ID f_checkID EQUAL expression NEWLINE f_generateEqual .)
    BOOL            reduce using rule 37 (assign -> ID f_checkID EQUAL expression NEWLINE f_generateEqual .)
    INT             reduce using rule 37 (assign -> ID f_checkID EQUAL expression NEWLINE f_generateEqual .)
    FLOAT           reduce using rule 37 (assign -> ID f_checkID EQUAL expression NEWLINE f_generateEqual .)
    STRING          reduce using rule 37 (assign -> ID f_checkID EQUAL expression NEWLINE f_generateEqual .)
    IMAGE           reduce using rule 37 (assign -> ID f_checkID EQUAL expression NEWLINE f_generateEqual .)
    NEWLINE         reduce using rule 37 (assign -> ID f_checkID EQUAL expression NEWLINE f_generateEqual .)
    SEMICOLON       reduce using rule 37 (assign -> ID f_checkID EQUAL expression NEWLINE f_generateEqual .)
    DEF             reduce using rule 37 (assign -> ID f_checkID EQUAL expression NEWLINE f_generateEqual .)
    $end            reduce using rule 37 (assign -> ID f_checkID EQUAL expression NEWLINE f_generateEqual .)


state 124

    (15) pinList -> C_INT COLON ID COMMA pinList .

    NEWLINE         reduce using rule 15 (pinList -> C_INT COLON ID COMMA pinList .)


state 125

    (26) functions -> DEF tipo ID f_saveModule LPAREN RPAREN . block functions
    (41) block -> . COLON NEWLINE statement moreStatements NEWLINE SEMICOLON NEWLINE
    (42) block -> . COLON NEWLINE statement moreStatements SEMICOLON NEWLINE
    (43) block -> . COLON statement moreStatements NEWLINE SEMICOLON NEWLINE
    (44) block -> . COLON statement moreStatements SEMICOLON NEWLINE

    COLON           shift and go to state 140

    block                          shift and go to state 141

state 126

    (27) functions -> DEF tipo ID f_saveModule LPAREN tipo . ID f_addToParam parameterList RPAREN block functions

    ID              shift and go to state 142


state 127

    (30) functions -> DEF VOID MAIN f_saveModule LPAREN RPAREN . block functions
    (41) block -> . COLON NEWLINE statement moreStatements NEWLINE SEMICOLON NEWLINE
    (42) block -> . COLON NEWLINE statement moreStatements SEMICOLON NEWLINE
    (43) block -> . COLON statement moreStatements NEWLINE SEMICOLON NEWLINE
    (44) block -> . COLON statement moreStatements SEMICOLON NEWLINE

    COLON           shift and go to state 140

    block                          shift and go to state 143

state 128

    (31) functions -> DEF VOID MAIN f_saveModule LPAREN tipo . ID f_addToParam parameterList RPAREN block functions

    ID              shift and go to state 144


state 129

    (28) functions -> DEF VOID ID f_saveModule LPAREN RPAREN . block functions
    (41) block -> . COLON NEWLINE statement moreStatements NEWLINE SEMICOLON NEWLINE
    (42) block -> . COLON NEWLINE statement moreStatements SEMICOLON NEWLINE
    (43) block -> . COLON statement moreStatements NEWLINE SEMICOLON NEWLINE
    (44) block -> . COLON statement moreStatements SEMICOLON NEWLINE

    COLON           shift and go to state 140

    block                          shift and go to state 145

state 130

    (29) functions -> DEF VOID ID f_saveModule LPAREN tipo . ID f_addToParam parameterList RPAREN block functions

    ID              shift and go to state 146


state 131

    (78) moreFactors -> DIVIDE f_pushOperator factor . f_popFactor moreFactors
    (86) f_popFactor -> .

    DIVIDE          reduce using rule 86 (f_popFactor -> .)
    TIMES           reduce using rule 86 (f_popFactor -> .)
    MOD             reduce using rule 86 (f_popFactor -> .)
    PLUS            reduce using rule 86 (f_popFactor -> .)
    MINUS           reduce using rule 86 (f_popFactor -> .)
    GREATER_THAN    reduce using rule 86 (f_popFactor -> .)
    LESS_THAN       reduce using rule 86 (f_popFactor -> .)
    LESS_EQUAL_THAN reduce using rule 86 (f_popFactor -> .)
    GREATER_EQUAL_THAN reduce using rule 86 (f_popFactor -> .)
    NOT_EQUAL_THAN  reduce using rule 86 (f_popFactor -> .)
    SAME_AS         reduce using rule 86 (f_popFactor -> .)
    NEWLINE         reduce using rule 86 (f_popFactor -> .)
    RPAREN          reduce using rule 86 (f_popFactor -> .)
    COMMA           reduce using rule 86 (f_popFactor -> .)
    COLON           reduce using rule 86 (f_popFactor -> .)

    f_popFactor                    shift and go to state 147

state 132

    (79) moreFactors -> TIMES f_pushOperator factor . f_popFactor moreFactors
    (86) f_popFactor -> .

    DIVIDE          reduce using rule 86 (f_popFactor -> .)
    TIMES           reduce using rule 86 (f_popFactor -> .)
    MOD             reduce using rule 86 (f_popFactor -> .)
    PLUS            reduce using rule 86 (f_popFactor -> .)
    MINUS           reduce using rule 86 (f_popFactor -> .)
    GREATER_THAN    reduce using rule 86 (f_popFactor -> .)
    LESS_THAN       reduce using rule 86 (f_popFactor -> .)
    LESS_EQUAL_THAN reduce using rule 86 (f_popFactor -> .)
    GREATER_EQUAL_THAN reduce using rule 86 (f_popFactor -> .)
    NOT_EQUAL_THAN  reduce using rule 86 (f_popFactor -> .)
    SAME_AS         reduce using rule 86 (f_popFactor -> .)
    NEWLINE         reduce using rule 86 (f_popFactor -> .)
    RPAREN          reduce using rule 86 (f_popFactor -> .)
    COMMA           reduce using rule 86 (f_popFactor -> .)
    COLON           reduce using rule 86 (f_popFactor -> .)

    f_popFactor                    shift and go to state 148

state 133

    (80) moreFactors -> MOD f_pushOperator factor . f_popFactor moreFactors
    (86) f_popFactor -> .

    DIVIDE          reduce using rule 86 (f_popFactor -> .)
    TIMES           reduce using rule 86 (f_popFactor -> .)
    MOD             reduce using rule 86 (f_popFactor -> .)
    PLUS            reduce using rule 86 (f_popFactor -> .)
    MINUS           reduce using rule 86 (f_popFactor -> .)
    GREATER_THAN    reduce using rule 86 (f_popFactor -> .)
    LESS_THAN       reduce using rule 86 (f_popFactor -> .)
    LESS_EQUAL_THAN reduce using rule 86 (f_popFactor -> .)
    GREATER_EQUAL_THAN reduce using rule 86 (f_popFactor -> .)
    NOT_EQUAL_THAN  reduce using rule 86 (f_popFactor -> .)
    SAME_AS         reduce using rule 86 (f_popFactor -> .)
    NEWLINE         reduce using rule 86 (f_popFactor -> .)
    RPAREN          reduce using rule 86 (f_popFactor -> .)
    COMMA           reduce using rule 86 (f_popFactor -> .)
    COLON           reduce using rule 86 (f_popFactor -> .)

    f_popFactor                    shift and go to state 149

state 134

    (81) factor -> LPAREN f_pushOperator expression RPAREN . f_popOperator
    (85) f_popOperator -> .

    DIVIDE          reduce using rule 85 (f_popOperator -> .)
    TIMES           reduce using rule 85 (f_popOperator -> .)
    MOD             reduce using rule 85 (f_popOperator -> .)
    PLUS            reduce using rule 85 (f_popOperator -> .)
    MINUS           reduce using rule 85 (f_popOperator -> .)
    GREATER_THAN    reduce using rule 85 (f_popOperator -> .)
    LESS_THAN       reduce using rule 85 (f_popOperator -> .)
    LESS_EQUAL_THAN reduce using rule 85 (f_popOperator -> .)
    GREATER_EQUAL_THAN reduce using rule 85 (f_popOperator -> .)
    NOT_EQUAL_THAN  reduce using rule 85 (f_popOperator -> .)
    SAME_AS         reduce using rule 85 (f_popOperator -> .)
    NEWLINE         reduce using rule 85 (f_popOperator -> .)
    RPAREN          reduce using rule 85 (f_popOperator -> .)
    COMMA           reduce using rule 85 (f_popOperator -> .)
    COLON           reduce using rule 85 (f_popOperator -> .)

    f_popOperator                  shift and go to state 150

state 135

    (73) moreTerms -> PLUS f_pushOperator term . f_popTerm moreTerms
    (75) f_popTerm -> .

    PLUS            reduce using rule 75 (f_popTerm -> .)
    MINUS           reduce using rule 75 (f_popTerm -> .)
    GREATER_THAN    reduce using rule 75 (f_popTerm -> .)
    LESS_THAN       reduce using rule 75 (f_popTerm -> .)
    LESS_EQUAL_THAN reduce using rule 75 (f_popTerm -> .)
    GREATER_EQUAL_THAN reduce using rule 75 (f_popTerm -> .)
    NOT_EQUAL_THAN  reduce using rule 75 (f_popTerm -> .)
    SAME_AS         reduce using rule 75 (f_popTerm -> .)
    NEWLINE         reduce using rule 75 (f_popTerm -> .)
    RPAREN          reduce using rule 75 (f_popTerm -> .)
    COMMA           reduce using rule 75 (f_popTerm -> .)
    COLON           reduce using rule 75 (f_popTerm -> .)

    f_popTerm                      shift and go to state 151

state 136

    (74) moreTerms -> MINUS f_pushOperator term . f_popTerm moreTerms
    (75) f_popTerm -> .

    PLUS            reduce using rule 75 (f_popTerm -> .)
    MINUS           reduce using rule 75 (f_popTerm -> .)
    GREATER_THAN    reduce using rule 75 (f_popTerm -> .)
    LESS_THAN       reduce using rule 75 (f_popTerm -> .)
    LESS_EQUAL_THAN reduce using rule 75 (f_popTerm -> .)
    GREATER_EQUAL_THAN reduce using rule 75 (f_popTerm -> .)
    NOT_EQUAL_THAN  reduce using rule 75 (f_popTerm -> .)
    SAME_AS         reduce using rule 75 (f_popTerm -> .)
    NEWLINE         reduce using rule 75 (f_popTerm -> .)
    RPAREN          reduce using rule 75 (f_popTerm -> .)
    COMMA           reduce using rule 75 (f_popTerm -> .)
    COLON           reduce using rule 75 (f_popTerm -> .)

    f_popTerm                      shift and go to state 152

state 137

    (58) funct -> CALL ID LPAREN RPAREN .

    DIVIDE          reduce using rule 58 (funct -> CALL ID LPAREN RPAREN .)
    TIMES           reduce using rule 58 (funct -> CALL ID LPAREN RPAREN .)
    MOD             reduce using rule 58 (funct -> CALL ID LPAREN RPAREN .)
    PLUS            reduce using rule 58 (funct -> CALL ID LPAREN RPAREN .)
    MINUS           reduce using rule 58 (funct -> CALL ID LPAREN RPAREN .)
    GREATER_THAN    reduce using rule 58 (funct -> CALL ID LPAREN RPAREN .)
    LESS_THAN       reduce using rule 58 (funct -> CALL ID LPAREN RPAREN .)
    LESS_EQUAL_THAN reduce using rule 58 (funct -> CALL ID LPAREN RPAREN .)
    GREATER_EQUAL_THAN reduce using rule 58 (funct -> CALL ID LPAREN RPAREN .)
    NOT_EQUAL_THAN  reduce using rule 58 (funct -> CALL ID LPAREN RPAREN .)
    SAME_AS         reduce using rule 58 (funct -> CALL ID LPAREN RPAREN .)
    NEWLINE         reduce using rule 58 (funct -> CALL ID LPAREN RPAREN .)
    RPAREN          reduce using rule 58 (funct -> CALL ID LPAREN RPAREN .)
    COMMA           reduce using rule 58 (funct -> CALL ID LPAREN RPAREN .)
    COLON           reduce using rule 58 (funct -> CALL ID LPAREN RPAREN .)


state 138

    (59) funct -> CALL ID LPAREN expression . expressionList RPAREN
    (60) expressionList -> . empty
    (61) expressionList -> . COMMA expression expressionList
    (3) empty -> .

    COMMA           shift and go to state 154
    RPAREN          reduce using rule 3 (empty -> .)

    expressionList                 shift and go to state 153
    empty                          shift and go to state 155

state 139

    (63) expression -> exp compareToken exp f_popComparation .

    COMMA           reduce using rule 63 (expression -> exp compareToken exp f_popComparation .)
    RPAREN          reduce using rule 63 (expression -> exp compareToken exp f_popComparation .)
    COLON           reduce using rule 63 (expression -> exp compareToken exp f_popComparation .)
    NEWLINE         reduce using rule 63 (expression -> exp compareToken exp f_popComparation .)


state 140

    (41) block -> COLON . NEWLINE statement moreStatements NEWLINE SEMICOLON NEWLINE
    (42) block -> COLON . NEWLINE statement moreStatements SEMICOLON NEWLINE
    (43) block -> COLON . statement moreStatements NEWLINE SEMICOLON NEWLINE
    (44) block -> COLON . statement moreStatements SEMICOLON NEWLINE
    (47) statement -> . vars
    (48) statement -> . assign
    (49) statement -> . condition
    (50) statement -> . cycle
    (51) statement -> . funct NEWLINE
    (52) statement -> . RETURN expression NEWLINE
    (16) vars -> . tipo idList NEWLINE vars
    (17) vars -> . empty
    (37) assign -> . ID f_checkID EQUAL expression NEWLINE f_generateEqual
    (38) assign -> . empty
    (53) condition -> . IF f_isCondition expression block
    (54) condition -> . IF f_isCondition expression block ELSE block
    (55) cycle -> . WHILE f_isCondition expression block
    (56) cycle -> . DO block WHILE f_isCondition expression NEWLINE
    (58) funct -> . CALL ID LPAREN RPAREN
    (59) funct -> . CALL ID LPAREN expression expressionList RPAREN
    (21) tipo -> . BOOL f_saveType
    (22) tipo -> . INT f_saveType
    (23) tipo -> . FLOAT f_saveType
    (24) tipo -> . STRING f_saveType
    (25) tipo -> . IMAGE f_saveType
    (3) empty -> .

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for IMAGE resolved as shift
  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 161
    RETURN          shift and go to state 157
    ID              shift and go to state 27
    IF              shift and go to state 166
    WHILE           shift and go to state 160
    DO              shift and go to state 156
    CALL            shift and go to state 77
    BOOL            shift and go to state 16
    INT             shift and go to state 14
    FLOAT           shift and go to state 11
    STRING          shift and go to state 17
    IMAGE           shift and go to state 15
    SEMICOLON       reduce using rule 3 (empty -> .)

  ! RETURN          [ reduce using rule 3 (empty -> .) ]
  ! ID              [ reduce using rule 3 (empty -> .) ]
  ! IF              [ reduce using rule 3 (empty -> .) ]
  ! WHILE           [ reduce using rule 3 (empty -> .) ]
  ! DO              [ reduce using rule 3 (empty -> .) ]
  ! CALL            [ reduce using rule 3 (empty -> .) ]
  ! BOOL            [ reduce using rule 3 (empty -> .) ]
  ! INT             [ reduce using rule 3 (empty -> .) ]
  ! FLOAT           [ reduce using rule 3 (empty -> .) ]
  ! STRING          [ reduce using rule 3 (empty -> .) ]
  ! IMAGE           [ reduce using rule 3 (empty -> .) ]
  ! NEWLINE         [ reduce using rule 3 (empty -> .) ]

    tipo                           shift and go to state 13
    vars                           shift and go to state 158
    funct                          shift and go to state 159
    empty                          shift and go to state 164
    statement                      shift and go to state 162
    assign                         shift and go to state 167
    condition                      shift and go to state 165
    cycle                          shift and go to state 163

state 141

    (26) functions -> DEF tipo ID f_saveModule LPAREN RPAREN block . functions
    (26) functions -> . DEF tipo ID f_saveModule LPAREN RPAREN block functions
    (27) functions -> . DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN block functions
    (28) functions -> . DEF VOID ID f_saveModule LPAREN RPAREN block functions
    (29) functions -> . DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN block functions
    (30) functions -> . DEF VOID MAIN f_saveModule LPAREN RPAREN block functions
    (31) functions -> . DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN block functions
    (32) functions -> . empty
    (3) empty -> .

    DEF             shift and go to state 43
    $end            reduce using rule 3 (empty -> .)

    functions                      shift and go to state 168
    empty                          shift and go to state 42

state 142

    (27) functions -> DEF tipo ID f_saveModule LPAREN tipo ID . f_addToParam parameterList RPAREN block functions
    (36) f_addToParam -> .

    COMMA           reduce using rule 36 (f_addToParam -> .)
    RPAREN          reduce using rule 36 (f_addToParam -> .)

    f_addToParam                   shift and go to state 169

state 143

    (30) functions -> DEF VOID MAIN f_saveModule LPAREN RPAREN block . functions
    (26) functions -> . DEF tipo ID f_saveModule LPAREN RPAREN block functions
    (27) functions -> . DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN block functions
    (28) functions -> . DEF VOID ID f_saveModule LPAREN RPAREN block functions
    (29) functions -> . DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN block functions
    (30) functions -> . DEF VOID MAIN f_saveModule LPAREN RPAREN block functions
    (31) functions -> . DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN block functions
    (32) functions -> . empty
    (3) empty -> .

    DEF             shift and go to state 43
    $end            reduce using rule 3 (empty -> .)

    functions                      shift and go to state 170
    empty                          shift and go to state 42

state 144

    (31) functions -> DEF VOID MAIN f_saveModule LPAREN tipo ID . f_addToParam parameterList RPAREN block functions
    (36) f_addToParam -> .

    COMMA           reduce using rule 36 (f_addToParam -> .)
    RPAREN          reduce using rule 36 (f_addToParam -> .)

    f_addToParam                   shift and go to state 171

state 145

    (28) functions -> DEF VOID ID f_saveModule LPAREN RPAREN block . functions
    (26) functions -> . DEF tipo ID f_saveModule LPAREN RPAREN block functions
    (27) functions -> . DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN block functions
    (28) functions -> . DEF VOID ID f_saveModule LPAREN RPAREN block functions
    (29) functions -> . DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN block functions
    (30) functions -> . DEF VOID MAIN f_saveModule LPAREN RPAREN block functions
    (31) functions -> . DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN block functions
    (32) functions -> . empty
    (3) empty -> .

    DEF             shift and go to state 43
    $end            reduce using rule 3 (empty -> .)

    functions                      shift and go to state 172
    empty                          shift and go to state 42

state 146

    (29) functions -> DEF VOID ID f_saveModule LPAREN tipo ID . f_addToParam parameterList RPAREN block functions
    (36) f_addToParam -> .

    COMMA           reduce using rule 36 (f_addToParam -> .)
    RPAREN          reduce using rule 36 (f_addToParam -> .)

    f_addToParam                   shift and go to state 173

state 147

    (78) moreFactors -> DIVIDE f_pushOperator factor f_popFactor . moreFactors
    (77) moreFactors -> . empty
    (78) moreFactors -> . DIVIDE f_pushOperator factor f_popFactor moreFactors
    (79) moreFactors -> . TIMES f_pushOperator factor f_popFactor moreFactors
    (80) moreFactors -> . MOD f_pushOperator factor f_popFactor moreFactors
    (3) empty -> .

    DIVIDE          shift and go to state 89
    TIMES           shift and go to state 90
    MOD             shift and go to state 92
    PLUS            reduce using rule 3 (empty -> .)
    MINUS           reduce using rule 3 (empty -> .)
    GREATER_THAN    reduce using rule 3 (empty -> .)
    LESS_THAN       reduce using rule 3 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 3 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 3 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 3 (empty -> .)
    SAME_AS         reduce using rule 3 (empty -> .)
    NEWLINE         reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    COLON           reduce using rule 3 (empty -> .)

    moreFactors                    shift and go to state 174
    empty                          shift and go to state 91

state 148

    (79) moreFactors -> TIMES f_pushOperator factor f_popFactor . moreFactors
    (77) moreFactors -> . empty
    (78) moreFactors -> . DIVIDE f_pushOperator factor f_popFactor moreFactors
    (79) moreFactors -> . TIMES f_pushOperator factor f_popFactor moreFactors
    (80) moreFactors -> . MOD f_pushOperator factor f_popFactor moreFactors
    (3) empty -> .

    DIVIDE          shift and go to state 89
    TIMES           shift and go to state 90
    MOD             shift and go to state 92
    PLUS            reduce using rule 3 (empty -> .)
    MINUS           reduce using rule 3 (empty -> .)
    GREATER_THAN    reduce using rule 3 (empty -> .)
    LESS_THAN       reduce using rule 3 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 3 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 3 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 3 (empty -> .)
    SAME_AS         reduce using rule 3 (empty -> .)
    NEWLINE         reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    COLON           reduce using rule 3 (empty -> .)

    moreFactors                    shift and go to state 175
    empty                          shift and go to state 91

state 149

    (80) moreFactors -> MOD f_pushOperator factor f_popFactor . moreFactors
    (77) moreFactors -> . empty
    (78) moreFactors -> . DIVIDE f_pushOperator factor f_popFactor moreFactors
    (79) moreFactors -> . TIMES f_pushOperator factor f_popFactor moreFactors
    (80) moreFactors -> . MOD f_pushOperator factor f_popFactor moreFactors
    (3) empty -> .

    DIVIDE          shift and go to state 89
    TIMES           shift and go to state 90
    MOD             shift and go to state 92
    PLUS            reduce using rule 3 (empty -> .)
    MINUS           reduce using rule 3 (empty -> .)
    GREATER_THAN    reduce using rule 3 (empty -> .)
    LESS_THAN       reduce using rule 3 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 3 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 3 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 3 (empty -> .)
    SAME_AS         reduce using rule 3 (empty -> .)
    NEWLINE         reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    COLON           reduce using rule 3 (empty -> .)

    moreFactors                    shift and go to state 176
    empty                          shift and go to state 91

state 150

    (81) factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .

    DIVIDE          reduce using rule 81 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    TIMES           reduce using rule 81 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    MOD             reduce using rule 81 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    PLUS            reduce using rule 81 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    MINUS           reduce using rule 81 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    GREATER_THAN    reduce using rule 81 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    LESS_THAN       reduce using rule 81 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    LESS_EQUAL_THAN reduce using rule 81 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    GREATER_EQUAL_THAN reduce using rule 81 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    NOT_EQUAL_THAN  reduce using rule 81 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    SAME_AS         reduce using rule 81 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    COMMA           reduce using rule 81 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    RPAREN          reduce using rule 81 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    NEWLINE         reduce using rule 81 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    COLON           reduce using rule 81 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)


state 151

    (73) moreTerms -> PLUS f_pushOperator term f_popTerm . moreTerms
    (72) moreTerms -> . empty
    (73) moreTerms -> . PLUS f_pushOperator term f_popTerm moreTerms
    (74) moreTerms -> . MINUS f_pushOperator term f_popTerm moreTerms
    (3) empty -> .

    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    GREATER_THAN    reduce using rule 3 (empty -> .)
    LESS_THAN       reduce using rule 3 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 3 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 3 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 3 (empty -> .)
    SAME_AS         reduce using rule 3 (empty -> .)
    NEWLINE         reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    COLON           reduce using rule 3 (empty -> .)

    moreTerms                      shift and go to state 177
    empty                          shift and go to state 100

state 152

    (74) moreTerms -> MINUS f_pushOperator term f_popTerm . moreTerms
    (72) moreTerms -> . empty
    (73) moreTerms -> . PLUS f_pushOperator term f_popTerm moreTerms
    (74) moreTerms -> . MINUS f_pushOperator term f_popTerm moreTerms
    (3) empty -> .

    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    GREATER_THAN    reduce using rule 3 (empty -> .)
    LESS_THAN       reduce using rule 3 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 3 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 3 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 3 (empty -> .)
    SAME_AS         reduce using rule 3 (empty -> .)
    NEWLINE         reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    COLON           reduce using rule 3 (empty -> .)

    moreTerms                      shift and go to state 178
    empty                          shift and go to state 100

state 153

    (59) funct -> CALL ID LPAREN expression expressionList . RPAREN

    RPAREN          shift and go to state 179


state 154

    (61) expressionList -> COMMA . expression expressionList
    (62) expression -> . exp
    (63) expression -> . exp compareToken exp f_popComparation
    (71) exp -> . term moreTerms
    (76) term -> . factor moreFactors
    (81) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (82) factor -> . cvar
    (83) factor -> . funct
    (87) cvar -> . ID f_isID
    (88) cvar -> . C_BOOL f_isConst
    (89) cvar -> . C_INT f_isConst
    (90) cvar -> . C_FLOAT f_isConst
    (91) cvar -> . C_STRING f_isConst
    (58) funct -> . CALL ID LPAREN RPAREN
    (59) funct -> . CALL ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 72
    ID              shift and go to state 74
    C_BOOL          shift and go to state 70
    C_INT           shift and go to state 73
    C_FLOAT         shift and go to state 68
    C_STRING        shift and go to state 75
    CALL            shift and go to state 77

    term                           shift and go to state 76
    funct                          shift and go to state 69
    exp                            shift and go to state 78
    factor                         shift and go to state 71
    cvar                           shift and go to state 67
    expression                     shift and go to state 180

state 155

    (60) expressionList -> empty .

    RPAREN          reduce using rule 60 (expressionList -> empty .)


state 156

    (56) cycle -> DO . block WHILE f_isCondition expression NEWLINE
    (41) block -> . COLON NEWLINE statement moreStatements NEWLINE SEMICOLON NEWLINE
    (42) block -> . COLON NEWLINE statement moreStatements SEMICOLON NEWLINE
    (43) block -> . COLON statement moreStatements NEWLINE SEMICOLON NEWLINE
    (44) block -> . COLON statement moreStatements SEMICOLON NEWLINE

    COLON           shift and go to state 140

    block                          shift and go to state 181

state 157

    (52) statement -> RETURN . expression NEWLINE
    (62) expression -> . exp
    (63) expression -> . exp compareToken exp f_popComparation
    (71) exp -> . term moreTerms
    (76) term -> . factor moreFactors
    (81) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (82) factor -> . cvar
    (83) factor -> . funct
    (87) cvar -> . ID f_isID
    (88) cvar -> . C_BOOL f_isConst
    (89) cvar -> . C_INT f_isConst
    (90) cvar -> . C_FLOAT f_isConst
    (91) cvar -> . C_STRING f_isConst
    (58) funct -> . CALL ID LPAREN RPAREN
    (59) funct -> . CALL ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 72
    ID              shift and go to state 74
    C_BOOL          shift and go to state 70
    C_INT           shift and go to state 73
    C_FLOAT         shift and go to state 68
    C_STRING        shift and go to state 75
    CALL            shift and go to state 77

    term                           shift and go to state 76
    funct                          shift and go to state 69
    exp                            shift and go to state 78
    factor                         shift and go to state 71
    cvar                           shift and go to state 67
    expression                     shift and go to state 182

state 158

    (47) statement -> vars .

    RETURN          reduce using rule 47 (statement -> vars .)
    ID              reduce using rule 47 (statement -> vars .)
    IF              reduce using rule 47 (statement -> vars .)
    WHILE           reduce using rule 47 (statement -> vars .)
    DO              reduce using rule 47 (statement -> vars .)
    CALL            reduce using rule 47 (statement -> vars .)
    BOOL            reduce using rule 47 (statement -> vars .)
    INT             reduce using rule 47 (statement -> vars .)
    FLOAT           reduce using rule 47 (statement -> vars .)
    STRING          reduce using rule 47 (statement -> vars .)
    IMAGE           reduce using rule 47 (statement -> vars .)
    NEWLINE         reduce using rule 47 (statement -> vars .)
    SEMICOLON       reduce using rule 47 (statement -> vars .)


state 159

    (51) statement -> funct . NEWLINE

    NEWLINE         shift and go to state 183


state 160

    (55) cycle -> WHILE . f_isCondition expression block
    (57) f_isCondition -> .

    LPAREN          reduce using rule 57 (f_isCondition -> .)
    ID              reduce using rule 57 (f_isCondition -> .)
    C_BOOL          reduce using rule 57 (f_isCondition -> .)
    C_INT           reduce using rule 57 (f_isCondition -> .)
    C_FLOAT         reduce using rule 57 (f_isCondition -> .)
    C_STRING        reduce using rule 57 (f_isCondition -> .)
    CALL            reduce using rule 57 (f_isCondition -> .)

    f_isCondition                  shift and go to state 184

state 161

    (41) block -> COLON NEWLINE . statement moreStatements NEWLINE SEMICOLON NEWLINE
    (42) block -> COLON NEWLINE . statement moreStatements SEMICOLON NEWLINE
    (47) statement -> . vars
    (48) statement -> . assign
    (49) statement -> . condition
    (50) statement -> . cycle
    (51) statement -> . funct NEWLINE
    (52) statement -> . RETURN expression NEWLINE
    (16) vars -> . tipo idList NEWLINE vars
    (17) vars -> . empty
    (37) assign -> . ID f_checkID EQUAL expression NEWLINE f_generateEqual
    (38) assign -> . empty
    (53) condition -> . IF f_isCondition expression block
    (54) condition -> . IF f_isCondition expression block ELSE block
    (55) cycle -> . WHILE f_isCondition expression block
    (56) cycle -> . DO block WHILE f_isCondition expression NEWLINE
    (58) funct -> . CALL ID LPAREN RPAREN
    (59) funct -> . CALL ID LPAREN expression expressionList RPAREN
    (21) tipo -> . BOOL f_saveType
    (22) tipo -> . INT f_saveType
    (23) tipo -> . FLOAT f_saveType
    (24) tipo -> . STRING f_saveType
    (25) tipo -> . IMAGE f_saveType
    (3) empty -> .

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for IMAGE resolved as shift
    RETURN          shift and go to state 157
    ID              shift and go to state 27
    IF              shift and go to state 166
    WHILE           shift and go to state 160
    DO              shift and go to state 156
    CALL            shift and go to state 77
    BOOL            shift and go to state 16
    INT             shift and go to state 14
    FLOAT           shift and go to state 11
    STRING          shift and go to state 17
    IMAGE           shift and go to state 15
    NEWLINE         reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)

  ! RETURN          [ reduce using rule 3 (empty -> .) ]
  ! ID              [ reduce using rule 3 (empty -> .) ]
  ! IF              [ reduce using rule 3 (empty -> .) ]
  ! WHILE           [ reduce using rule 3 (empty -> .) ]
  ! DO              [ reduce using rule 3 (empty -> .) ]
  ! CALL            [ reduce using rule 3 (empty -> .) ]
  ! BOOL            [ reduce using rule 3 (empty -> .) ]
  ! INT             [ reduce using rule 3 (empty -> .) ]
  ! FLOAT           [ reduce using rule 3 (empty -> .) ]
  ! STRING          [ reduce using rule 3 (empty -> .) ]
  ! IMAGE           [ reduce using rule 3 (empty -> .) ]

    tipo                           shift and go to state 13
    vars                           shift and go to state 158
    funct                          shift and go to state 159
    empty                          shift and go to state 164
    statement                      shift and go to state 185
    assign                         shift and go to state 167
    condition                      shift and go to state 165
    cycle                          shift and go to state 163

state 162

    (43) block -> COLON statement . moreStatements NEWLINE SEMICOLON NEWLINE
    (44) block -> COLON statement . moreStatements SEMICOLON NEWLINE
    (45) moreStatements -> . empty
    (46) moreStatements -> . statement moreStatements
    (3) empty -> .
    (47) statement -> . vars
    (48) statement -> . assign
    (49) statement -> . condition
    (50) statement -> . cycle
    (51) statement -> . funct NEWLINE
    (52) statement -> . RETURN expression NEWLINE
    (16) vars -> . tipo idList NEWLINE vars
    (17) vars -> . empty
    (37) assign -> . ID f_checkID EQUAL expression NEWLINE f_generateEqual
    (38) assign -> . empty
    (53) condition -> . IF f_isCondition expression block
    (54) condition -> . IF f_isCondition expression block ELSE block
    (55) cycle -> . WHILE f_isCondition expression block
    (56) cycle -> . DO block WHILE f_isCondition expression NEWLINE
    (58) funct -> . CALL ID LPAREN RPAREN
    (59) funct -> . CALL ID LPAREN expression expressionList RPAREN
    (21) tipo -> . BOOL f_saveType
    (22) tipo -> . INT f_saveType
    (23) tipo -> . FLOAT f_saveType
    (24) tipo -> . STRING f_saveType
    (25) tipo -> . IMAGE f_saveType

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for IMAGE resolved as shift
    NEWLINE         reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)
    RETURN          shift and go to state 157
    ID              shift and go to state 27
    IF              shift and go to state 166
    WHILE           shift and go to state 160
    DO              shift and go to state 156
    CALL            shift and go to state 77
    BOOL            shift and go to state 16
    INT             shift and go to state 14
    FLOAT           shift and go to state 11
    STRING          shift and go to state 17
    IMAGE           shift and go to state 15

  ! RETURN          [ reduce using rule 3 (empty -> .) ]
  ! ID              [ reduce using rule 3 (empty -> .) ]
  ! IF              [ reduce using rule 3 (empty -> .) ]
  ! WHILE           [ reduce using rule 3 (empty -> .) ]
  ! DO              [ reduce using rule 3 (empty -> .) ]
  ! CALL            [ reduce using rule 3 (empty -> .) ]
  ! BOOL            [ reduce using rule 3 (empty -> .) ]
  ! INT             [ reduce using rule 3 (empty -> .) ]
  ! FLOAT           [ reduce using rule 3 (empty -> .) ]
  ! STRING          [ reduce using rule 3 (empty -> .) ]
  ! IMAGE           [ reduce using rule 3 (empty -> .) ]

    tipo                           shift and go to state 13
    vars                           shift and go to state 158
    funct                          shift and go to state 159
    empty                          shift and go to state 187
    statement                      shift and go to state 186
    cycle                          shift and go to state 163
    assign                         shift and go to state 167
    condition                      shift and go to state 165
    moreStatements                 shift and go to state 188

state 163

    (50) statement -> cycle .

    RETURN          reduce using rule 50 (statement -> cycle .)
    ID              reduce using rule 50 (statement -> cycle .)
    IF              reduce using rule 50 (statement -> cycle .)
    WHILE           reduce using rule 50 (statement -> cycle .)
    DO              reduce using rule 50 (statement -> cycle .)
    CALL            reduce using rule 50 (statement -> cycle .)
    BOOL            reduce using rule 50 (statement -> cycle .)
    INT             reduce using rule 50 (statement -> cycle .)
    FLOAT           reduce using rule 50 (statement -> cycle .)
    STRING          reduce using rule 50 (statement -> cycle .)
    IMAGE           reduce using rule 50 (statement -> cycle .)
    NEWLINE         reduce using rule 50 (statement -> cycle .)
    SEMICOLON       reduce using rule 50 (statement -> cycle .)


state 164

    (17) vars -> empty .
    (38) assign -> empty .

  ! reduce/reduce conflict for RETURN resolved using rule 17 (vars -> empty .)
  ! reduce/reduce conflict for ID resolved using rule 17 (vars -> empty .)
  ! reduce/reduce conflict for IF resolved using rule 17 (vars -> empty .)
  ! reduce/reduce conflict for WHILE resolved using rule 17 (vars -> empty .)
  ! reduce/reduce conflict for DO resolved using rule 17 (vars -> empty .)
  ! reduce/reduce conflict for CALL resolved using rule 17 (vars -> empty .)
  ! reduce/reduce conflict for BOOL resolved using rule 17 (vars -> empty .)
  ! reduce/reduce conflict for INT resolved using rule 17 (vars -> empty .)
  ! reduce/reduce conflict for FLOAT resolved using rule 17 (vars -> empty .)
  ! reduce/reduce conflict for STRING resolved using rule 17 (vars -> empty .)
  ! reduce/reduce conflict for IMAGE resolved using rule 17 (vars -> empty .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 17 (vars -> empty .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 17 (vars -> empty .)
    RETURN          reduce using rule 17 (vars -> empty .)
    ID              reduce using rule 17 (vars -> empty .)
    IF              reduce using rule 17 (vars -> empty .)
    WHILE           reduce using rule 17 (vars -> empty .)
    DO              reduce using rule 17 (vars -> empty .)
    CALL            reduce using rule 17 (vars -> empty .)
    BOOL            reduce using rule 17 (vars -> empty .)
    INT             reduce using rule 17 (vars -> empty .)
    FLOAT           reduce using rule 17 (vars -> empty .)
    STRING          reduce using rule 17 (vars -> empty .)
    IMAGE           reduce using rule 17 (vars -> empty .)
    NEWLINE         reduce using rule 17 (vars -> empty .)
    SEMICOLON       reduce using rule 17 (vars -> empty .)

  ! RETURN          [ reduce using rule 38 (assign -> empty .) ]
  ! ID              [ reduce using rule 38 (assign -> empty .) ]
  ! IF              [ reduce using rule 38 (assign -> empty .) ]
  ! WHILE           [ reduce using rule 38 (assign -> empty .) ]
  ! DO              [ reduce using rule 38 (assign -> empty .) ]
  ! CALL            [ reduce using rule 38 (assign -> empty .) ]
  ! BOOL            [ reduce using rule 38 (assign -> empty .) ]
  ! INT             [ reduce using rule 38 (assign -> empty .) ]
  ! FLOAT           [ reduce using rule 38 (assign -> empty .) ]
  ! STRING          [ reduce using rule 38 (assign -> empty .) ]
  ! IMAGE           [ reduce using rule 38 (assign -> empty .) ]
  ! NEWLINE         [ reduce using rule 38 (assign -> empty .) ]
  ! SEMICOLON       [ reduce using rule 38 (assign -> empty .) ]


state 165

    (49) statement -> condition .

    RETURN          reduce using rule 49 (statement -> condition .)
    ID              reduce using rule 49 (statement -> condition .)
    IF              reduce using rule 49 (statement -> condition .)
    WHILE           reduce using rule 49 (statement -> condition .)
    DO              reduce using rule 49 (statement -> condition .)
    CALL            reduce using rule 49 (statement -> condition .)
    BOOL            reduce using rule 49 (statement -> condition .)
    INT             reduce using rule 49 (statement -> condition .)
    FLOAT           reduce using rule 49 (statement -> condition .)
    STRING          reduce using rule 49 (statement -> condition .)
    IMAGE           reduce using rule 49 (statement -> condition .)
    NEWLINE         reduce using rule 49 (statement -> condition .)
    SEMICOLON       reduce using rule 49 (statement -> condition .)


state 166

    (53) condition -> IF . f_isCondition expression block
    (54) condition -> IF . f_isCondition expression block ELSE block
    (57) f_isCondition -> .

    LPAREN          reduce using rule 57 (f_isCondition -> .)
    ID              reduce using rule 57 (f_isCondition -> .)
    C_BOOL          reduce using rule 57 (f_isCondition -> .)
    C_INT           reduce using rule 57 (f_isCondition -> .)
    C_FLOAT         reduce using rule 57 (f_isCondition -> .)
    C_STRING        reduce using rule 57 (f_isCondition -> .)
    CALL            reduce using rule 57 (f_isCondition -> .)

    f_isCondition                  shift and go to state 189

state 167

    (48) statement -> assign .

    RETURN          reduce using rule 48 (statement -> assign .)
    ID              reduce using rule 48 (statement -> assign .)
    IF              reduce using rule 48 (statement -> assign .)
    WHILE           reduce using rule 48 (statement -> assign .)
    DO              reduce using rule 48 (statement -> assign .)
    CALL            reduce using rule 48 (statement -> assign .)
    BOOL            reduce using rule 48 (statement -> assign .)
    INT             reduce using rule 48 (statement -> assign .)
    FLOAT           reduce using rule 48 (statement -> assign .)
    STRING          reduce using rule 48 (statement -> assign .)
    IMAGE           reduce using rule 48 (statement -> assign .)
    NEWLINE         reduce using rule 48 (statement -> assign .)
    SEMICOLON       reduce using rule 48 (statement -> assign .)


state 168

    (26) functions -> DEF tipo ID f_saveModule LPAREN RPAREN block functions .

    $end            reduce using rule 26 (functions -> DEF tipo ID f_saveModule LPAREN RPAREN block functions .)


state 169

    (27) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam . parameterList RPAREN block functions
    (34) parameterList -> . empty
    (35) parameterList -> . COMMA tipo ID f_addToParam parameterList
    (3) empty -> .

    COMMA           shift and go to state 192
    RPAREN          reduce using rule 3 (empty -> .)

    parameterList                  shift and go to state 190
    empty                          shift and go to state 191

state 170

    (30) functions -> DEF VOID MAIN f_saveModule LPAREN RPAREN block functions .

    $end            reduce using rule 30 (functions -> DEF VOID MAIN f_saveModule LPAREN RPAREN block functions .)


state 171

    (31) functions -> DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam . parameterList RPAREN block functions
    (34) parameterList -> . empty
    (35) parameterList -> . COMMA tipo ID f_addToParam parameterList
    (3) empty -> .

    COMMA           shift and go to state 192
    RPAREN          reduce using rule 3 (empty -> .)

    parameterList                  shift and go to state 193
    empty                          shift and go to state 191

state 172

    (28) functions -> DEF VOID ID f_saveModule LPAREN RPAREN block functions .

    $end            reduce using rule 28 (functions -> DEF VOID ID f_saveModule LPAREN RPAREN block functions .)


state 173

    (29) functions -> DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam . parameterList RPAREN block functions
    (34) parameterList -> . empty
    (35) parameterList -> . COMMA tipo ID f_addToParam parameterList
    (3) empty -> .

    COMMA           shift and go to state 192
    RPAREN          reduce using rule 3 (empty -> .)

    parameterList                  shift and go to state 194
    empty                          shift and go to state 191

state 174

    (78) moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .

    PLUS            reduce using rule 78 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    MINUS           reduce using rule 78 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    GREATER_THAN    reduce using rule 78 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    LESS_THAN       reduce using rule 78 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    LESS_EQUAL_THAN reduce using rule 78 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    GREATER_EQUAL_THAN reduce using rule 78 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    NOT_EQUAL_THAN  reduce using rule 78 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    SAME_AS         reduce using rule 78 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    NEWLINE         reduce using rule 78 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    RPAREN          reduce using rule 78 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    COMMA           reduce using rule 78 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    COLON           reduce using rule 78 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)


state 175

    (79) moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .

    PLUS            reduce using rule 79 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    MINUS           reduce using rule 79 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    GREATER_THAN    reduce using rule 79 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    LESS_THAN       reduce using rule 79 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    LESS_EQUAL_THAN reduce using rule 79 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    GREATER_EQUAL_THAN reduce using rule 79 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    NOT_EQUAL_THAN  reduce using rule 79 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    SAME_AS         reduce using rule 79 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    NEWLINE         reduce using rule 79 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    RPAREN          reduce using rule 79 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    COMMA           reduce using rule 79 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    COLON           reduce using rule 79 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)


state 176

    (80) moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .

    PLUS            reduce using rule 80 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    MINUS           reduce using rule 80 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    GREATER_THAN    reduce using rule 80 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    LESS_THAN       reduce using rule 80 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    LESS_EQUAL_THAN reduce using rule 80 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    GREATER_EQUAL_THAN reduce using rule 80 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    NOT_EQUAL_THAN  reduce using rule 80 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    SAME_AS         reduce using rule 80 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    NEWLINE         reduce using rule 80 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    RPAREN          reduce using rule 80 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    COMMA           reduce using rule 80 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    COLON           reduce using rule 80 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)


state 177

    (73) moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .

    GREATER_THAN    reduce using rule 73 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    LESS_THAN       reduce using rule 73 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    LESS_EQUAL_THAN reduce using rule 73 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    GREATER_EQUAL_THAN reduce using rule 73 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    NOT_EQUAL_THAN  reduce using rule 73 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    SAME_AS         reduce using rule 73 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    NEWLINE         reduce using rule 73 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    RPAREN          reduce using rule 73 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    COMMA           reduce using rule 73 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    COLON           reduce using rule 73 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)


state 178

    (74) moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .

    GREATER_THAN    reduce using rule 74 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    LESS_THAN       reduce using rule 74 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    LESS_EQUAL_THAN reduce using rule 74 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    GREATER_EQUAL_THAN reduce using rule 74 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    NOT_EQUAL_THAN  reduce using rule 74 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    SAME_AS         reduce using rule 74 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    NEWLINE         reduce using rule 74 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    RPAREN          reduce using rule 74 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    COMMA           reduce using rule 74 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    COLON           reduce using rule 74 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)


state 179

    (59) funct -> CALL ID LPAREN expression expressionList RPAREN .

    DIVIDE          reduce using rule 59 (funct -> CALL ID LPAREN expression expressionList RPAREN .)
    TIMES           reduce using rule 59 (funct -> CALL ID LPAREN expression expressionList RPAREN .)
    MOD             reduce using rule 59 (funct -> CALL ID LPAREN expression expressionList RPAREN .)
    PLUS            reduce using rule 59 (funct -> CALL ID LPAREN expression expressionList RPAREN .)
    MINUS           reduce using rule 59 (funct -> CALL ID LPAREN expression expressionList RPAREN .)
    GREATER_THAN    reduce using rule 59 (funct -> CALL ID LPAREN expression expressionList RPAREN .)
    LESS_THAN       reduce using rule 59 (funct -> CALL ID LPAREN expression expressionList RPAREN .)
    LESS_EQUAL_THAN reduce using rule 59 (funct -> CALL ID LPAREN expression expressionList RPAREN .)
    GREATER_EQUAL_THAN reduce using rule 59 (funct -> CALL ID LPAREN expression expressionList RPAREN .)
    NOT_EQUAL_THAN  reduce using rule 59 (funct -> CALL ID LPAREN expression expressionList RPAREN .)
    SAME_AS         reduce using rule 59 (funct -> CALL ID LPAREN expression expressionList RPAREN .)
    NEWLINE         reduce using rule 59 (funct -> CALL ID LPAREN expression expressionList RPAREN .)
    RPAREN          reduce using rule 59 (funct -> CALL ID LPAREN expression expressionList RPAREN .)
    COMMA           reduce using rule 59 (funct -> CALL ID LPAREN expression expressionList RPAREN .)
    COLON           reduce using rule 59 (funct -> CALL ID LPAREN expression expressionList RPAREN .)


state 180

    (61) expressionList -> COMMA expression . expressionList
    (60) expressionList -> . empty
    (61) expressionList -> . COMMA expression expressionList
    (3) empty -> .

    COMMA           shift and go to state 154
    RPAREN          reduce using rule 3 (empty -> .)

    expressionList                 shift and go to state 195
    empty                          shift and go to state 155

state 181

    (56) cycle -> DO block . WHILE f_isCondition expression NEWLINE

    WHILE           shift and go to state 196


state 182

    (52) statement -> RETURN expression . NEWLINE

    NEWLINE         shift and go to state 197


state 183

    (51) statement -> funct NEWLINE .

    RETURN          reduce using rule 51 (statement -> funct NEWLINE .)
    ID              reduce using rule 51 (statement -> funct NEWLINE .)
    IF              reduce using rule 51 (statement -> funct NEWLINE .)
    WHILE           reduce using rule 51 (statement -> funct NEWLINE .)
    DO              reduce using rule 51 (statement -> funct NEWLINE .)
    CALL            reduce using rule 51 (statement -> funct NEWLINE .)
    BOOL            reduce using rule 51 (statement -> funct NEWLINE .)
    INT             reduce using rule 51 (statement -> funct NEWLINE .)
    FLOAT           reduce using rule 51 (statement -> funct NEWLINE .)
    STRING          reduce using rule 51 (statement -> funct NEWLINE .)
    IMAGE           reduce using rule 51 (statement -> funct NEWLINE .)
    NEWLINE         reduce using rule 51 (statement -> funct NEWLINE .)
    SEMICOLON       reduce using rule 51 (statement -> funct NEWLINE .)


state 184

    (55) cycle -> WHILE f_isCondition . expression block
    (62) expression -> . exp
    (63) expression -> . exp compareToken exp f_popComparation
    (71) exp -> . term moreTerms
    (76) term -> . factor moreFactors
    (81) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (82) factor -> . cvar
    (83) factor -> . funct
    (87) cvar -> . ID f_isID
    (88) cvar -> . C_BOOL f_isConst
    (89) cvar -> . C_INT f_isConst
    (90) cvar -> . C_FLOAT f_isConst
    (91) cvar -> . C_STRING f_isConst
    (58) funct -> . CALL ID LPAREN RPAREN
    (59) funct -> . CALL ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 72
    ID              shift and go to state 74
    C_BOOL          shift and go to state 70
    C_INT           shift and go to state 73
    C_FLOAT         shift and go to state 68
    C_STRING        shift and go to state 75
    CALL            shift and go to state 77

    term                           shift and go to state 76
    funct                          shift and go to state 69
    exp                            shift and go to state 78
    factor                         shift and go to state 71
    cvar                           shift and go to state 67
    expression                     shift and go to state 198

state 185

    (41) block -> COLON NEWLINE statement . moreStatements NEWLINE SEMICOLON NEWLINE
    (42) block -> COLON NEWLINE statement . moreStatements SEMICOLON NEWLINE
    (45) moreStatements -> . empty
    (46) moreStatements -> . statement moreStatements
    (3) empty -> .
    (47) statement -> . vars
    (48) statement -> . assign
    (49) statement -> . condition
    (50) statement -> . cycle
    (51) statement -> . funct NEWLINE
    (52) statement -> . RETURN expression NEWLINE
    (16) vars -> . tipo idList NEWLINE vars
    (17) vars -> . empty
    (37) assign -> . ID f_checkID EQUAL expression NEWLINE f_generateEqual
    (38) assign -> . empty
    (53) condition -> . IF f_isCondition expression block
    (54) condition -> . IF f_isCondition expression block ELSE block
    (55) cycle -> . WHILE f_isCondition expression block
    (56) cycle -> . DO block WHILE f_isCondition expression NEWLINE
    (58) funct -> . CALL ID LPAREN RPAREN
    (59) funct -> . CALL ID LPAREN expression expressionList RPAREN
    (21) tipo -> . BOOL f_saveType
    (22) tipo -> . INT f_saveType
    (23) tipo -> . FLOAT f_saveType
    (24) tipo -> . STRING f_saveType
    (25) tipo -> . IMAGE f_saveType

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for IMAGE resolved as shift
    NEWLINE         reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)
    RETURN          shift and go to state 157
    ID              shift and go to state 27
    IF              shift and go to state 166
    WHILE           shift and go to state 160
    DO              shift and go to state 156
    CALL            shift and go to state 77
    BOOL            shift and go to state 16
    INT             shift and go to state 14
    FLOAT           shift and go to state 11
    STRING          shift and go to state 17
    IMAGE           shift and go to state 15

  ! RETURN          [ reduce using rule 3 (empty -> .) ]
  ! ID              [ reduce using rule 3 (empty -> .) ]
  ! IF              [ reduce using rule 3 (empty -> .) ]
  ! WHILE           [ reduce using rule 3 (empty -> .) ]
  ! DO              [ reduce using rule 3 (empty -> .) ]
  ! CALL            [ reduce using rule 3 (empty -> .) ]
  ! BOOL            [ reduce using rule 3 (empty -> .) ]
  ! INT             [ reduce using rule 3 (empty -> .) ]
  ! FLOAT           [ reduce using rule 3 (empty -> .) ]
  ! STRING          [ reduce using rule 3 (empty -> .) ]
  ! IMAGE           [ reduce using rule 3 (empty -> .) ]

    tipo                           shift and go to state 13
    vars                           shift and go to state 158
    funct                          shift and go to state 159
    empty                          shift and go to state 187
    statement                      shift and go to state 186
    cycle                          shift and go to state 163
    assign                         shift and go to state 167
    condition                      shift and go to state 165
    moreStatements                 shift and go to state 199

state 186

    (46) moreStatements -> statement . moreStatements
    (45) moreStatements -> . empty
    (46) moreStatements -> . statement moreStatements
    (3) empty -> .
    (47) statement -> . vars
    (48) statement -> . assign
    (49) statement -> . condition
    (50) statement -> . cycle
    (51) statement -> . funct NEWLINE
    (52) statement -> . RETURN expression NEWLINE
    (16) vars -> . tipo idList NEWLINE vars
    (17) vars -> . empty
    (37) assign -> . ID f_checkID EQUAL expression NEWLINE f_generateEqual
    (38) assign -> . empty
    (53) condition -> . IF f_isCondition expression block
    (54) condition -> . IF f_isCondition expression block ELSE block
    (55) cycle -> . WHILE f_isCondition expression block
    (56) cycle -> . DO block WHILE f_isCondition expression NEWLINE
    (58) funct -> . CALL ID LPAREN RPAREN
    (59) funct -> . CALL ID LPAREN expression expressionList RPAREN
    (21) tipo -> . BOOL f_saveType
    (22) tipo -> . INT f_saveType
    (23) tipo -> . FLOAT f_saveType
    (24) tipo -> . STRING f_saveType
    (25) tipo -> . IMAGE f_saveType

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for IMAGE resolved as shift
    NEWLINE         reduce using rule 3 (empty -> .)
    SEMICOLON       reduce using rule 3 (empty -> .)
    RETURN          shift and go to state 157
    ID              shift and go to state 27
    IF              shift and go to state 166
    WHILE           shift and go to state 160
    DO              shift and go to state 156
    CALL            shift and go to state 77
    BOOL            shift and go to state 16
    INT             shift and go to state 14
    FLOAT           shift and go to state 11
    STRING          shift and go to state 17
    IMAGE           shift and go to state 15

  ! RETURN          [ reduce using rule 3 (empty -> .) ]
  ! ID              [ reduce using rule 3 (empty -> .) ]
  ! IF              [ reduce using rule 3 (empty -> .) ]
  ! WHILE           [ reduce using rule 3 (empty -> .) ]
  ! DO              [ reduce using rule 3 (empty -> .) ]
  ! CALL            [ reduce using rule 3 (empty -> .) ]
  ! BOOL            [ reduce using rule 3 (empty -> .) ]
  ! INT             [ reduce using rule 3 (empty -> .) ]
  ! FLOAT           [ reduce using rule 3 (empty -> .) ]
  ! STRING          [ reduce using rule 3 (empty -> .) ]
  ! IMAGE           [ reduce using rule 3 (empty -> .) ]

    tipo                           shift and go to state 13
    vars                           shift and go to state 158
    funct                          shift and go to state 159
    empty                          shift and go to state 187
    statement                      shift and go to state 186
    cycle                          shift and go to state 163
    assign                         shift and go to state 167
    condition                      shift and go to state 165
    moreStatements                 shift and go to state 200

state 187

    (45) moreStatements -> empty .
    (17) vars -> empty .
    (38) assign -> empty .

  ! reduce/reduce conflict for NEWLINE resolved using rule 17 (vars -> empty .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 17 (vars -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 17 (vars -> empty .)
  ! reduce/reduce conflict for ID resolved using rule 17 (vars -> empty .)
  ! reduce/reduce conflict for IF resolved using rule 17 (vars -> empty .)
  ! reduce/reduce conflict for WHILE resolved using rule 17 (vars -> empty .)
  ! reduce/reduce conflict for DO resolved using rule 17 (vars -> empty .)
  ! reduce/reduce conflict for CALL resolved using rule 17 (vars -> empty .)
  ! reduce/reduce conflict for BOOL resolved using rule 17 (vars -> empty .)
  ! reduce/reduce conflict for INT resolved using rule 17 (vars -> empty .)
  ! reduce/reduce conflict for FLOAT resolved using rule 17 (vars -> empty .)
  ! reduce/reduce conflict for STRING resolved using rule 17 (vars -> empty .)
  ! reduce/reduce conflict for IMAGE resolved using rule 17 (vars -> empty .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 17 (vars -> empty .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 17 (vars -> empty .)
    RETURN          reduce using rule 17 (vars -> empty .)
    ID              reduce using rule 17 (vars -> empty .)
    IF              reduce using rule 17 (vars -> empty .)
    WHILE           reduce using rule 17 (vars -> empty .)
    DO              reduce using rule 17 (vars -> empty .)
    CALL            reduce using rule 17 (vars -> empty .)
    BOOL            reduce using rule 17 (vars -> empty .)
    INT             reduce using rule 17 (vars -> empty .)
    FLOAT           reduce using rule 17 (vars -> empty .)
    STRING          reduce using rule 17 (vars -> empty .)
    IMAGE           reduce using rule 17 (vars -> empty .)
    NEWLINE         reduce using rule 17 (vars -> empty .)
    SEMICOLON       reduce using rule 17 (vars -> empty .)

  ! NEWLINE         [ reduce using rule 45 (moreStatements -> empty .) ]
  ! SEMICOLON       [ reduce using rule 45 (moreStatements -> empty .) ]
  ! RETURN          [ reduce using rule 38 (assign -> empty .) ]
  ! ID              [ reduce using rule 38 (assign -> empty .) ]
  ! IF              [ reduce using rule 38 (assign -> empty .) ]
  ! WHILE           [ reduce using rule 38 (assign -> empty .) ]
  ! DO              [ reduce using rule 38 (assign -> empty .) ]
  ! CALL            [ reduce using rule 38 (assign -> empty .) ]
  ! BOOL            [ reduce using rule 38 (assign -> empty .) ]
  ! INT             [ reduce using rule 38 (assign -> empty .) ]
  ! FLOAT           [ reduce using rule 38 (assign -> empty .) ]
  ! STRING          [ reduce using rule 38 (assign -> empty .) ]
  ! IMAGE           [ reduce using rule 38 (assign -> empty .) ]
  ! NEWLINE         [ reduce using rule 38 (assign -> empty .) ]
  ! SEMICOLON       [ reduce using rule 38 (assign -> empty .) ]


state 188

    (43) block -> COLON statement moreStatements . NEWLINE SEMICOLON NEWLINE
    (44) block -> COLON statement moreStatements . SEMICOLON NEWLINE

    NEWLINE         shift and go to state 201
    SEMICOLON       shift and go to state 202


state 189

    (53) condition -> IF f_isCondition . expression block
    (54) condition -> IF f_isCondition . expression block ELSE block
    (62) expression -> . exp
    (63) expression -> . exp compareToken exp f_popComparation
    (71) exp -> . term moreTerms
    (76) term -> . factor moreFactors
    (81) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (82) factor -> . cvar
    (83) factor -> . funct
    (87) cvar -> . ID f_isID
    (88) cvar -> . C_BOOL f_isConst
    (89) cvar -> . C_INT f_isConst
    (90) cvar -> . C_FLOAT f_isConst
    (91) cvar -> . C_STRING f_isConst
    (58) funct -> . CALL ID LPAREN RPAREN
    (59) funct -> . CALL ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 72
    ID              shift and go to state 74
    C_BOOL          shift and go to state 70
    C_INT           shift and go to state 73
    C_FLOAT         shift and go to state 68
    C_STRING        shift and go to state 75
    CALL            shift and go to state 77

    term                           shift and go to state 76
    funct                          shift and go to state 69
    exp                            shift and go to state 78
    factor                         shift and go to state 71
    cvar                           shift and go to state 67
    expression                     shift and go to state 203

state 190

    (27) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList . RPAREN block functions

    RPAREN          shift and go to state 204


state 191

    (34) parameterList -> empty .

    RPAREN          reduce using rule 34 (parameterList -> empty .)


state 192

    (35) parameterList -> COMMA . tipo ID f_addToParam parameterList
    (21) tipo -> . BOOL f_saveType
    (22) tipo -> . INT f_saveType
    (23) tipo -> . FLOAT f_saveType
    (24) tipo -> . STRING f_saveType
    (25) tipo -> . IMAGE f_saveType

    BOOL            shift and go to state 16
    INT             shift and go to state 14
    FLOAT           shift and go to state 11
    STRING          shift and go to state 17
    IMAGE           shift and go to state 15

    tipo                           shift and go to state 205

state 193

    (31) functions -> DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList . RPAREN block functions

    RPAREN          shift and go to state 206


state 194

    (29) functions -> DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList . RPAREN block functions

    RPAREN          shift and go to state 207


state 195

    (61) expressionList -> COMMA expression expressionList .

    RPAREN          reduce using rule 61 (expressionList -> COMMA expression expressionList .)


state 196

    (56) cycle -> DO block WHILE . f_isCondition expression NEWLINE
    (57) f_isCondition -> .

    LPAREN          reduce using rule 57 (f_isCondition -> .)
    ID              reduce using rule 57 (f_isCondition -> .)
    C_BOOL          reduce using rule 57 (f_isCondition -> .)
    C_INT           reduce using rule 57 (f_isCondition -> .)
    C_FLOAT         reduce using rule 57 (f_isCondition -> .)
    C_STRING        reduce using rule 57 (f_isCondition -> .)
    CALL            reduce using rule 57 (f_isCondition -> .)

    f_isCondition                  shift and go to state 208

state 197

    (52) statement -> RETURN expression NEWLINE .

    RETURN          reduce using rule 52 (statement -> RETURN expression NEWLINE .)
    ID              reduce using rule 52 (statement -> RETURN expression NEWLINE .)
    IF              reduce using rule 52 (statement -> RETURN expression NEWLINE .)
    WHILE           reduce using rule 52 (statement -> RETURN expression NEWLINE .)
    DO              reduce using rule 52 (statement -> RETURN expression NEWLINE .)
    CALL            reduce using rule 52 (statement -> RETURN expression NEWLINE .)
    BOOL            reduce using rule 52 (statement -> RETURN expression NEWLINE .)
    INT             reduce using rule 52 (statement -> RETURN expression NEWLINE .)
    FLOAT           reduce using rule 52 (statement -> RETURN expression NEWLINE .)
    STRING          reduce using rule 52 (statement -> RETURN expression NEWLINE .)
    IMAGE           reduce using rule 52 (statement -> RETURN expression NEWLINE .)
    NEWLINE         reduce using rule 52 (statement -> RETURN expression NEWLINE .)
    SEMICOLON       reduce using rule 52 (statement -> RETURN expression NEWLINE .)


state 198

    (55) cycle -> WHILE f_isCondition expression . block
    (41) block -> . COLON NEWLINE statement moreStatements NEWLINE SEMICOLON NEWLINE
    (42) block -> . COLON NEWLINE statement moreStatements SEMICOLON NEWLINE
    (43) block -> . COLON statement moreStatements NEWLINE SEMICOLON NEWLINE
    (44) block -> . COLON statement moreStatements SEMICOLON NEWLINE

    COLON           shift and go to state 140

    block                          shift and go to state 209

state 199

    (41) block -> COLON NEWLINE statement moreStatements . NEWLINE SEMICOLON NEWLINE
    (42) block -> COLON NEWLINE statement moreStatements . SEMICOLON NEWLINE

    NEWLINE         shift and go to state 210
    SEMICOLON       shift and go to state 211


state 200

    (46) moreStatements -> statement moreStatements .

    NEWLINE         reduce using rule 46 (moreStatements -> statement moreStatements .)
    SEMICOLON       reduce using rule 46 (moreStatements -> statement moreStatements .)


state 201

    (43) block -> COLON statement moreStatements NEWLINE . SEMICOLON NEWLINE

    SEMICOLON       shift and go to state 212


state 202

    (44) block -> COLON statement moreStatements SEMICOLON . NEWLINE

    NEWLINE         shift and go to state 213


state 203

    (53) condition -> IF f_isCondition expression . block
    (54) condition -> IF f_isCondition expression . block ELSE block
    (41) block -> . COLON NEWLINE statement moreStatements NEWLINE SEMICOLON NEWLINE
    (42) block -> . COLON NEWLINE statement moreStatements SEMICOLON NEWLINE
    (43) block -> . COLON statement moreStatements NEWLINE SEMICOLON NEWLINE
    (44) block -> . COLON statement moreStatements SEMICOLON NEWLINE

    COLON           shift and go to state 140

    block                          shift and go to state 214

state 204

    (27) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN . block functions
    (41) block -> . COLON NEWLINE statement moreStatements NEWLINE SEMICOLON NEWLINE
    (42) block -> . COLON NEWLINE statement moreStatements SEMICOLON NEWLINE
    (43) block -> . COLON statement moreStatements NEWLINE SEMICOLON NEWLINE
    (44) block -> . COLON statement moreStatements SEMICOLON NEWLINE

    COLON           shift and go to state 140

    block                          shift and go to state 215

state 205

    (35) parameterList -> COMMA tipo . ID f_addToParam parameterList

    ID              shift and go to state 216


state 206

    (31) functions -> DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN . block functions
    (41) block -> . COLON NEWLINE statement moreStatements NEWLINE SEMICOLON NEWLINE
    (42) block -> . COLON NEWLINE statement moreStatements SEMICOLON NEWLINE
    (43) block -> . COLON statement moreStatements NEWLINE SEMICOLON NEWLINE
    (44) block -> . COLON statement moreStatements SEMICOLON NEWLINE

    COLON           shift and go to state 140

    block                          shift and go to state 217

state 207

    (29) functions -> DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN . block functions
    (41) block -> . COLON NEWLINE statement moreStatements NEWLINE SEMICOLON NEWLINE
    (42) block -> . COLON NEWLINE statement moreStatements SEMICOLON NEWLINE
    (43) block -> . COLON statement moreStatements NEWLINE SEMICOLON NEWLINE
    (44) block -> . COLON statement moreStatements SEMICOLON NEWLINE

    COLON           shift and go to state 140

    block                          shift and go to state 218

state 208

    (56) cycle -> DO block WHILE f_isCondition . expression NEWLINE
    (62) expression -> . exp
    (63) expression -> . exp compareToken exp f_popComparation
    (71) exp -> . term moreTerms
    (76) term -> . factor moreFactors
    (81) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (82) factor -> . cvar
    (83) factor -> . funct
    (87) cvar -> . ID f_isID
    (88) cvar -> . C_BOOL f_isConst
    (89) cvar -> . C_INT f_isConst
    (90) cvar -> . C_FLOAT f_isConst
    (91) cvar -> . C_STRING f_isConst
    (58) funct -> . CALL ID LPAREN RPAREN
    (59) funct -> . CALL ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 72
    ID              shift and go to state 74
    C_BOOL          shift and go to state 70
    C_INT           shift and go to state 73
    C_FLOAT         shift and go to state 68
    C_STRING        shift and go to state 75
    CALL            shift and go to state 77

    term                           shift and go to state 76
    funct                          shift and go to state 69
    exp                            shift and go to state 78
    factor                         shift and go to state 71
    cvar                           shift and go to state 67
    expression                     shift and go to state 219

state 209

    (55) cycle -> WHILE f_isCondition expression block .

    RETURN          reduce using rule 55 (cycle -> WHILE f_isCondition expression block .)
    ID              reduce using rule 55 (cycle -> WHILE f_isCondition expression block .)
    IF              reduce using rule 55 (cycle -> WHILE f_isCondition expression block .)
    WHILE           reduce using rule 55 (cycle -> WHILE f_isCondition expression block .)
    DO              reduce using rule 55 (cycle -> WHILE f_isCondition expression block .)
    CALL            reduce using rule 55 (cycle -> WHILE f_isCondition expression block .)
    BOOL            reduce using rule 55 (cycle -> WHILE f_isCondition expression block .)
    INT             reduce using rule 55 (cycle -> WHILE f_isCondition expression block .)
    FLOAT           reduce using rule 55 (cycle -> WHILE f_isCondition expression block .)
    STRING          reduce using rule 55 (cycle -> WHILE f_isCondition expression block .)
    IMAGE           reduce using rule 55 (cycle -> WHILE f_isCondition expression block .)
    NEWLINE         reduce using rule 55 (cycle -> WHILE f_isCondition expression block .)
    SEMICOLON       reduce using rule 55 (cycle -> WHILE f_isCondition expression block .)


state 210

    (41) block -> COLON NEWLINE statement moreStatements NEWLINE . SEMICOLON NEWLINE

    SEMICOLON       shift and go to state 220


state 211

    (42) block -> COLON NEWLINE statement moreStatements SEMICOLON . NEWLINE

    NEWLINE         shift and go to state 221


state 212

    (43) block -> COLON statement moreStatements NEWLINE SEMICOLON . NEWLINE

    NEWLINE         shift and go to state 222


state 213

    (44) block -> COLON statement moreStatements SEMICOLON NEWLINE .

    DEF             reduce using rule 44 (block -> COLON statement moreStatements SEMICOLON NEWLINE .)
    $end            reduce using rule 44 (block -> COLON statement moreStatements SEMICOLON NEWLINE .)
    WHILE           reduce using rule 44 (block -> COLON statement moreStatements SEMICOLON NEWLINE .)
    RETURN          reduce using rule 44 (block -> COLON statement moreStatements SEMICOLON NEWLINE .)
    ID              reduce using rule 44 (block -> COLON statement moreStatements SEMICOLON NEWLINE .)
    IF              reduce using rule 44 (block -> COLON statement moreStatements SEMICOLON NEWLINE .)
    DO              reduce using rule 44 (block -> COLON statement moreStatements SEMICOLON NEWLINE .)
    CALL            reduce using rule 44 (block -> COLON statement moreStatements SEMICOLON NEWLINE .)
    BOOL            reduce using rule 44 (block -> COLON statement moreStatements SEMICOLON NEWLINE .)
    INT             reduce using rule 44 (block -> COLON statement moreStatements SEMICOLON NEWLINE .)
    FLOAT           reduce using rule 44 (block -> COLON statement moreStatements SEMICOLON NEWLINE .)
    STRING          reduce using rule 44 (block -> COLON statement moreStatements SEMICOLON NEWLINE .)
    IMAGE           reduce using rule 44 (block -> COLON statement moreStatements SEMICOLON NEWLINE .)
    NEWLINE         reduce using rule 44 (block -> COLON statement moreStatements SEMICOLON NEWLINE .)
    SEMICOLON       reduce using rule 44 (block -> COLON statement moreStatements SEMICOLON NEWLINE .)
    ELSE            reduce using rule 44 (block -> COLON statement moreStatements SEMICOLON NEWLINE .)


state 214

    (53) condition -> IF f_isCondition expression block .
    (54) condition -> IF f_isCondition expression block . ELSE block

    RETURN          reduce using rule 53 (condition -> IF f_isCondition expression block .)
    ID              reduce using rule 53 (condition -> IF f_isCondition expression block .)
    IF              reduce using rule 53 (condition -> IF f_isCondition expression block .)
    WHILE           reduce using rule 53 (condition -> IF f_isCondition expression block .)
    DO              reduce using rule 53 (condition -> IF f_isCondition expression block .)
    CALL            reduce using rule 53 (condition -> IF f_isCondition expression block .)
    BOOL            reduce using rule 53 (condition -> IF f_isCondition expression block .)
    INT             reduce using rule 53 (condition -> IF f_isCondition expression block .)
    FLOAT           reduce using rule 53 (condition -> IF f_isCondition expression block .)
    STRING          reduce using rule 53 (condition -> IF f_isCondition expression block .)
    IMAGE           reduce using rule 53 (condition -> IF f_isCondition expression block .)
    NEWLINE         reduce using rule 53 (condition -> IF f_isCondition expression block .)
    SEMICOLON       reduce using rule 53 (condition -> IF f_isCondition expression block .)
    ELSE            shift and go to state 223


state 215

    (27) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN block . functions
    (26) functions -> . DEF tipo ID f_saveModule LPAREN RPAREN block functions
    (27) functions -> . DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN block functions
    (28) functions -> . DEF VOID ID f_saveModule LPAREN RPAREN block functions
    (29) functions -> . DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN block functions
    (30) functions -> . DEF VOID MAIN f_saveModule LPAREN RPAREN block functions
    (31) functions -> . DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN block functions
    (32) functions -> . empty
    (3) empty -> .

    DEF             shift and go to state 43
    $end            reduce using rule 3 (empty -> .)

    functions                      shift and go to state 224
    empty                          shift and go to state 42

state 216

    (35) parameterList -> COMMA tipo ID . f_addToParam parameterList
    (36) f_addToParam -> .

    COMMA           reduce using rule 36 (f_addToParam -> .)
    RPAREN          reduce using rule 36 (f_addToParam -> .)

    f_addToParam                   shift and go to state 225

state 217

    (31) functions -> DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN block . functions
    (26) functions -> . DEF tipo ID f_saveModule LPAREN RPAREN block functions
    (27) functions -> . DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN block functions
    (28) functions -> . DEF VOID ID f_saveModule LPAREN RPAREN block functions
    (29) functions -> . DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN block functions
    (30) functions -> . DEF VOID MAIN f_saveModule LPAREN RPAREN block functions
    (31) functions -> . DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN block functions
    (32) functions -> . empty
    (3) empty -> .

    DEF             shift and go to state 43
    $end            reduce using rule 3 (empty -> .)

    functions                      shift and go to state 226
    empty                          shift and go to state 42

state 218

    (29) functions -> DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN block . functions
    (26) functions -> . DEF tipo ID f_saveModule LPAREN RPAREN block functions
    (27) functions -> . DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN block functions
    (28) functions -> . DEF VOID ID f_saveModule LPAREN RPAREN block functions
    (29) functions -> . DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN block functions
    (30) functions -> . DEF VOID MAIN f_saveModule LPAREN RPAREN block functions
    (31) functions -> . DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN block functions
    (32) functions -> . empty
    (3) empty -> .

    DEF             shift and go to state 43
    $end            reduce using rule 3 (empty -> .)

    functions                      shift and go to state 227
    empty                          shift and go to state 42

state 219

    (56) cycle -> DO block WHILE f_isCondition expression . NEWLINE

    NEWLINE         shift and go to state 228


state 220

    (41) block -> COLON NEWLINE statement moreStatements NEWLINE SEMICOLON . NEWLINE

    NEWLINE         shift and go to state 229


state 221

    (42) block -> COLON NEWLINE statement moreStatements SEMICOLON NEWLINE .

    DEF             reduce using rule 42 (block -> COLON NEWLINE statement moreStatements SEMICOLON NEWLINE .)
    $end            reduce using rule 42 (block -> COLON NEWLINE statement moreStatements SEMICOLON NEWLINE .)
    WHILE           reduce using rule 42 (block -> COLON NEWLINE statement moreStatements SEMICOLON NEWLINE .)
    RETURN          reduce using rule 42 (block -> COLON NEWLINE statement moreStatements SEMICOLON NEWLINE .)
    ID              reduce using rule 42 (block -> COLON NEWLINE statement moreStatements SEMICOLON NEWLINE .)
    IF              reduce using rule 42 (block -> COLON NEWLINE statement moreStatements SEMICOLON NEWLINE .)
    DO              reduce using rule 42 (block -> COLON NEWLINE statement moreStatements SEMICOLON NEWLINE .)
    CALL            reduce using rule 42 (block -> COLON NEWLINE statement moreStatements SEMICOLON NEWLINE .)
    BOOL            reduce using rule 42 (block -> COLON NEWLINE statement moreStatements SEMICOLON NEWLINE .)
    INT             reduce using rule 42 (block -> COLON NEWLINE statement moreStatements SEMICOLON NEWLINE .)
    FLOAT           reduce using rule 42 (block -> COLON NEWLINE statement moreStatements SEMICOLON NEWLINE .)
    STRING          reduce using rule 42 (block -> COLON NEWLINE statement moreStatements SEMICOLON NEWLINE .)
    IMAGE           reduce using rule 42 (block -> COLON NEWLINE statement moreStatements SEMICOLON NEWLINE .)
    NEWLINE         reduce using rule 42 (block -> COLON NEWLINE statement moreStatements SEMICOLON NEWLINE .)
    SEMICOLON       reduce using rule 42 (block -> COLON NEWLINE statement moreStatements SEMICOLON NEWLINE .)
    ELSE            reduce using rule 42 (block -> COLON NEWLINE statement moreStatements SEMICOLON NEWLINE .)


state 222

    (43) block -> COLON statement moreStatements NEWLINE SEMICOLON NEWLINE .

    DEF             reduce using rule 43 (block -> COLON statement moreStatements NEWLINE SEMICOLON NEWLINE .)
    $end            reduce using rule 43 (block -> COLON statement moreStatements NEWLINE SEMICOLON NEWLINE .)
    WHILE           reduce using rule 43 (block -> COLON statement moreStatements NEWLINE SEMICOLON NEWLINE .)
    RETURN          reduce using rule 43 (block -> COLON statement moreStatements NEWLINE SEMICOLON NEWLINE .)
    ID              reduce using rule 43 (block -> COLON statement moreStatements NEWLINE SEMICOLON NEWLINE .)
    IF              reduce using rule 43 (block -> COLON statement moreStatements NEWLINE SEMICOLON NEWLINE .)
    DO              reduce using rule 43 (block -> COLON statement moreStatements NEWLINE SEMICOLON NEWLINE .)
    CALL            reduce using rule 43 (block -> COLON statement moreStatements NEWLINE SEMICOLON NEWLINE .)
    BOOL            reduce using rule 43 (block -> COLON statement moreStatements NEWLINE SEMICOLON NEWLINE .)
    INT             reduce using rule 43 (block -> COLON statement moreStatements NEWLINE SEMICOLON NEWLINE .)
    FLOAT           reduce using rule 43 (block -> COLON statement moreStatements NEWLINE SEMICOLON NEWLINE .)
    STRING          reduce using rule 43 (block -> COLON statement moreStatements NEWLINE SEMICOLON NEWLINE .)
    IMAGE           reduce using rule 43 (block -> COLON statement moreStatements NEWLINE SEMICOLON NEWLINE .)
    NEWLINE         reduce using rule 43 (block -> COLON statement moreStatements NEWLINE SEMICOLON NEWLINE .)
    SEMICOLON       reduce using rule 43 (block -> COLON statement moreStatements NEWLINE SEMICOLON NEWLINE .)
    ELSE            reduce using rule 43 (block -> COLON statement moreStatements NEWLINE SEMICOLON NEWLINE .)


state 223

    (54) condition -> IF f_isCondition expression block ELSE . block
    (41) block -> . COLON NEWLINE statement moreStatements NEWLINE SEMICOLON NEWLINE
    (42) block -> . COLON NEWLINE statement moreStatements SEMICOLON NEWLINE
    (43) block -> . COLON statement moreStatements NEWLINE SEMICOLON NEWLINE
    (44) block -> . COLON statement moreStatements SEMICOLON NEWLINE

    COLON           shift and go to state 140

    block                          shift and go to state 230

state 224

    (27) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN block functions .

    $end            reduce using rule 27 (functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN block functions .)


state 225

    (35) parameterList -> COMMA tipo ID f_addToParam . parameterList
    (34) parameterList -> . empty
    (35) parameterList -> . COMMA tipo ID f_addToParam parameterList
    (3) empty -> .

    COMMA           shift and go to state 192
    RPAREN          reduce using rule 3 (empty -> .)

    parameterList                  shift and go to state 231
    empty                          shift and go to state 191

state 226

    (31) functions -> DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN block functions .

    $end            reduce using rule 31 (functions -> DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN block functions .)


state 227

    (29) functions -> DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN block functions .

    $end            reduce using rule 29 (functions -> DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN block functions .)


state 228

    (56) cycle -> DO block WHILE f_isCondition expression NEWLINE .

    RETURN          reduce using rule 56 (cycle -> DO block WHILE f_isCondition expression NEWLINE .)
    ID              reduce using rule 56 (cycle -> DO block WHILE f_isCondition expression NEWLINE .)
    IF              reduce using rule 56 (cycle -> DO block WHILE f_isCondition expression NEWLINE .)
    WHILE           reduce using rule 56 (cycle -> DO block WHILE f_isCondition expression NEWLINE .)
    DO              reduce using rule 56 (cycle -> DO block WHILE f_isCondition expression NEWLINE .)
    CALL            reduce using rule 56 (cycle -> DO block WHILE f_isCondition expression NEWLINE .)
    BOOL            reduce using rule 56 (cycle -> DO block WHILE f_isCondition expression NEWLINE .)
    INT             reduce using rule 56 (cycle -> DO block WHILE f_isCondition expression NEWLINE .)
    FLOAT           reduce using rule 56 (cycle -> DO block WHILE f_isCondition expression NEWLINE .)
    STRING          reduce using rule 56 (cycle -> DO block WHILE f_isCondition expression NEWLINE .)
    IMAGE           reduce using rule 56 (cycle -> DO block WHILE f_isCondition expression NEWLINE .)
    NEWLINE         reduce using rule 56 (cycle -> DO block WHILE f_isCondition expression NEWLINE .)
    SEMICOLON       reduce using rule 56 (cycle -> DO block WHILE f_isCondition expression NEWLINE .)


state 229

    (41) block -> COLON NEWLINE statement moreStatements NEWLINE SEMICOLON NEWLINE .

    DEF             reduce using rule 41 (block -> COLON NEWLINE statement moreStatements NEWLINE SEMICOLON NEWLINE .)
    $end            reduce using rule 41 (block -> COLON NEWLINE statement moreStatements NEWLINE SEMICOLON NEWLINE .)
    WHILE           reduce using rule 41 (block -> COLON NEWLINE statement moreStatements NEWLINE SEMICOLON NEWLINE .)
    RETURN          reduce using rule 41 (block -> COLON NEWLINE statement moreStatements NEWLINE SEMICOLON NEWLINE .)
    ID              reduce using rule 41 (block -> COLON NEWLINE statement moreStatements NEWLINE SEMICOLON NEWLINE .)
    IF              reduce using rule 41 (block -> COLON NEWLINE statement moreStatements NEWLINE SEMICOLON NEWLINE .)
    DO              reduce using rule 41 (block -> COLON NEWLINE statement moreStatements NEWLINE SEMICOLON NEWLINE .)
    CALL            reduce using rule 41 (block -> COLON NEWLINE statement moreStatements NEWLINE SEMICOLON NEWLINE .)
    BOOL            reduce using rule 41 (block -> COLON NEWLINE statement moreStatements NEWLINE SEMICOLON NEWLINE .)
    INT             reduce using rule 41 (block -> COLON NEWLINE statement moreStatements NEWLINE SEMICOLON NEWLINE .)
    FLOAT           reduce using rule 41 (block -> COLON NEWLINE statement moreStatements NEWLINE SEMICOLON NEWLINE .)
    STRING          reduce using rule 41 (block -> COLON NEWLINE statement moreStatements NEWLINE SEMICOLON NEWLINE .)
    IMAGE           reduce using rule 41 (block -> COLON NEWLINE statement moreStatements NEWLINE SEMICOLON NEWLINE .)
    NEWLINE         reduce using rule 41 (block -> COLON NEWLINE statement moreStatements NEWLINE SEMICOLON NEWLINE .)
    SEMICOLON       reduce using rule 41 (block -> COLON NEWLINE statement moreStatements NEWLINE SEMICOLON NEWLINE .)
    ELSE            reduce using rule 41 (block -> COLON NEWLINE statement moreStatements NEWLINE SEMICOLON NEWLINE .)


state 230

    (54) condition -> IF f_isCondition expression block ELSE block .

    RETURN          reduce using rule 54 (condition -> IF f_isCondition expression block ELSE block .)
    ID              reduce using rule 54 (condition -> IF f_isCondition expression block ELSE block .)
    IF              reduce using rule 54 (condition -> IF f_isCondition expression block ELSE block .)
    WHILE           reduce using rule 54 (condition -> IF f_isCondition expression block ELSE block .)
    DO              reduce using rule 54 (condition -> IF f_isCondition expression block ELSE block .)
    CALL            reduce using rule 54 (condition -> IF f_isCondition expression block ELSE block .)
    BOOL            reduce using rule 54 (condition -> IF f_isCondition expression block ELSE block .)
    INT             reduce using rule 54 (condition -> IF f_isCondition expression block ELSE block .)
    FLOAT           reduce using rule 54 (condition -> IF f_isCondition expression block ELSE block .)
    STRING          reduce using rule 54 (condition -> IF f_isCondition expression block ELSE block .)
    IMAGE           reduce using rule 54 (condition -> IF f_isCondition expression block ELSE block .)
    NEWLINE         reduce using rule 54 (condition -> IF f_isCondition expression block ELSE block .)
    SEMICOLON       reduce using rule 54 (condition -> IF f_isCondition expression block ELSE block .)


state 231

    (35) parameterList -> COMMA tipo ID f_addToParam parameterList .

    RPAREN          reduce using rule 35 (parameterList -> COMMA tipo ID f_addToParam parameterList .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for BOOL in state 45 resolved as shift
WARNING: shift/reduce conflict for INT in state 45 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 45 resolved as shift
WARNING: shift/reduce conflict for STRING in state 45 resolved as shift
WARNING: shift/reduce conflict for IMAGE in state 45 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 140 resolved as shift
WARNING: shift/reduce conflict for ID in state 140 resolved as shift
WARNING: shift/reduce conflict for IF in state 140 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 140 resolved as shift
WARNING: shift/reduce conflict for DO in state 140 resolved as shift
WARNING: shift/reduce conflict for CALL in state 140 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 140 resolved as shift
WARNING: shift/reduce conflict for INT in state 140 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 140 resolved as shift
WARNING: shift/reduce conflict for STRING in state 140 resolved as shift
WARNING: shift/reduce conflict for IMAGE in state 140 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 140 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 161 resolved as shift
WARNING: shift/reduce conflict for ID in state 161 resolved as shift
WARNING: shift/reduce conflict for IF in state 161 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 161 resolved as shift
WARNING: shift/reduce conflict for DO in state 161 resolved as shift
WARNING: shift/reduce conflict for CALL in state 161 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 161 resolved as shift
WARNING: shift/reduce conflict for INT in state 161 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 161 resolved as shift
WARNING: shift/reduce conflict for STRING in state 161 resolved as shift
WARNING: shift/reduce conflict for IMAGE in state 161 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 162 resolved as shift
WARNING: shift/reduce conflict for ID in state 162 resolved as shift
WARNING: shift/reduce conflict for IF in state 162 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 162 resolved as shift
WARNING: shift/reduce conflict for DO in state 162 resolved as shift
WARNING: shift/reduce conflict for CALL in state 162 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 162 resolved as shift
WARNING: shift/reduce conflict for INT in state 162 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 162 resolved as shift
WARNING: shift/reduce conflict for STRING in state 162 resolved as shift
WARNING: shift/reduce conflict for IMAGE in state 162 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 185 resolved as shift
WARNING: shift/reduce conflict for ID in state 185 resolved as shift
WARNING: shift/reduce conflict for IF in state 185 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 185 resolved as shift
WARNING: shift/reduce conflict for DO in state 185 resolved as shift
WARNING: shift/reduce conflict for CALL in state 185 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 185 resolved as shift
WARNING: shift/reduce conflict for INT in state 185 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 185 resolved as shift
WARNING: shift/reduce conflict for STRING in state 185 resolved as shift
WARNING: shift/reduce conflict for IMAGE in state 185 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 186 resolved as shift
WARNING: shift/reduce conflict for ID in state 186 resolved as shift
WARNING: shift/reduce conflict for IF in state 186 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 186 resolved as shift
WARNING: shift/reduce conflict for DO in state 186 resolved as shift
WARNING: shift/reduce conflict for CALL in state 186 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 186 resolved as shift
WARNING: shift/reduce conflict for INT in state 186 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 186 resolved as shift
WARNING: shift/reduce conflict for STRING in state 186 resolved as shift
WARNING: shift/reduce conflict for IMAGE in state 186 resolved as shift
WARNING: reduce/reduce conflict in state 164 resolved using rule (vars -> empty)
WARNING: rejected rule (assign -> empty) in state 164
WARNING: reduce/reduce conflict in state 187 resolved using rule (vars -> empty)
WARNING: rejected rule (moreStatements -> empty) in state 187
WARNING: reduce/reduce conflict in state 187 resolved using rule (vars -> empty)
WARNING: rejected rule (assign -> empty) in state 187
WARNING: Rule (moreStatements -> empty) is never reduced
